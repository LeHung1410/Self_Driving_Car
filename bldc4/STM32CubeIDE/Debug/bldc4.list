
bldc4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a098  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800a270  0800a270  0001a270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f8  0800a6f8  00020598  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a700  0800a700  00020598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a700  0800a700  0001a700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a704  0800a704  0001a704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000598  20000000  0800a708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001690  20000598  0800aca0  00020598  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c28  0800aca0  00021c28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020598  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000205c8  2**0
                  CONTENTS, READONLY
 13 .debug_line   0004ad65  00000000  00000000  0002060b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000005f  00000000  00000000  0006b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0004c021  00000000  00000000  0006b3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009181  00000000  00000000  000b73f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001f28  00000000  00000000  000c0578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108a66  00000000  00000000  000c24a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003ac9  00000000  00000000  001caf06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0001eef9  00000000  00000000  001ce9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002da1b  00000000  00000000  001ed8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005a28  00000000  00000000  0021b2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000598 	.word	0x20000598
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a258 	.word	0x0800a258

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000059c 	.word	0x2000059c
 8000214:	0800a258 	.word	0x0800a258

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000516:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490e      	ldr	r1, [pc, #56]	; (8000554 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0b      	ldr	r4, [pc, #44]	; (8000560 <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053e:	f003 ff13 	bl	8004368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f009 fe57 	bl	800a1f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000546:	f000 fbad 	bl	8000ca4 <main>

0800054a <LoopForever>:

LoopForever:
    b LoopForever
 800054a:	e7fe      	b.n	800054a <LoopForever>
  ldr   r0, =_estack
 800054c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	20000598 	.word	0x20000598
  ldr r2, =_sidata
 8000558:	0800a708 	.word	0x0800a708
  ldr r2, =_sbss
 800055c:	20000598 	.word	0x20000598
  ldr r4, =_ebss
 8000560:	20001c28 	.word	0x20001c28

08000564 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <BusFault_Handler>
	...

08000568 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 800056c:	6940      	ldr	r0, [r0, #20]
 800056e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000570:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000572:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000574:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000576:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800057a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800057e:	6960      	ldr	r0, [r4, #20]
 8000580:	f104 011c 	add.w	r1, r4, #28
 8000584:	462b      	mov	r3, r5
 8000586:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800058c:	4718      	bx	r3
 800058e:	bf00      	nop

08000590 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000590:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000592:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 8000594:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000596:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800059a:	4c1e      	ldr	r4, [pc, #120]	; (8000614 <ASPEP_sendBeacon+0x84>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800059c:	01db      	lsls	r3, r3, #7
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800059e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80005a2:	784a      	ldrb	r2, [r1, #1]
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80005a8:	78ca      	ldrb	r2, [r1, #3]
 80005aa:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 80005ae:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80005b8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005bc:	5ca2      	ldrb	r2, [r4, r2]
 80005be:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005c2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005c4:	5ca2      	ldrb	r2, [r4, r2]
 80005c6:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005ca:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005cc:	5ca2      	ldrb	r2, [r4, r2]
 80005ce:	4c12      	ldr	r4, [pc, #72]	; (8000618 <ASPEP_sendBeacon+0x88>)
 80005d0:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005d4:	5ca2      	ldrb	r2, [r4, r2]
 80005d6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005da:	f043 0305 	orr.w	r3, r3, #5
 80005de:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005e2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005e4:	b14b      	cbz	r3, 80005fa <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005e6:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005e8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005ec:	b913      	cbnz	r3, 80005f4 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005ee:	2302      	movs	r3, #2
 80005f0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005f8:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005fa:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005fe:	2303      	movs	r3, #3
 8000600:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000604:	6481      	str	r1, [r0, #72]	; 0x48
 8000606:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000608:	2204      	movs	r2, #4
 800060a:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 800060c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000610:	6940      	ldr	r0, [r0, #20]
 8000612:	4718      	bx	r3
 8000614:	0800a280 	.word	0x0800a280
 8000618:	0800a270 	.word	0x0800a270

0800061c <ASPEP_sendPing>:
{
 800061c:	b430      	push	{r4, r5}
              | (uint32_t)((uint32_t)cBit << 5U)
 800061e:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000620:	f890 c060 	ldrb.w	ip, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000624:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000628:	4d1d      	ldr	r5, [pc, #116]	; (80006a0 <ASPEP_sendPing+0x84>)
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800062a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800062e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000632:	f00c 0101 	and.w	r1, ip, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000636:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800063a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 800063e:	f004 040f 	and.w	r4, r4, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000642:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000646:	b2d3      	uxtb	r3, r2
 8000648:	4c16      	ldr	r4, [pc, #88]	; (80006a4 <ASPEP_sendPing+0x88>)
 800064a:	f043 0306 	orr.w	r3, r3, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800064e:	f042 0106 	orr.w	r1, r2, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000652:	5ce3      	ldrb	r3, [r4, r3]
 8000654:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000658:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800065a:	5ce3      	ldrb	r3, [r4, r3]
 800065c:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000660:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000662:	5ce3      	ldrb	r3, [r4, r3]
 8000664:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000668:	5ceb      	ldrb	r3, [r5, r3]
 800066a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 800066e:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000672:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000674:	b143      	cbz	r3, 8000688 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000676:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000678:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800067c:	b913      	cbnz	r3, 8000684 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 800067e:	2302      	movs	r3, #2
 8000680:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000684:	bc30      	pop	{r4, r5}
 8000686:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000688:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800068c:	2303      	movs	r3, #3
 800068e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000692:	6481      	str	r1, [r0, #72]	; 0x48
 8000694:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000696:	2204      	movs	r2, #4
 8000698:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800069a:	6940      	ldr	r0, [r0, #20]
}
 800069c:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800069e:	4718      	bx	r3
 80006a0:	0800a270 	.word	0x0800a270
 80006a4:	0800a280 	.word	0x0800a280

080006a8 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 80006a8:	2a0a      	cmp	r2, #10
{
 80006aa:	b410      	push	{r4}
 80006ac:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 80006ae:	d00b      	beq.n	80006c8 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80006b0:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d921      	bls.n	80006fc <ASPEP_getBuffer+0x54>
 80006b8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80006bc:	2a01      	cmp	r2, #1
 80006be:	d911      	bls.n	80006e4 <ASPEP_getBuffer+0x3c>
        result = false;
 80006c0:	2000      	movs	r0, #0
}
 80006c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006c6:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006c8:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80006cc:	2a01      	cmp	r2, #1
 80006ce:	d8f7      	bhi.n	80006c0 <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 80006d2:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006d4:	3204      	adds	r2, #4
 80006d6:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006d8:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80006dc:	4620      	mov	r0, r4
}
 80006de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006e2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006e4:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006e6:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006e8:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006ec:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006f0:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006f2:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006f4:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006f8:	600a      	str	r2, [r1, #0]
}
 80006fa:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006fe:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000700:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000704:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000708:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800070a:	641c      	str	r4, [r3, #64]	; 0x40
}
 800070c:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000710:	600a      	str	r2, [r1, #0]
}
 8000712:	4770      	bx	lr

08000714 <ASPEP_sendPacket>:
{
 8000714:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000716:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 800071a:	2802      	cmp	r0, #2
 800071c:	d001      	beq.n	8000722 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 800071e:	2002      	movs	r0, #2
 8000720:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000722:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000726:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 800072a:	f89c 006c 	ldrb.w	r0, [ip, #108]	; 0x6c
 800072e:	2801      	cmp	r0, #1
 8000730:	d104      	bne.n	800073c <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000732:	f64f 60ca 	movw	r0, #65226	; 0xfeca
 8000736:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000738:	3202      	adds	r2, #2
 800073a:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 800073c:	2b0a      	cmp	r3, #10
 800073e:	d105      	bne.n	800074c <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000740:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000744:	b378      	cbz	r0, 80007a6 <ASPEP_sendPacket+0x92>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000746:	2000      	movs	r0, #0
 8000748:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 800074c:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000750:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000752:	4d35      	ldr	r5, [pc, #212]	; (8000828 <ASPEP_sendPacket+0x114>)
 8000754:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000756:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000758:	5d2e      	ldrb	r6, [r5, r4]
 800075a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800075e:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000760:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000764:	5d2e      	ldrb	r6, [r5, r4]
 8000766:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800076a:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800076c:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800076e:	5d2c      	ldrb	r4, [r5, r4]
 8000770:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000774:	406c      	eors	r4, r5
 8000776:	4d2d      	ldr	r5, [pc, #180]	; (800082c <ASPEP_sendPacket+0x118>)
  *headerPtr |= (uint32_t)crc << 28;
 8000778:	5d2c      	ldrb	r4, [r5, r4]
 800077a:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 800077e:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000782:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000784:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 8000788:	b1e9      	cbz	r1, 80007c6 <ASPEP_sendPacket+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
 800078a:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 800078c:	2b09      	cmp	r3, #9
 800078e:	d00c      	beq.n	80007aa <ASPEP_sendPacket+0x96>
      else if (MCTL_SYNC == dataType)
 8000790:	2b0a      	cmp	r3, #10
 8000792:	d031      	beq.n	80007f8 <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 8000794:	2b00      	cmp	r3, #0
 8000796:	d135      	bne.n	8000804 <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 8000798:	f89c 0024 	ldrb.w	r0, [ip, #36]	; 0x24
 800079c:	bb80      	cbnz	r0, 8000800 <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 800079e:	2302      	movs	r3, #2
 80007a0:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24
}
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 80007a6:	2001      	movs	r0, #1
}
 80007a8:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80007aa:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80007ae:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 80007b0:	458e      	cmp	lr, r1
 80007b2:	bf14      	ite	ne
 80007b4:	2003      	movne	r0, #3
 80007b6:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 80007b8:	f8dc 1044 	ldr.w	r1, [ip, #68]	; 0x44
 80007bc:	b381      	cbz	r1, 8000820 <ASPEP_sendPacket+0x10c>
        pHandle->lastRequestedAsyncBuff->state = pending;
 80007be:	2102      	movs	r1, #2
 80007c0:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80007c2:	809a      	strh	r2, [r3, #4]
}
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 80007c6:	2b09      	cmp	r3, #9
 80007c8:	d025      	beq.n	8000816 <ASPEP_sendPacket+0x102>
      else if (MCTL_SYNC == dataType)
 80007ca:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80007cc:	f04f 0303 	mov.w	r3, #3
 80007d0:	bf0b      	itete	eq
 80007d2:	f88c 302e 	strbeq.w	r3, [ip, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007d6:	f88c 3024 	strbne.w	r3, [ip, #36]	; 0x24
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 80007da:	f10c 0328 	addeq.w	r3, ip, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007de:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007e2:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 80007e6:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007e8:	f8dc 3058 	ldr.w	r3, [ip, #88]	; 0x58
 80007ec:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80007f0:	4671      	mov	r1, lr
 80007f2:	4798      	blx	r3
 80007f4:	2000      	movs	r0, #0
}
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 80007f8:	f89c 302e 	ldrb.w	r3, [ip, #46]	; 0x2e
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d003      	beq.n	8000808 <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 8000800:	2003      	movs	r0, #3
}
 8000802:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t result = ASPEP_OK;
 8000804:	2000      	movs	r0, #0
}
 8000806:	bd70      	pop	{r4, r5, r6, pc}
          pHandle->syncBuffer.state = pending;
 8000808:	2302      	movs	r3, #2
 800080a:	f88c 302e 	strb.w	r3, [ip, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 800080e:	f8ac 202c 	strh.w	r2, [ip, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 8000812:	2000      	movs	r0, #0
}
 8000814:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000816:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800081a:	2103      	movs	r1, #3
 800081c:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 800081e:	e7e0      	b.n	80007e2 <ASPEP_sendPacket+0xce>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000820:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 8000824:	e7cb      	b.n	80007be <ASPEP_sendPacket+0xaa>
 8000826:	bf00      	nop
 8000828:	0800a280 	.word	0x0800a280
 800082c:	0800a270 	.word	0x0800a270

08000830 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000830:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000832:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000836:	2b03      	cmp	r3, #3
{
 8000838:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800083a:	d013      	beq.n	8000864 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 800083c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800083e:	2100      	movs	r1, #0
 8000840:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000842:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000846:	2a02      	cmp	r2, #2
 8000848:	d013      	beq.n	8000872 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 800084a:	2b02      	cmp	r3, #2
 800084c:	d11d      	bne.n	800088a <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800084e:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000852:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000854:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000856:	2204      	movs	r2, #4
 8000858:	6940      	ldr	r0, [r0, #20]
 800085a:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 800085c:	2303      	movs	r3, #3
 800085e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000862:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000864:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000868:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800086a:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 800086c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000870:	d10b      	bne.n	800088a <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000872:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000876:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000878:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800087a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800087c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800087e:	6960      	ldr	r0, [r4, #20]
 8000880:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000882:	2303      	movs	r3, #3
 8000884:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000888:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800088a:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 800088c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800088e:	b1cb      	cbz	r3, 80008c4 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000890:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000892:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000894:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	889a      	ldrh	r2, [r3, #4]
 800089a:	6960      	ldr	r0, [r4, #20]
 800089c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800089e:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 80008a0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d007      	beq.n	80008b8 <ASPEP_HWDataTransmittedIT+0x88>
 80008a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d003      	beq.n	80008b8 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80008b4:	b662      	cpsie	i
}
 80008b6:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 80008b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008ba:	0063      	lsls	r3, r4, #1
 80008bc:	3368      	adds	r3, #104	; 0x68
 80008be:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80008c0:	6463      	str	r3, [r4, #68]	; 0x44
        {
 80008c2:	e7f7      	b.n	80008b4 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 80008c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80008c6:	e7f5      	b.n	80008b4 <ASPEP_HWDataTransmittedIT+0x84>

080008c8 <ASPEP_RXframeProcess>:
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80008c8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008cc:	69c2      	ldr	r2, [r0, #28]
{
 80008ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    *packetLength = 0;
 80008d2:	2500      	movs	r5, #0
{
 80008d4:	4604      	mov	r4, r0
    *packetLength = 0;
 80008d6:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80008d8:	b193      	cbz	r3, 8000900 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008da:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008de:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 80008e2:	2e01      	cmp	r6, #1
 80008e4:	d054      	beq.n	8000990 <ASPEP_RXframeProcess+0xc8>
 80008e6:	2e02      	cmp	r6, #2
 80008e8:	d03e      	beq.n	8000968 <ASPEP_RXframeProcess+0xa0>
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d033      	beq.n	8000956 <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008f0:	6960      	ldr	r0, [r4, #20]
 80008f2:	2204      	movs	r2, #4
 80008f4:	f104 011c 	add.w	r1, r4, #28
 80008f8:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 80008fa:	4628      	mov	r0, r5
 80008fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000900:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 8000904:	2d00      	cmp	r5, #0
 8000906:	d0f8      	beq.n	80008fa <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000908:	042b      	lsls	r3, r5, #16
 800090a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800090e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000912:	489b      	ldr	r0, [pc, #620]	; (8000b80 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000914:	4d9b      	ldr	r5, [pc, #620]	; (8000b84 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000916:	f082 0209 	eor.w	r2, r2, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800091a:	5c81      	ldrb	r1, [r0, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800091c:	f043 020f 	orr.w	r2, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000920:	ea81 4313 	eor.w	r3, r1, r3, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000924:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000926:	5ceb      	ldrb	r3, [r5, r3]
 8000928:	ea42 7303 	orr.w	r3, r2, r3, lsl #28
 800092c:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800092e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000930:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000932:	2b00      	cmp	r3, #0
 8000934:	d03a      	beq.n	80009ac <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000936:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000938:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800093c:	b913      	cbnz	r3, 8000944 <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 800093e:	2302      	movs	r3, #2
 8000940:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000944:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000946:	6960      	ldr	r0, [r4, #20]
 8000948:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 800094a:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800094e:	4798      	blx	r3
}
 8000950:	4628      	mov	r0, r5
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000956:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8000958:	2905      	cmp	r1, #5
 800095a:	f000 809e 	beq.w	8000a9a <ASPEP_RXframeProcess+0x1d2>
          else if (PING == pHandle->rxPacketType)
 800095e:	2906      	cmp	r1, #6
 8000960:	f000 80e3 	beq.w	8000b2a <ASPEP_RXframeProcess+0x262>
  uint8_t *result = NULL;
 8000964:	4635      	mov	r5, r6
 8000966:	e7c2      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000968:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800096a:	2e05      	cmp	r6, #5
 800096c:	d060      	beq.n	8000a30 <ASPEP_RXframeProcess+0x168>
          else if (PING == pHandle->rxPacketType)
 800096e:	2e06      	cmp	r6, #6
 8000970:	f000 80e2 	beq.w	8000b38 <ASPEP_RXframeProcess+0x270>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000974:	2e09      	cmp	r6, #9
 8000976:	d1ba      	bne.n	80008ee <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000978:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 800097c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000980:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000982:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000984:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000986:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800098a:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 800098c:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800098e:	e7ae      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000990:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8000992:	2905      	cmp	r1, #5
 8000994:	d016      	beq.n	80009c4 <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 8000996:	2906      	cmp	r1, #6
 8000998:	d1a9      	bne.n	80008ee <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 800099a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800099e:	4631      	mov	r1, r6
 80009a0:	f7ff fe3c 	bl	800061c <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 80009a4:	2302      	movs	r3, #2
 80009a6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009aa:	e7a0      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80009ac:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80009b0:	2303      	movs	r3, #3
 80009b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009b6:	64a1      	str	r1, [r4, #72]	; 0x48
 80009b8:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80009ba:	2204      	movs	r2, #4
 80009bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009be:	6960      	ldr	r0, [r4, #20]
 80009c0:	4798      	blx	r3
  return (result);
 80009c2:	e7bf      	b.n	8000944 <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009c4:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009c6:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009c8:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009cc:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009d0:	f894 706e 	ldrb.w	r7, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009d4:	f894 e06f 	ldrb.w	lr, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009dc:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009de:	4281      	cmp	r1, r0
 80009e0:	bf28      	it	cs
 80009e2:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009e4:	42b3      	cmp	r3, r6
 80009e6:	469c      	mov	ip, r3
 80009e8:	bf28      	it	cs
 80009ea:	46b4      	movcs	ip, r6
 80009ec:	f36c 0507 	bfi	r5, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009f0:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 80009f4:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009f8:	45bc      	cmp	ip, r7
 80009fa:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009fc:	f361 250f 	bfi	r5, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a00:	bf28      	it	cs
 8000a02:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a04:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a06:	f369 4517 	bfi	r5, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a0a:	46c1      	mov	r9, r8
 8000a0c:	bf28      	it	cs
 8000a0e:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a10:	f369 651f 	bfi	r5, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a14:	42b3      	cmp	r3, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a16:	66e5      	str	r5, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a18:	f240 8093 	bls.w	8000b42 <ASPEP_RXframeProcess+0x27a>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a22:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a26:	4620      	mov	r0, r4
 8000a28:	f7ff fdb2 	bl	8000590 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	e75e      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a30:	7f46      	ldrb	r6, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a32:	f890 c06c 	ldrb.w	ip, [r0, #108]	; 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a36:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a38:	f890 006d 	ldrb.w	r0, [r0, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a3c:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a40:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a44:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a48:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a4a:	42b0      	cmp	r0, r6
 8000a4c:	bf28      	it	cs
 8000a4e:	4630      	movcs	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a50:	4563      	cmp	r3, ip
 8000a52:	461f      	mov	r7, r3
 8000a54:	4629      	mov	r1, r5
 8000a56:	bf28      	it	cs
 8000a58:	4667      	movcs	r7, ip
 8000a5a:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a5e:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000a62:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a66:	4577      	cmp	r7, lr
 8000a68:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a6a:	f360 210f 	bfi	r1, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a6e:	bf28      	it	cs
 8000a70:	46f2      	movcs	sl, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a72:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a74:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a78:	46ca      	mov	sl, r9
 8000a7a:	bf28      	it	cs
 8000a7c:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a7e:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a82:	4563      	cmp	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a84:	66e1      	str	r1, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a86:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a8a:	d96b      	bls.n	8000b64 <ASPEP_RXframeProcess+0x29c>
 8000a8c:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a90:	4620      	mov	r0, r4
 8000a92:	f7ff fd7d 	bl	8000590 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 8000a96:	2500      	movs	r5, #0
 8000a98:	e729      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a9a:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a9c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000aa0:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aa2:	f890 e06c 	ldrb.w	lr, [r0, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000aa6:	f890 706e 	ldrb.w	r7, [r0, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aaa:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000aae:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000ab2:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ab4:	42a9      	cmp	r1, r5
 8000ab6:	bf28      	it	cs
 8000ab8:	4629      	movcs	r1, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aba:	4573      	cmp	r3, lr
 8000abc:	4618      	mov	r0, r3
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000abe:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac2:	bf28      	it	cs
 8000ac4:	4670      	movcs	r0, lr
 8000ac6:	f360 0607 	bfi	r6, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000aca:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ace:	45b8      	cmp	r8, r7
 8000ad0:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ad2:	f361 260f 	bfi	r6, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ad6:	bf28      	it	cs
 8000ad8:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ada:	45ca      	cmp	sl, r9
 8000adc:	46d4      	mov	ip, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ade:	f360 4617 	bfi	r6, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ae2:	bf28      	it	cs
 8000ae4:	46cc      	movcs	ip, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ae6:	f36c 661f 	bfi	r6, ip, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000aea:	4573      	cmp	r3, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aec:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000aee:	d898      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000af0:	428d      	cmp	r5, r1
 8000af2:	d896      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000af4:	45b8      	cmp	r8, r7
 8000af6:	d894      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000af8:	45ca      	cmp	sl, r9
 8000afa:	d892      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000afc:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000b00:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d18c      	bne.n	8000a22 <ASPEP_RXframeProcess+0x15a>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b08:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0a:	1c42      	adds	r2, r0, #1
 8000b0c:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0e:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b10:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b12:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b16:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b18:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b1a:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b1c:	f8a4 c00e 	strh.w	ip, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b20:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b24:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000b28:	e77b      	b.n	8000a22 <ASPEP_RXframeProcess+0x15a>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b2a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b2e:	4631      	mov	r1, r6
 8000b30:	f7ff fd74 	bl	800061c <ASPEP_sendPing>
  uint8_t *result = NULL;
 8000b34:	4635      	mov	r5, r6
 8000b36:	e6da      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b38:	7f42      	ldrb	r2, [r0, #29]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	f7ff fd6e 	bl	800061c <ASPEP_sendPing>
 8000b40:	e6d5      	b.n	80008ee <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b42:	4288      	cmp	r0, r1
 8000b44:	f63f af6a 	bhi.w	8000a1c <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b48:	45bc      	cmp	ip, r7
 8000b4a:	f63f af67 	bhi.w	8000a1c <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b4e:	45f0      	cmp	r8, lr
 8000b50:	f63f af64 	bhi.w	8000a1c <ASPEP_RXframeProcess+0x154>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b54:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 8000b58:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	f47f af5d 	bne.w	8000a1c <ASPEP_RXframeProcess+0x154>
 8000b62:	e75e      	b.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b64:	4286      	cmp	r6, r0
 8000b66:	d891      	bhi.n	8000a8c <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b68:	4577      	cmp	r7, lr
 8000b6a:	d88f      	bhi.n	8000a8c <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b6c:	45c1      	cmp	r9, r8
 8000b6e:	d88d      	bhi.n	8000a8c <ASPEP_RXframeProcess+0x1c4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b70:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000b74:	f3c2 1302 	ubfx	r3, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000b78:	1aeb      	subs	r3, r5, r3
 8000b7a:	425d      	negs	r5, r3
 8000b7c:	415d      	adcs	r5, r3
 8000b7e:	e785      	b.n	8000a8c <ASPEP_RXframeProcess+0x1c4>
 8000b80:	0800a280 	.word	0x0800a280
 8000b84:	0800a270 	.word	0x0800a270

08000b88 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b88:	b510      	push	{r4, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000b8a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b8e:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b90:	b13b      	cbz	r3, 8000ba2 <ASPEP_HWDataReceivedIT+0x1a>
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d104      	bne.n	8000ba0 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b96:	2200      	movs	r2, #0
 8000b98:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b9c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000ba0:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000ba2:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000ba4:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <ASPEP_HWDataReceivedIT+0x98>)
 8000ba6:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000ba8:	5cd3      	ldrb	r3, [r2, r3]
 8000baa:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000bae:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bb0:	5cd3      	ldrb	r3, [r2, r3]
 8000bb2:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000bb6:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000bb8:	5cd3      	ldrb	r3, [r2, r3]
 8000bba:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000bbe:	5cd3      	ldrb	r3, [r2, r3]
 8000bc0:	b95b      	cbnz	r3, 8000bda <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000bc2:	7f03      	ldrb	r3, [r0, #28]
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000bcc:	d809      	bhi.n	8000be2 <ASPEP_HWDataReceivedIT+0x5a>
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d81e      	bhi.n	8000c10 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000bd8:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	2b09      	cmp	r3, #9
 8000be4:	d1f5      	bne.n	8000bd2 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000be6:	8b83      	ldrh	r3, [r0, #28]
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000bee:	b17b      	cbz	r3, 8000c10 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000bf0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d30f      	bcc.n	8000c18 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000bf8:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8000bfc:	6981      	ldr	r1, [r0, #24]
 8000bfe:	6940      	ldr	r0, [r0, #20]
 8000c00:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000c04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c06:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000c0e:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000c10:	2301      	movs	r3, #1
 8000c12:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000c16:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000c1e:	bd10      	pop	{r4, pc}
 8000c20:	0800a280 	.word	0x0800a280

08000c24 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000c24:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c26:	2200      	movs	r2, #0
 8000c28:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c2c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c2e:	6940      	ldr	r0, [r0, #20]
 8000c30:	2204      	movs	r2, #4
 8000c32:	311c      	adds	r1, #28
 8000c34:	4718      	bx	r3
 8000c36:	bf00      	nop

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3c:	2238      	movs	r2, #56	; 0x38
 8000c3e:	2100      	movs	r1, #0
 8000c40:	a806      	add	r0, sp, #24
 8000c42:	f009 facf 	bl	800a1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c46:	2000      	movs	r0, #0
 8000c48:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8000c4c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000c50:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c52:	f004 ff05 	bl	8005a60 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c56:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c5a:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000c60:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c64:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c68:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c6a:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6e:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c72:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c76:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f004 ff70 	bl	8005b5c <HAL_RCC_OscConfig>
 8000c7c:	b108      	cbz	r0, 8000c82 <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c82:	2104      	movs	r1, #4
 8000c84:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c86:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c88:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8c:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c90:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c94:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c96:	f005 f9e5 	bl	8006064 <HAL_RCC_ClockConfig>
 8000c9a:	b108      	cbz	r0, 8000ca0 <SystemClock_Config+0x68>
 8000c9c:	b672      	cpsid	i
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <SystemClock_Config+0x66>
}
 8000ca0:	b014      	add	sp, #80	; 0x50
 8000ca2:	bd10      	pop	{r4, pc}

08000ca4 <main>:
{
 8000ca4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	2400      	movs	r4, #0
{
 8000caa:	b0ab      	sub	sp, #172	; 0xac
  HAL_Init();
 8000cac:	f003 fb8c 	bl	80043c8 <HAL_Init>
  SystemClock_Config();
 8000cb0:	f7ff ffc2 	bl	8000c38 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb8:	4daa      	ldr	r5, [pc, #680]	; (8000f64 <main+0x2c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	941f      	str	r4, [sp, #124]	; 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	48aa      	ldr	r0, [pc, #680]	; (8000f68 <main+0x2c4>)
  hadc1.Instance = ADC1;
 8000cc0:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8000fa4 <main+0x300>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000cca:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	9304      	str	r3, [sp, #16]
 8000cd2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cd6:	f043 0320 	orr.w	r3, r3, #32
 8000cda:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000cdc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	9305      	str	r3, [sp, #20]
 8000ce4:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000cee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	9306      	str	r3, [sp, #24]
 8000cf6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000d00:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d0e:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	9a07      	ldr	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d16:	931c      	str	r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f004 fd2c 	bl	8005774 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d1c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	64ab      	str	r3, [r5, #72]	; 0x48
 8000d24:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	64ab      	str	r3, [r5, #72]	; 0x48
 8000d36:	6cab      	ldr	r3, [r5, #72]	; 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8000d38:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d3a:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d3e:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d40:	9303      	str	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d42:	223c      	movs	r2, #60	; 0x3c
 8000d44:	a81b      	add	r0, sp, #108	; 0x6c
  ADC_MultiModeTypeDef multimode = {0};
 8000d46:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	9b03      	ldr	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d4c:	f009 fa4a 	bl	800a1e4 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d50:	2220      	movs	r2, #32
 8000d52:	4621      	mov	r1, r4
 8000d54:	a813      	add	r0, sp, #76	; 0x4c
 8000d56:	f009 fa45 	bl	800a1e4 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d5a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d5e:	e9cb 4401 	strd	r4, r4, [fp, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d62:	e9cb 440b 	strd	r4, r4, [fp, #44]	; 0x2c
  hadc1.Init.GainCompensation = 0;
 8000d66:	f8cb 4010 	str.w	r4, [fp, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d6a:	f8ab 401c 	strh.w	r4, [fp, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d6e:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d72:	f88b 4038 	strb.w	r4, [fp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d76:	f8cb 403c 	str.w	r4, [fp, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d7a:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
  hadc1.Instance = ADC1;
 8000d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d82:	2501      	movs	r5, #1
 8000d84:	2404      	movs	r4, #4
  hadc1.Init.NbrOfConversion = 2;
 8000d86:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d88:	4658      	mov	r0, fp
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8a:	e9cb 5405 	strd	r5, r4, [fp, #20]
  hadc1.Instance = ADC1;
 8000d8e:	f8cb 2000 	str.w	r2, [fp]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d92:	f8cb 700c 	str.w	r7, [fp, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d96:	f8cb 6020 	str.w	r6, [fp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d9a:	f003 fb49 	bl	8004430 <HAL_ADC_Init>
 8000d9e:	b108      	cbz	r0, 8000da4 <main+0x100>
 8000da0:	b672      	cpsid	i
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <main+0xfe>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000da4:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000da6:	a90e      	add	r1, sp, #56	; 0x38
 8000da8:	4658      	mov	r0, fp
 8000daa:	f004 f99f 	bl	80050ec <HAL_ADCEx_MultiModeConfigChannel>
 8000dae:	b108      	cbz	r0, 8000db4 <main+0x110>
 8000db0:	b672      	cpsid	i
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <main+0x10e>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000db4:	4b6d      	ldr	r3, [pc, #436]	; (8000f6c <main+0x2c8>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000db6:	f8ad 0090 	strh.w	r0, [sp, #144]	; 0x90
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000dba:	f04f 0a09 	mov.w	sl, #9
  sConfigInjected.InjectedOffset = 0;
 8000dbe:	e9cd 401f 	strd	r4, r0, [sp, #124]	; 0x7c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000dc2:	e9cd 3a1b 	strd	r3, sl, [sp, #108]	; 0x6c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000dc6:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000dca:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000dce:	f04f 087f 	mov.w	r8, #127	; 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000dd2:	f04f 0984 	mov.w	r9, #132	; 0x84
 8000dd6:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dd8:	a91b      	add	r1, sp, #108	; 0x6c
 8000dda:	4658      	mov	r0, fp
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000ddc:	e9cd 9325 	strd	r9, r3, [sp, #148]	; 0x94
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000de0:	951d      	str	r5, [sp, #116]	; 0x74
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000de2:	9623      	str	r6, [sp, #140]	; 0x8c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000de4:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000de8:	f003 fe8c 	bl	8004b04 <HAL_ADCEx_InjectedConfigChannel>
 8000dec:	b108      	cbz	r0, 8000df2 <main+0x14e>
 8000dee:	b672      	cpsid	i
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <main+0x14c>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000df2:	4a5f      	ldr	r2, [pc, #380]	; (8000f70 <main+0x2cc>)
 8000df4:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000df8:	a91b      	add	r1, sp, #108	; 0x6c
 8000dfa:	4658      	mov	r0, fp
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000dfc:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e00:	f003 fe80 	bl	8004b04 <HAL_ADCEx_InjectedConfigChannel>
 8000e04:	b108      	cbz	r0, 8000e0a <main+0x166>
 8000e06:	b672      	cpsid	i
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <main+0x164>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0a:	4b5a      	ldr	r3, [pc, #360]	; (8000f74 <main+0x2d0>)
  sConfig.Offset = 0;
 8000e0c:	9018      	str	r0, [sp, #96]	; 0x60
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0e:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	a913      	add	r1, sp, #76	; 0x4c
 8000e12:	4658      	mov	r0, fp
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e14:	e9cd 4815 	strd	r4, r8, [sp, #84]	; 0x54
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e18:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e1c:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	f003 fc0b 	bl	8004638 <HAL_ADC_ConfigChannel>
 8000e22:	b108      	cbz	r0, 8000e28 <main+0x184>
 8000e24:	b672      	cpsid	i
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <main+0x182>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e28:	4658      	mov	r0, fp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e2a:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8000fa8 <main+0x304>
 8000e2e:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e30:	a913      	add	r1, sp, #76	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e32:	e9cd b313 	strd	fp, r3, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e36:	f003 fbff 	bl	8004638 <HAL_ADC_ConfigChannel>
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	b108      	cbz	r0, 8000e42 <main+0x19e>
 8000e3e:	b672      	cpsid	i
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <main+0x19c>
  hadc2.Instance = ADC2;
 8000e42:	f8df b168 	ldr.w	fp, [pc, #360]	; 8000fac <main+0x308>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e46:	9001      	str	r0, [sp, #4]
 8000e48:	223c      	movs	r2, #60	; 0x3c
 8000e4a:	a81b      	add	r0, sp, #108	; 0x6c
 8000e4c:	f009 f9ca 	bl	800a1e4 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e50:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000e52:	4a49      	ldr	r2, [pc, #292]	; (8000f78 <main+0x2d4>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e54:	f8ab 101c 	strh.w	r1, [fp, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e58:	4658      	mov	r0, fp
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5a:	e9cb 1101 	strd	r1, r1, [fp, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e5e:	e9cb 1504 	strd	r1, r5, [fp, #16]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e62:	f8cb 700c 	str.w	r7, [fp, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e66:	f8cb 4018 	str.w	r4, [fp, #24]
  hadc2.Init.NbrOfConversion = 1;
 8000e6a:	f8cb 5020 	str.w	r5, [fp, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e6e:	f88b 1024 	strb.w	r1, [fp, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e72:	f88b 1038 	strb.w	r1, [fp, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e76:	f8cb 103c 	str.w	r1, [fp, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000e7a:	f88b 1040 	strb.w	r1, [fp, #64]	; 0x40
  hadc2.Instance = ADC2;
 8000e7e:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e82:	f003 fad5 	bl	8004430 <HAL_ADC_Init>
 8000e86:	b108      	cbz	r0, 8000e8c <main+0x1e8>
 8000e88:	b672      	cpsid	i
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <main+0x1e6>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e8c:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <main+0x2c8>)
  sConfigInjected.InjectedOffset = 0;
 8000e8e:	9020      	str	r0, [sp, #128]	; 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e90:	e9cd 3a1b 	strd	r3, sl, [sp, #108]	; 0x6c
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e94:	f8ad 0090 	strh.w	r0, [sp, #144]	; 0x90
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e98:	2380      	movs	r3, #128	; 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e9a:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000e9e:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ea2:	a91b      	add	r1, sp, #108	; 0x6c
 8000ea4:	4658      	mov	r0, fp
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000ea6:	e9cd 581d 	strd	r5, r8, [sp, #116]	; 0x74
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000eaa:	941f      	str	r4, [sp, #124]	; 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000eac:	9623      	str	r6, [sp, #140]	; 0x8c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000eae:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000eb2:	9326      	str	r3, [sp, #152]	; 0x98
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000eb4:	f003 fe26 	bl	8004b04 <HAL_ADCEx_InjectedConfigChannel>
 8000eb8:	b108      	cbz	r0, 8000ebe <main+0x21a>
 8000eba:	b672      	cpsid	i
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <main+0x218>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000ebe:	f240 130f 	movw	r3, #271	; 0x10f
 8000ec2:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ec4:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <main+0x2d8>)
 8000ec8:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000eca:	4658      	mov	r0, fp
 8000ecc:	f003 fe1a 	bl	8004b04 <HAL_ADCEx_InjectedConfigChannel>
 8000ed0:	b108      	cbz	r0, 8000ed6 <main+0x232>
 8000ed2:	b672      	cpsid	i
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <main+0x230>
  hcomp1.Instance = COMP1;
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <main+0x2dc>)
 8000ed8:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <main+0x2e0>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000eda:	6058      	str	r0, [r3, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000edc:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000ee0:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hcomp1.Instance = COMP1;
 8000ee4:	601a      	str	r2, [r3, #0]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000ee6:	4618      	mov	r0, r3
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000ee8:	2240      	movs	r2, #64	; 0x40
 8000eea:	609a      	str	r2, [r3, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000eec:	f004 f96a 	bl	80051c4 <HAL_COMP_Init>
 8000ef0:	b108      	cbz	r0, 8000ef6 <main+0x252>
 8000ef2:	b672      	cpsid	i
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <main+0x250>
  hcomp2.Instance = COMP2;
 8000ef6:	4824      	ldr	r0, [pc, #144]	; (8000f88 <main+0x2e4>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000ef8:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8000fb0 <main+0x30c>
 8000efc:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000efe:	2440      	movs	r4, #64	; 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000f00:	e9c0 e300 	strd	lr, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f04:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f08:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000f0c:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000f0e:	f004 f959 	bl	80051c4 <HAL_COMP_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b108      	cbz	r0, 8000f1a <main+0x276>
 8000f16:	b672      	cpsid	i
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <main+0x274>
  hcomp4.Instance = COMP4;
 8000f1a:	481c      	ldr	r0, [pc, #112]	; (8000f8c <main+0x2e8>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000f1c:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f24:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <main+0x2ec>)
 8000f2a:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000f2c:	f004 f94a 	bl	80051c4 <HAL_COMP_Init>
 8000f30:	b108      	cbz	r0, 8000f36 <main+0x292>
 8000f32:	b672      	cpsid	i
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <main+0x290>
  hcordic.Instance = CORDIC;
 8000f36:	4817      	ldr	r0, [pc, #92]	; (8000f94 <main+0x2f0>)
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <main+0x2f4>)
 8000f3a:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000f3c:	f004 f9ea 	bl	8005314 <HAL_CORDIC_Init>
 8000f40:	4601      	mov	r1, r0
 8000f42:	b108      	cbz	r0, 8000f48 <main+0x2a4>
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <main+0x2a2>
  hdac3.Instance = DAC3;
 8000f48:	4d14      	ldr	r5, [pc, #80]	; (8000f9c <main+0x2f8>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	a81b      	add	r0, sp, #108	; 0x6c
 8000f4e:	f009 f949 	bl	800a1e4 <memset>
  hdac3.Instance = DAC3;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <main+0x2fc>)
 8000f54:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000f56:	4628      	mov	r0, r5
 8000f58:	f004 fa74 	bl	8005444 <HAL_DAC_Init>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	b348      	cbz	r0, 8000fb4 <main+0x310>
 8000f60:	b672      	cpsid	i
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <main+0x2be>
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48000800 	.word	0x48000800
 8000f6c:	0c900008 	.word	0x0c900008
 8000f70:	32601000 	.word	0x32601000
 8000f74:	04300002 	.word	0x04300002
 8000f78:	50000100 	.word	0x50000100
 8000f7c:	cb8c0000 	.word	0xcb8c0000
 8000f80:	2000068c 	.word	0x2000068c
 8000f84:	40010200 	.word	0x40010200
 8000f88:	200006b0 	.word	0x200006b0
 8000f8c:	200006d4 	.word	0x200006d4
 8000f90:	4001020c 	.word	0x4001020c
 8000f94:	200006f8 	.word	0x200006f8
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	20000720 	.word	0x20000720
 8000fa0:	50001000 	.word	0x50001000
 8000fa4:	200005b4 	.word	0x200005b4
 8000fa8:	14f00020 	.word	0x14f00020
 8000fac:	20000620 	.word	0x20000620
 8000fb0:	40010204 	.word	0x40010204
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000fb4:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fb6:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000fba:	f8ad 0070 	strh.w	r0, [sp, #112]	; 0x70
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000fbe:	901f      	str	r0, [sp, #124]	; 0x7c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fc0:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fc2:	a91b      	add	r1, sp, #108	; 0x6c
 8000fc4:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000fc6:	e9cd 3320 	strd	r3, r3, [sp, #128]	; 0x80
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000fca:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fcc:	f004 fa50 	bl	8005470 <HAL_DAC_ConfigChannel>
 8000fd0:	b108      	cbz	r0, 8000fd6 <main+0x332>
 8000fd2:	b672      	cpsid	i
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <main+0x330>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	2210      	movs	r2, #16
 8000fda:	a91b      	add	r1, sp, #108	; 0x6c
 8000fdc:	f004 fa48 	bl	8005470 <HAL_DAC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b108      	cbz	r0, 8000fe8 <main+0x344>
 8000fe4:	b672      	cpsid	i
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <main+0x342>
  hopamp1.Instance = OPAMP1;
 8000fe8:	48a2      	ldr	r0, [pc, #648]	; (8001274 <main+0x5d0>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000fea:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000fee:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000ff2:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000ff4:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000ff6:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000ff8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000ffa:	f44f 4540 	mov.w	r5, #49152	; 0xc000
  hopamp1.Instance = OPAMP1;
 8000ffe:	4b9e      	ldr	r3, [pc, #632]	; (8001278 <main+0x5d4>)
 8001000:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001002:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001006:	f004 fcaf 	bl	8005968 <HAL_OPAMP_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	b108      	cbz	r0, 8001012 <main+0x36e>
 800100e:	b672      	cpsid	i
  while (1)
 8001010:	e7fe      	b.n	8001010 <main+0x36c>
  hopamp2.Instance = OPAMP2;
 8001012:	489a      	ldr	r0, [pc, #616]	; (800127c <main+0x5d8>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001014:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001018:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 800101a:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800101c:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800101e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hopamp2.Instance = OPAMP2;
 8001020:	4b97      	ldr	r3, [pc, #604]	; (8001280 <main+0x5dc>)
 8001022:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001024:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001028:	f004 fc9e 	bl	8005968 <HAL_OPAMP_Init>
 800102c:	b108      	cbz	r0, 8001032 <main+0x38e>
 800102e:	b672      	cpsid	i
  while (1)
 8001030:	e7fe      	b.n	8001030 <main+0x38c>
  hopamp3.Instance = OPAMP3;
 8001032:	4b94      	ldr	r3, [pc, #592]	; (8001284 <main+0x5e0>)
 8001034:	4a94      	ldr	r2, [pc, #592]	; (8001288 <main+0x5e4>)
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001036:	6058      	str	r0, [r3, #4]
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001038:	e9c3 6509 	strd	r6, r5, [r3, #36]	; 0x24
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800103c:	6118      	str	r0, [r3, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800103e:	6198      	str	r0, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001040:	62d8      	str	r0, [r3, #44]	; 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 8001042:	2501      	movs	r5, #1
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001044:	4618      	mov	r0, r3
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001046:	609c      	str	r4, [r3, #8]
  hopamp3.Instance = OPAMP3;
 8001048:	601a      	str	r2, [r3, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 800104a:	751d      	strb	r5, [r3, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800104c:	f004 fc8c 	bl	8005968 <HAL_OPAMP_Init>
 8001050:	4604      	mov	r4, r0
 8001052:	b108      	cbz	r0, 8001058 <main+0x3b4>
 8001054:	b672      	cpsid	i
  while (1)
 8001056:	e7fe      	b.n	8001056 <main+0x3b2>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001058:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 800105c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001060:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 8001064:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8001068:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001070:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001074:	9012      	str	r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001076:	9008      	str	r0, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001078:	900b      	str	r0, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107a:	9019      	str	r0, [sp, #100]	; 0x64
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800107c:	4601      	mov	r1, r0
 800107e:	2234      	movs	r2, #52	; 0x34
 8001080:	a81b      	add	r0, sp, #108	; 0x6c
 8001082:	f009 f8af 	bl	800a1e4 <memset>
  htim1.Instance = TIM1;
 8001086:	4881      	ldr	r0, [pc, #516]	; (800128c <main+0x5e8>)
 8001088:	4b81      	ldr	r3, [pc, #516]	; (8001290 <main+0x5ec>)
 800108a:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800108c:	f04f 0c20 	mov.w	ip, #32
 8001090:	f640 3311 	movw	r3, #2833	; 0xb11
 8001094:	e9c0 c302 	strd	ip, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001098:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800109c:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800109e:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010a2:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010a4:	f005 fb14 	bl	80066d0 <HAL_TIM_Base_Init>
 80010a8:	b108      	cbz	r0, 80010ae <main+0x40a>
 80010aa:	b672      	cpsid	i
  while (1)
 80010ac:	e7fe      	b.n	80010ac <main+0x408>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ae:	4877      	ldr	r0, [pc, #476]	; (800128c <main+0x5e8>)
 80010b0:	f005 fb98 	bl	80067e4 <HAL_TIM_PWM_Init>
 80010b4:	b108      	cbz	r0, 80010ba <main+0x416>
 80010b6:	b672      	cpsid	i
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <main+0x414>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80010ba:	2306      	movs	r3, #6
 80010bc:	2610      	movs	r6, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80010be:	4873      	ldr	r0, [pc, #460]	; (800128c <main+0x5e8>)
 80010c0:	a90e      	add	r1, sp, #56	; 0x38
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80010c2:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80010c6:	f005 fd75 	bl	8006bb4 <HAL_TIM_SlaveConfigSynchro>
 80010ca:	b108      	cbz	r0, 80010d0 <main+0x42c>
 80010cc:	b672      	cpsid	i
  while (1)
 80010ce:	e7fe      	b.n	80010ce <main+0x42a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80010d4:	2470      	movs	r4, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d6:	486d      	ldr	r0, [pc, #436]	; (800128c <main+0x5e8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80010d8:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010da:	a908      	add	r1, sp, #32
 80010dc:	f005 ff48 	bl	8006f70 <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	b108      	cbz	r0, 80010e6 <main+0x442>
 80010e2:	b672      	cpsid	i
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <main+0x440>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80010e6:	2102      	movs	r1, #2
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80010e8:	900d      	str	r0, [sp, #52]	; 0x34
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80010ea:	2301      	movs	r3, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80010ec:	4867      	ldr	r0, [pc, #412]	; (800128c <main+0x5e8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80010ee:	910b      	str	r1, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80010f0:	aa0b      	add	r2, sp, #44	; 0x2c
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80010f2:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80010f4:	f005 ffd4 	bl	80070a0 <HAL_TIMEx_ConfigBreakInput>
 80010f8:	2102      	movs	r1, #2
 80010fa:	b108      	cbz	r0, 8001100 <main+0x45c>
 80010fc:	b672      	cpsid	i
  while (1)
 80010fe:	e7fe      	b.n	80010fe <main+0x45a>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001100:	4862      	ldr	r0, [pc, #392]	; (800128c <main+0x5e8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001102:	2504      	movs	r5, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001104:	aa0b      	add	r2, sp, #44	; 0x2c
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001106:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001108:	f005 ffca 	bl	80070a0 <HAL_TIMEx_ConfigBreakInput>
 800110c:	2102      	movs	r1, #2
 800110e:	b108      	cbz	r0, 8001114 <main+0x470>
 8001110:	b672      	cpsid	i
  while (1)
 8001112:	e7fe      	b.n	8001112 <main+0x46e>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001114:	aa0b      	add	r2, sp, #44	; 0x2c
 8001116:	485d      	ldr	r0, [pc, #372]	; (800128c <main+0x5e8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8001118:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800111a:	f005 ffc1 	bl	80070a0 <HAL_TIMEx_ConfigBreakInput>
 800111e:	4602      	mov	r2, r0
 8001120:	b108      	cbz	r0, 8001126 <main+0x482>
 8001122:	b672      	cpsid	i
  while (1)
 8001124:	e7fe      	b.n	8001124 <main+0x480>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001126:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800112a:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112e:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001130:	2660      	movs	r6, #96	; 0x60
 8001132:	f44f 63b1 	mov.w	r3, #1416	; 0x588
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001136:	4855      	ldr	r0, [pc, #340]	; (800128c <main+0x5e8>)
 8001138:	a913      	add	r1, sp, #76	; 0x4c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 800113a:	e9cd 6313 	strd	r6, r3, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	f005 fe15 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 8001142:	b108      	cbz	r0, 8001148 <main+0x4a4>
 8001144:	b672      	cpsid	i
  while (1)
 8001146:	e7fe      	b.n	8001146 <main+0x4a2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001148:	4850      	ldr	r0, [pc, #320]	; (800128c <main+0x5e8>)
 800114a:	462a      	mov	r2, r5
 800114c:	a913      	add	r1, sp, #76	; 0x4c
 800114e:	f005 fe0d 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 8001152:	b108      	cbz	r0, 8001158 <main+0x4b4>
 8001154:	b672      	cpsid	i
  while (1)
 8001156:	e7fe      	b.n	8001156 <main+0x4b2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001158:	484c      	ldr	r0, [pc, #304]	; (800128c <main+0x5e8>)
 800115a:	2208      	movs	r2, #8
 800115c:	a913      	add	r1, sp, #76	; 0x4c
 800115e:	f005 fe05 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 8001162:	b108      	cbz	r0, 8001168 <main+0x4c4>
 8001164:	b672      	cpsid	i
  while (1)
 8001166:	e7fe      	b.n	8001166 <main+0x4c2>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001168:	f44f 6331 	mov.w	r3, #2832	; 0xb10
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800116c:	4847      	ldr	r0, [pc, #284]	; (800128c <main+0x5e8>)
 800116e:	220c      	movs	r2, #12
 8001170:	a913      	add	r1, sp, #76	; 0x4c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001172:	e9cd 4313 	strd	r4, r3, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001176:	f005 fdf9 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 800117a:	b108      	cbz	r0, 8001180 <main+0x4dc>
 800117c:	b672      	cpsid	i
  while (1)
 800117e:	e7fe      	b.n	800117e <main+0x4da>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001188:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 800118c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001190:	223f      	movs	r2, #63	; 0x3f
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001192:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001194:	e9cd 021d 	strd	r0, r2, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001198:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119c:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80011a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011a4:	9223      	str	r2, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.Break2Filter = 3;
 80011a6:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80011aa:	2203      	movs	r2, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ac:	4837      	ldr	r0, [pc, #220]	; (800128c <main+0x5e8>)
 80011ae:	a91b      	add	r1, sp, #108	; 0x6c
  sBreakDeadTimeConfig.Break2Filter = 3;
 80011b0:	e9cd 4224 	strd	r4, r2, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011b4:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011b8:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011bc:	f005 ff22 	bl	8007004 <HAL_TIMEx_ConfigBreakDeadTime>
 80011c0:	4604      	mov	r4, r0
 80011c2:	b108      	cbz	r0, 80011c8 <main+0x524>
 80011c4:	b672      	cpsid	i
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <main+0x522>
  htim2.Instance = TIM2;
 80011c8:	4d32      	ldr	r5, [pc, #200]	; (8001294 <main+0x5f0>)
  HAL_TIM_MspPostInit(&htim1);
 80011ca:	4830      	ldr	r0, [pc, #192]	; (800128c <main+0x5e8>)
 80011cc:	f002 fe74 	bl	8003eb8 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80011d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d4:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d6:	4628      	mov	r0, r5
  htim2.Init.Period = 4.294967295E9;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011dc:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 80011e0:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011e8:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 80011ec:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011f4:	941f      	str	r4, [sp, #124]	; 0x7c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	9410      	str	r4, [sp, #64]	; 0x40
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = 4.294967295E9;
 80011fc:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fe:	f005 fa67 	bl	80066d0 <HAL_TIM_Base_Init>
 8001202:	b108      	cbz	r0, 8001208 <main+0x564>
 8001204:	b672      	cpsid	i
  while (1)
 8001206:	e7fe      	b.n	8001206 <main+0x562>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001208:	4628      	mov	r0, r5
 800120a:	f005 fb75 	bl	80068f8 <HAL_TIM_IC_Init>
 800120e:	b108      	cbz	r0, 8001214 <main+0x570>
 8001210:	b672      	cpsid	i
  while (1)
 8001212:	e7fe      	b.n	8001212 <main+0x56e>
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001214:	901d      	str	r0, [sp, #116]	; 0x74
  sSlaveConfig.TriggerFilter = 0;
 8001216:	901f      	str	r0, [sp, #124]	; 0x7c
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001218:	2404      	movs	r4, #4
 800121a:	2350      	movs	r3, #80	; 0x50
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800121c:	a91b      	add	r1, sp, #108	; 0x6c
 800121e:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001220:	e9cd 431b 	strd	r4, r3, [sp, #108]	; 0x6c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001224:	f005 fcc6 	bl	8006bb4 <HAL_TIM_SlaveConfigSynchro>
 8001228:	b108      	cbz	r0, 800122e <main+0x58a>
 800122a:	b672      	cpsid	i
  while (1)
 800122c:	e7fe      	b.n	800122c <main+0x588>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	900e      	str	r0, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001232:	a90e      	add	r1, sp, #56	; 0x38
 8001234:	4628      	mov	r0, r5
 8001236:	f005 fe9b 	bl	8006f70 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	b108      	cbz	r0, 8001240 <main+0x59c>
 800123c:	b672      	cpsid	i
  while (1)
 800123e:	e7fe      	b.n	800123e <main+0x59a>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001240:	2301      	movs	r3, #1
 8001242:	e9cd 0313 	strd	r0, r3, [sp, #76]	; 0x4c
  sConfigIC.ICFilter = 0;
 8001246:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800124a:	4602      	mov	r2, r0
 800124c:	a913      	add	r1, sp, #76	; 0x4c
 800124e:	4628      	mov	r0, r5
 8001250:	f005 fbda 	bl	8006a08 <HAL_TIM_IC_ConfigChannel>
 8001254:	b108      	cbz	r0, 800125a <main+0x5b6>
 8001256:	b672      	cpsid	i
  while (1)
 8001258:	e7fe      	b.n	8001258 <main+0x5b4>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800125a:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800125c:	4622      	mov	r2, r4
 800125e:	a913      	add	r1, sp, #76	; 0x4c
 8001260:	4628      	mov	r0, r5
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001262:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001266:	f005 fbcf 	bl	8006a08 <HAL_TIM_IC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	b1a0      	cbz	r0, 8001298 <main+0x5f4>
 800126e:	b672      	cpsid	i
  while (1)
 8001270:	e7fe      	b.n	8001270 <main+0x5cc>
 8001272:	bf00      	nop
 8001274:	200007f4 	.word	0x200007f4
 8001278:	40010300 	.word	0x40010300
 800127c:	20000830 	.word	0x20000830
 8001280:	40010304 	.word	0x40010304
 8001284:	2000086c 	.word	0x2000086c
 8001288:	40010308 	.word	0x40010308
 800128c:	200008a8 	.word	0x200008a8
 8001290:	40012c00 	.word	0x40012c00
 8001294:	200008f4 	.word	0x200008f4
  huart2.Instance = USART2;
 8001298:	4c32      	ldr	r4, [pc, #200]	; (8001364 <main+0x6c0>)
 800129a:	4833      	ldr	r0, [pc, #204]	; (8001368 <main+0x6c4>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129c:	62a3      	str	r3, [r4, #40]	; 0x28
  huart2.Init.BaudRate = 1843200;
 800129e:	f44f 11e1 	mov.w	r1, #1843200	; 0x1c2000
 80012a2:	e9c4 0100 	strd	r0, r1, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a6:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a8:	4620      	mov	r0, r4
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012aa:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ae:	e9c4 3204 	strd	r3, r2, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b2:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b6:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ba:	f006 f98b 	bl	80075d4 <HAL_UART_Init>
 80012be:	4601      	mov	r1, r0
 80012c0:	b108      	cbz	r0, 80012c6 <main+0x622>
 80012c2:	b672      	cpsid	i
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <main+0x620>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c6:	4620      	mov	r0, r4
 80012c8:	f006 fa0e 	bl	80076e8 <HAL_UARTEx_SetTxFifoThreshold>
 80012cc:	4601      	mov	r1, r0
 80012ce:	b108      	cbz	r0, 80012d4 <main+0x630>
 80012d0:	b672      	cpsid	i
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <main+0x62e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d4:	4620      	mov	r0, r4
 80012d6:	f006 fa49 	bl	800776c <HAL_UARTEx_SetRxFifoThreshold>
 80012da:	b108      	cbz	r0, 80012e0 <main+0x63c>
 80012dc:	b672      	cpsid	i
  while (1)
 80012de:	e7fe      	b.n	80012de <main+0x63a>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012e0:	4820      	ldr	r0, [pc, #128]	; (8001364 <main+0x6c0>)
 80012e2:	f006 f9e3 	bl	80076ac <HAL_UARTEx_DisableFifoMode>
 80012e6:	4604      	mov	r4, r0
 80012e8:	b108      	cbz	r0, 80012ee <main+0x64a>
 80012ea:	b672      	cpsid	i
  while (1)
 80012ec:	e7fe      	b.n	80012ec <main+0x648>
  MX_MotorControl_Init();
 80012ee:	f000 ff6f 	bl	80021d0 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80012f2:	2103      	movs	r1, #3
 80012f4:	2201      	movs	r2, #1
 80012f6:	2026      	movs	r0, #38	; 0x26
 80012f8:	f004 f838 	bl	800536c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012fc:	2026      	movs	r0, #38	; 0x26
 80012fe:	f004 f873 	bl	80053e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8001302:	4622      	mov	r2, r4
 8001304:	2103      	movs	r1, #3
 8001306:	200b      	movs	r0, #11
 8001308:	f004 f830 	bl	800536c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800130c:	200b      	movs	r0, #11
 800130e:	f004 f86b 	bl	80053e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001312:	4622      	mov	r2, r4
 8001314:	2103      	movs	r1, #3
 8001316:	201c      	movs	r0, #28
 8001318:	f004 f828 	bl	800536c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800131c:	201c      	movs	r0, #28
 800131e:	f004 f863 	bl	80053e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001322:	2201      	movs	r2, #1
 8001324:	2104      	movs	r1, #4
 8001326:	2018      	movs	r0, #24
 8001328:	f004 f820 	bl	800536c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800132c:	2018      	movs	r0, #24
 800132e:	f004 f85b 	bl	80053e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001332:	4622      	mov	r2, r4
 8001334:	4621      	mov	r1, r4
 8001336:	2019      	movs	r0, #25
 8001338:	f004 f818 	bl	800536c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800133c:	2019      	movs	r0, #25
 800133e:	f004 f853 	bl	80053e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001342:	4622      	mov	r2, r4
 8001344:	2102      	movs	r1, #2
 8001346:	2012      	movs	r0, #18
 8001348:	f004 f810 	bl	800536c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800134c:	2012      	movs	r0, #18
 800134e:	f004 f84b 	bl	80053e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001352:	2028      	movs	r0, #40	; 0x28
 8001354:	4622      	mov	r2, r4
 8001356:	2103      	movs	r1, #3
 8001358:	f004 f808 	bl	800536c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800135c:	2028      	movs	r0, #40	; 0x28
 800135e:	f004 f843 	bl	80053e8 <HAL_NVIC_EnableIRQ>
  while (1)
 8001362:	e7fe      	b.n	8001362 <main+0x6be>
 8001364:	20000940 	.word	0x20000940
 8001368:	40004400 	.word	0x40004400

0800136c <Error_Handler>:
 800136c:	b672      	cpsid	i
  while (1)
 800136e:	e7fe      	b.n	800136e <Error_Handler+0x2>

08001370 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <MC_StartMotor1+0x8>)
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	f000 b8ae 	b.w	80014d4 <MCI_StartMotor>
 8001378:	20001bc4 	.word	0x20001bc4

0800137c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <MC_StopMotor1+0x8>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	f000 b8be 	b.w	8001500 <MCI_StopMotor>
 8001384:	20001bc4 	.word	0x20001bc4

08001388 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
	return MCI_FaultAcknowledged( pMCI[M1] );
 8001388:	4b01      	ldr	r3, [pc, #4]	; (8001390 <MC_AcknowledgeFaultMotor1+0x8>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	f000 b8d8 	b.w	8001540 <MCI_FaultAcknowledged>
 8001390:	20001bc4 	.word	0x20001bc4

08001394 <MC_GetOccurredFaultsMotor1>:
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 8001394:	4b01      	ldr	r3, [pc, #4]	; (800139c <MC_GetOccurredFaultsMotor1+0x8>)
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	f000 b898 	b.w	80014cc <MCI_GetOccurredFaults>
 800139c:	20001bc4 	.word	0x20001bc4

080013a0 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 80013a0:	4b01      	ldr	r3, [pc, #4]	; (80013a8 <MC_GetSTMStateMotor1+0x8>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	f000 b890 	b.w	80014c8 <MCI_GetSTMState>
 80013a8:	20001bc4 	.word	0x20001bc4

080013ac <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 80013ac:	2002      	movs	r0, #2
 80013ae:	4770      	bx	lr

080013b0 <MC_APP_BootHook>:
 *
 *
 */
__weak void MC_APP_BootHook(void)
{
  esc_boot(&ESC_M1);
 80013b0:	4801      	ldr	r0, [pc, #4]	; (80013b8 <MC_APP_BootHook+0x8>)
 80013b2:	f006 ba55 	b.w	8007860 <esc_boot>
 80013b6:	bf00      	nop
 80013b8:	200000e0 	.word	0x200000e0

080013bc <MC_APP_PostMediumFrequencyHook_M1>:
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
{
  esc_pwm_control(&ESC_M1);
 80013bc:	4801      	ldr	r0, [pc, #4]	; (80013c4 <MC_APP_PostMediumFrequencyHook_M1+0x8>)
 80013be:	f006 ba69 	b.w	8007894 <esc_pwm_control>
 80013c2:	bf00      	nop
 80013c4:	200000e0 	.word	0x200000e0

080013c8 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80013c8:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 80013cc:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 80013d0:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80013d2:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 80013d6:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 80013da:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80013de:	f880 c020 	strb.w	ip, [r0, #32]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 80013e2:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 80013e6:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80013ea:	4770      	bx	lr

080013ec <MCI_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hDirection = hDir;
 80013ec:	83c1      	strh	r1, [r0, #30]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80013ee:	4770      	bx	lr

080013f0 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
      if (pHandle->hDirection < 0)
 80013f0:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
      {
        hFinalSpeed = hFinalSpeed;
      }
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
    pHandle->hDurationms = hDurationms;
 80013f4:	82c2      	strh	r2, [r0, #22]
      if (pHandle->hDirection < 0)
 80013f6:	2b00      	cmp	r3, #0
        hFinalSpeed = -hFinalSpeed;
 80013f8:	bfbc      	itt	lt
 80013fa:	4249      	neglt	r1, r1
 80013fc:	b209      	sxthlt	r1, r1
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80013fe:	f04f 0c01 	mov.w	ip, #1
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001402:	f240 3301 	movw	r3, #769	; 0x301
    pHandle->hFinalSpeed = hFinalSpeed;
 8001406:	81c1      	strh	r1, [r0, #14]
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001408:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800140c:	8403      	strh	r3, [r0, #32]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800140e:	4770      	bx	lr

08001410 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001410:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001414:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001418:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 800141c:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 800141e:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001420:	8403      	strh	r3, [r0, #32]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001422:	4770      	bx	lr

08001424 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001424:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001426:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001428:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 800142c:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 800142e:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001432:	8403      	strh	r3, [r0, #32]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001434:	b002      	add	sp, #8
 8001436:	4770      	bx	lr

08001438 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001438:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 800143a:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800143e:	430b      	orrs	r3, r1
 8001440:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 8001444:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001448:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 800144a:	8381      	strh	r1, [r0, #28]

  return;
}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001450:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d000      	beq.n	800145a <MCI_ExecBufferedCommands+0xa>
 8001458:	4770      	bx	lr
{
 800145a:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 800145c:	7b02      	ldrb	r2, [r0, #12]
 800145e:	2a02      	cmp	r2, #2
 8001460:	4604      	mov	r4, r0
 8001462:	d007      	beq.n	8001474 <MCI_ExecBufferedCommands+0x24>
 8001464:	2a03      	cmp	r2, #3
 8001466:	d028      	beq.n	80014ba <MCI_ExecBufferedCommands+0x6a>
 8001468:	2a01      	cmp	r2, #1
 800146a:	d017      	beq.n	800149c <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 800146c:	2303      	movs	r3, #3
 800146e:	f884 3020 	strb.w	r3, [r4, #32]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001472:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001474:	6843      	ldr	r3, [r0, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800147c:	6800      	ldr	r0, [r0, #0]
 800147e:	2104      	movs	r1, #4
 8001480:	f008 fa24 	bl	80098cc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001484:	8ae2      	ldrh	r2, [r4, #22]
 8001486:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800148a:	6820      	ldr	r0, [r4, #0]
 800148c:	f008 fa22 	bl	80098d4 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001490:	2800      	cmp	r0, #0
 8001492:	d0eb      	beq.n	800146c <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001494:	2302      	movs	r3, #2
 8001496:	f884 3020 	strb.w	r3, [r4, #32]
}
 800149a:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800149c:	6843      	ldr	r3, [r0, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80014a4:	6800      	ldr	r0, [r0, #0]
 80014a6:	2103      	movs	r1, #3
 80014a8:	f008 fa10 	bl	80098cc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80014ac:	8ae2      	ldrh	r2, [r4, #22]
 80014ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014b2:	6820      	ldr	r0, [r4, #0]
 80014b4:	f008 fa0e 	bl	80098d4 <STC_ExecRamp>
          break;
 80014b8:	e7ea      	b.n	8001490 <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80014ba:	6842      	ldr	r2, [r0, #4]
 80014bc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80014c0:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80014c4:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 80014c6:	e7e5      	b.n	8001494 <MCI_ExecBufferedCommands+0x44>

080014c8 <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 80014c8:	7e40      	ldrb	r0, [r0, #25]
 80014ca:	4770      	bx	lr

080014cc <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 80014cc:	8b80      	ldrh	r0, [r0, #28]
 80014ce:	4770      	bx	lr

080014d0 <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 80014d0:	8b40      	ldrh	r0, [r0, #26]
 80014d2:	4770      	bx	lr

080014d4 <MCI_StartMotor>:
{
 80014d4:	b510      	push	{r4, lr}
 80014d6:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80014d8:	f7ff fff6 	bl	80014c8 <MCI_GetSTMState>
 80014dc:	b108      	cbz	r0, 80014e2 <MCI_StartMotor+0xe>
    RetVal = false;
 80014de:	2000      	movs	r0, #0
}
 80014e0:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff fff2 	bl	80014cc <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d1f8      	bne.n	80014de <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff ffef 	bl	80014d0 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d1f3      	bne.n	80014de <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 80014f6:	2001      	movs	r0, #1
 80014f8:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80014fa:	f884 0020 	strb.w	r0, [r4, #32]
}
 80014fe:	bd10      	pop	{r4, pc}

08001500 <MCI_StopMotor>:
{
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 8001504:	f7ff ffe0 	bl	80014c8 <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 8001508:	b150      	cbz	r0, 8001520 <MCI_StopMotor+0x20>
 800150a:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800150e:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 8001510:	bf18      	it	ne
 8001512:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001514:	f7ff ffda 	bl	80014cc <MCI_GetOccurredFaults>
 8001518:	b140      	cbz	r0, 800152c <MCI_StopMotor+0x2c>
    RetVal = false;
 800151a:	2400      	movs	r4, #0
}
 800151c:	4620      	mov	r0, r4
 800151e:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 8001520:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001522:	4628      	mov	r0, r5
 8001524:	f7ff ffd2 	bl	80014cc <MCI_GetOccurredFaults>
 8001528:	2800      	cmp	r0, #0
 800152a:	d1f6      	bne.n	800151a <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800152c:	4628      	mov	r0, r5
 800152e:	f7ff ffcf 	bl	80014d0 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001532:	2800      	cmp	r0, #0
 8001534:	d1f1      	bne.n	800151a <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001536:	2c00      	cmp	r4, #0
 8001538:	d0ef      	beq.n	800151a <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 800153a:	2305      	movs	r3, #5
 800153c:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 800153e:	e7ed      	b.n	800151c <MCI_StopMotor+0x1c>

08001540 <MCI_FaultAcknowledged>:
{
 8001540:	b510      	push	{r4, lr}
 8001542:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001544:	f7ff ffc0 	bl	80014c8 <MCI_GetSTMState>
 8001548:	280b      	cmp	r0, #11
 800154a:	d001      	beq.n	8001550 <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 800154c:	2000      	movs	r0, #0
}
 800154e:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff ffbd 	bl	80014d0 <MCI_GetCurrentFaults>
 8001556:	2800      	cmp	r0, #0
 8001558:	d1f8      	bne.n	800154c <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800155a:	2302      	movs	r3, #2
 800155c:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 800155e:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 8001560:	2001      	movs	r0, #1
}
 8001562:	bd10      	pop	{r4, pc}

08001564 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001564:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001566:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 8001568:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop

08001570 <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001570:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop

08001578 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001578:	7b03      	ldrb	r3, [r0, #12]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d005      	beq.n	800158a <MCI_GetImposedMotorDirection+0x12>
 800157e:	2b03      	cmp	r3, #3
 8001580:	d013      	beq.n	80015aa <MCI_GetImposedMotorDirection+0x32>
 8001582:	2b01      	cmp	r3, #1
 8001584:	d009      	beq.n	800159a <MCI_GetImposedMotorDirection+0x22>
 8001586:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
}
 8001588:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 800158a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 800158e:	2b00      	cmp	r3, #0
 8001590:	bfac      	ite	ge
 8001592:	2001      	movge	r0, #1
 8001594:	f04f 30ff 	movlt.w	r0, #4294967295
 8001598:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 800159a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bfac      	ite	ge
 80015a2:	2001      	movge	r0, #1
 80015a4:	f04f 30ff 	movlt.w	r0, #4294967295
 80015a8:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 80015aa:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bfac      	ite	ge
 80015b2:	2001      	movge	r0, #1
 80015b4:	f04f 30ff 	movlt.w	r0, #4294967295
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 80015bc:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop

080015c4 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 80015c4:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop

080015cc <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 80015cc:	8ac0      	ldrh	r0, [r0, #22]
 80015ce:	4770      	bx	lr

080015d0 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80015d0:	6800      	ldr	r0, [r0, #0]
 80015d2:	f008 b9c3 	b.w	800995c <STC_StopRamp>
 80015d6:	bf00      	nop

080015d8 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 80015d8:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 80015da:	6800      	ldr	r0, [r0, #0]
 80015dc:	f008 f964 	bl	80098a8 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 80015e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80015e4:	f008 b908 	b.w	80097f8 <SPD_GetAvrgMecSpeedUnit>

080015e8 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80015e8:	6800      	ldr	r0, [r0, #0]
 80015ea:	f008 b967 	b.w	80098bc <STC_GetMecSpeedRefUnit>
 80015ee:	bf00      	nop

080015f0 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80015f0:	6842      	ldr	r2, [r0, #4]
 80015f2:	6810      	ldr	r0, [r2, #0]
 80015f4:	2300      	movs	r3, #0
 80015f6:	b282      	uxth	r2, r0
 80015f8:	f362 030f 	bfi	r3, r2, #0, #16
 80015fc:	0c00      	lsrs	r0, r0, #16
 80015fe:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001602:	b082      	sub	sp, #8
#endif
}
 8001604:	4618      	mov	r0, r3
 8001606:	b002      	add	sp, #8
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop

0800160c <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 800160c:	6842      	ldr	r2, [r0, #4]
 800160e:	6850      	ldr	r0, [r2, #4]
 8001610:	2300      	movs	r3, #0
 8001612:	b282      	uxth	r2, r0
 8001614:	f362 030f 	bfi	r3, r2, #0, #16
 8001618:	0c00      	lsrs	r0, r0, #16
 800161a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800161e:	b082      	sub	sp, #8
#endif
}
 8001620:	4618      	mov	r0, r3
 8001622:	b002      	add	sp, #8
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001628:	6842      	ldr	r2, [r0, #4]
 800162a:	68d0      	ldr	r0, [r2, #12]
 800162c:	2300      	movs	r3, #0
 800162e:	b282      	uxth	r2, r0
 8001630:	f362 030f 	bfi	r3, r2, #0, #16
 8001634:	0c00      	lsrs	r0, r0, #16
 8001636:	f360 431f 	bfi	r3, r0, #16, #16
{
 800163a:	b082      	sub	sp, #8
#endif
}
 800163c:	4618      	mov	r0, r3
 800163e:	b002      	add	sp, #8
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop

08001644 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001644:	6842      	ldr	r2, [r0, #4]
 8001646:	6910      	ldr	r0, [r2, #16]
 8001648:	2300      	movs	r3, #0
 800164a:	b282      	uxth	r2, r0
 800164c:	f362 030f 	bfi	r3, r2, #0, #16
 8001650:	0c00      	lsrs	r0, r0, #16
 8001652:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001656:	b082      	sub	sp, #8
#endif
}
 8001658:	4618      	mov	r0, r3
 800165a:	b002      	add	sp, #8
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop

08001660 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001660:	6842      	ldr	r2, [r0, #4]
 8001662:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001666:	2300      	movs	r3, #0
 8001668:	b282      	uxth	r2, r0
 800166a:	f362 030f 	bfi	r3, r2, #0, #16
 800166e:	0c00      	lsrs	r0, r0, #16
 8001670:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001674:	b082      	sub	sp, #8
#endif
}
 8001676:	4618      	mov	r0, r3
 8001678:	b002      	add	sp, #8
 800167a:	4770      	bx	lr

0800167c <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 800167c:	6842      	ldr	r2, [r0, #4]
 800167e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001682:	2300      	movs	r3, #0
 8001684:	b282      	uxth	r2, r0
 8001686:	f362 030f 	bfi	r3, r2, #0, #16
 800168a:	0c00      	lsrs	r0, r0, #16
 800168c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001690:	b082      	sub	sp, #8
#endif
}
 8001692:	4618      	mov	r0, r3
 8001694:	b002      	add	sp, #8
 8001696:	4770      	bx	lr

08001698 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001698:	6843      	ldr	r3, [r0, #4]
#endif
}
 800169a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800169e:	4770      	bx	lr

080016a0 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80016a0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80016a2:	e9d0 0400 	ldrd	r0, r4, [r0]
 80016a6:	f008 f98b 	bl	80099c0 <STC_GetDefaultIqdref>
 80016aa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80016ae:	8220      	strh	r0, [r4, #16]
 80016b0:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016b2:	bd10      	pop	{r4, pc}

080016b4 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80016b4:	f644 11e6 	movw	r1, #18918	; 0x49e6
 80016b8:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 80016ba:	fb13 f201 	smulbb	r2, r3, r1
{
 80016be:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80016c2:	fb10 f001 	smulbb	r0, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80016c6:	4252      	negs	r2, r2
 80016c8:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80016cc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
{
 80016d0:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 80016d2:	da05      	bge.n	80016e0 <MCM_Clarke+0x2c>
 80016d4:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80016d6:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80016da:	da0c      	bge.n	80016f6 <MCM_Clarke+0x42>
 80016dc:	4a09      	ldr	r2, [pc, #36]	; (8001704 <MCM_Clarke+0x50>)
 80016de:	e001      	b.n	80016e4 <MCM_Clarke+0x30>
 80016e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2000      	movs	r0, #0
 80016e8:	f363 000f 	bfi	r0, r3, #0, #16
 80016ec:	b293      	uxth	r3, r2
 80016ee:	f363 401f 	bfi	r0, r3, #16, #16
}
 80016f2:	b004      	add	sp, #16
 80016f4:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80016f6:	4803      	ldr	r0, [pc, #12]	; (8001704 <MCM_Clarke+0x50>)
 80016f8:	b20a      	sxth	r2, r1
 80016fa:	4282      	cmp	r2, r0
 80016fc:	bfb8      	it	lt
 80016fe:	4602      	movlt	r2, r0
 8001700:	e7f0      	b.n	80016e4 <MCM_Clarke+0x30>
 8001702:	bf00      	nop
 8001704:	ffff8001 	.word	0xffff8001

08001708 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800170a:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800170e:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001712:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001716:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001718:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800171a:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 800171c:	2000      	movs	r0, #0
 800171e:	b29a      	uxth	r2, r3
 8001720:	f362 000f 	bfi	r0, r2, #0, #16
 8001724:	0c1b      	lsrs	r3, r3, #16
{
 8001726:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 8001728:	f363 401f 	bfi	r0, r3, #16, #16
}
 800172c:	b002      	add	sp, #8
 800172e:	4770      	bx	lr
 8001730:	40020c00 	.word	0x40020c00

08001734 <MCM_Park>:
{
 8001734:	b530      	push	{r4, r5, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	4604      	mov	r4, r0
 800173a:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800173c:	4608      	mov	r0, r1
{
 800173e:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001740:	f7ff ffe2 	bl	8001708 <MCM_Trig_Functions>
 8001744:	b22d      	sxth	r5, r5
 8001746:	b201      	sxth	r1, r0
 8001748:	1424      	asrs	r4, r4, #16
 800174a:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800174c:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001750:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	da05      	bge.n	8001766 <MCM_Park+0x32>
 800175a:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 800175c:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001760:	da22      	bge.n	80017a8 <MCM_Park+0x74>
 8001762:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <MCM_Park+0x80>)
 8001764:	e001      	b.n	800176a <MCM_Park+0x36>
 8001766:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800176a:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800176e:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8001772:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001776:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 800177a:	da04      	bge.n	8001786 <MCM_Park+0x52>
  else if (wqd_tmp < (-32768))
 800177c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001780:	da0c      	bge.n	800179c <MCM_Park+0x68>
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MCM_Park+0x80>)
 8001784:	e001      	b.n	800178a <MCM_Park+0x56>
 8001786:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 800178a:	b292      	uxth	r2, r2
 800178c:	2000      	movs	r0, #0
 800178e:	f362 000f 	bfi	r0, r2, #0, #16
 8001792:	b29b      	uxth	r3, r3
 8001794:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001798:	b005      	add	sp, #20
 800179a:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 800179c:	4905      	ldr	r1, [pc, #20]	; (80017b4 <MCM_Park+0x80>)
 800179e:	b21b      	sxth	r3, r3
 80017a0:	428b      	cmp	r3, r1
 80017a2:	bfb8      	it	lt
 80017a4:	460b      	movlt	r3, r1
 80017a6:	e7f0      	b.n	800178a <MCM_Park+0x56>
    hqd_tmp = ((int16_t)wqd_tmp);
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <MCM_Park+0x80>)
 80017aa:	b212      	sxth	r2, r2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	bfb8      	it	lt
 80017b0:	461a      	movlt	r2, r3
 80017b2:	e7da      	b.n	800176a <MCM_Park+0x36>
 80017b4:	ffff8001 	.word	0xffff8001

080017b8 <MCM_Rev_Park>:
{
 80017b8:	b530      	push	{r4, r5, lr}
 80017ba:	b085      	sub	sp, #20
 80017bc:	4604      	mov	r4, r0
 80017be:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80017c0:	4608      	mov	r0, r1
{
 80017c2:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80017c4:	f7ff ffa0 	bl	8001708 <MCM_Trig_Functions>
 80017c8:	1424      	asrs	r4, r4, #16
 80017ca:	1402      	asrs	r2, r0, #16
 80017cc:	b22d      	sxth	r5, r5
 80017ce:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80017d0:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80017d4:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80017d8:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80017dc:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 80017e0:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80017e4:	2000      	movs	r0, #0
 80017e6:	f363 000f 	bfi	r0, r3, #0, #16
 80017ea:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 80017ee:	f364 401f 	bfi	r0, r4, #16, #16
}
 80017f2:	b005      	add	sp, #20
 80017f4:	bd30      	pop	{r4, r5, pc}
 80017f6:	bf00      	nop

080017f8 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 80017f8:	2800      	cmp	r0, #0
 80017fa:	dd09      	ble.n	8001810 <MCM_Sqrt+0x18>
 80017fc:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <MCM_Sqrt+0x1c>)
 8001800:	f240 1269 	movw	r2, #361	; 0x169
 8001804:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001806:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001808:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800180a:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 800180c:	b662      	cpsie	i
}
 800180e:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001810:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001812:	4770      	bx	lr
 8001814:	40020c00 	.word	0x40020c00

08001818 <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001818:	2226      	movs	r2, #38	; 0x26
{
 800181a:	b538      	push	{r3, r4, r5, lr}
 800181c:	fb00 f202 	mul.w	r2, r0, r2
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001822:	2400      	movs	r4, #0
 8001824:	509c      	str	r4, [r3, r2]
{
 8001826:	4605      	mov	r5, r0
 8001828:	f102 0108 	add.w	r1, r2, #8
 800182c:	1898      	adds	r0, r3, r2
 800182e:	3210      	adds	r2, #16
 8001830:	4419      	add	r1, r3
 8001832:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001834:	4a11      	ldr	r2, [pc, #68]	; (800187c <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001836:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001838:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 800183c:	604c      	str	r4, [r1, #4]
 800183e:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001840:	f8c3 4006 	str.w	r4, [r3, #6]
 8001844:	f8c3 400a 	str.w	r4, [r3, #10]
 8001848:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800184c:	4621      	mov	r1, r4
 800184e:	f006 fd7d 	bl	800834c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <FOC_Clear+0x68>)
 8001854:	4621      	mov	r1, r4
 8001856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800185a:	f006 fd77 	bl	800834c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <FOC_Clear+0x6c>)
 8001860:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001864:	f008 f822 	bl	80098ac <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <FOC_Clear+0x70>)
 800186a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800186e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001872:	f000 be03 	b.w	800247c <PWMC_SwitchOffPWM>
 8001876:	bf00      	nop
 8001878:	20000a00 	.word	0x20000a00
 800187c:	200004a8 	.word	0x200004a8
 8001880:	200004a4 	.word	0x200004a4
 8001884:	200004ac 	.word	0x200004ac
 8001888:	20000a34 	.word	0x20000a34

0800188c <MCboot>:
  if (MC_NULL == pMCIList)
 800188c:	2800      	cmp	r0, #0
 800188e:	d06d      	beq.n	800196c <MCboot+0xe0>
{
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001894:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80019b4 <MCboot+0x128>
    bMCBootCompleted = (uint8_t )0;
 8001898:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80019b8 <MCboot+0x12c>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 800189c:	4d34      	ldr	r5, [pc, #208]	; (8001970 <MCboot+0xe4>)
    RVBS_Init(&BusVoltageSensor_M1);
 800189e:	4e35      	ldr	r6, [pc, #212]	; (8001974 <MCboot+0xe8>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80018a0:	4f35      	ldr	r7, [pc, #212]	; (8001978 <MCboot+0xec>)
{
 80018a2:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 80018a4:	f04f 0800 	mov.w	r8, #0
 80018a8:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80018aa:	4834      	ldr	r0, [pc, #208]	; (800197c <MCboot+0xf0>)
 80018ac:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 80018b0:	f889 8000 	strb.w	r8, [r9]
    R3_2_Init(&PWM_Handle_M1);
 80018b4:	f007 f97e 	bl	8008bb4 <R3_2_Init>
    ASPEP_start(&aspepOverUartA);
 80018b8:	4831      	ldr	r0, [pc, #196]	; (8001980 <MCboot+0xf4>)
 80018ba:	f7fe fe55 	bl	8000568 <ASPEP_start>
    startTimers();
 80018be:	f006 fdeb 	bl	8008498 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80018c2:	4830      	ldr	r0, [pc, #192]	; (8001984 <MCboot+0xf8>)
 80018c4:	f006 fd2e 	bl	8008324 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 80018c8:	482f      	ldr	r0, [pc, #188]	; (8001988 <MCboot+0xfc>)
 80018ca:	f008 fa81 	bl	8009dd0 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80018ce:	4a2e      	ldr	r2, [pc, #184]	; (8001988 <MCboot+0xfc>)
 80018d0:	492c      	ldr	r1, [pc, #176]	; (8001984 <MCboot+0xf8>)
 80018d2:	6828      	ldr	r0, [r5, #0]
 80018d4:	f007 ffd0 	bl	8009878 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 80018d8:	482c      	ldr	r0, [pc, #176]	; (800198c <MCboot+0x100>)
 80018da:	f008 fb79 	bl	8009fd0 <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80018de:	f8db 3000 	ldr.w	r3, [fp]
 80018e2:	6829      	ldr	r1, [r5, #0]
 80018e4:	4a29      	ldr	r2, [pc, #164]	; (800198c <MCboot+0x100>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4829      	ldr	r0, [pc, #164]	; (8001990 <MCboot+0x104>)
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <MCboot+0x108>)
 80018ec:	f007 fe9c 	bl	8009628 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80018f0:	4829      	ldr	r0, [pc, #164]	; (8001998 <MCboot+0x10c>)
 80018f2:	f006 fd17 	bl	8008324 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80018f6:	4829      	ldr	r0, [pc, #164]	; (800199c <MCboot+0x110>)
 80018f8:	f006 fd14 	bl	8008324 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 80018fc:	4630      	mov	r0, r6
 80018fe:	f007 fda1 	bl	8009444 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001902:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <MCboot+0x114>)
    NTC_Init(&TempSensor_M1);
 8001904:	4827      	ldr	r0, [pc, #156]	; (80019a4 <MCboot+0x118>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800190a:	4e27      	ldr	r6, [pc, #156]	; (80019a8 <MCboot+0x11c>)
 800190c:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 800190e:	f006 fcc9 	bl	80082a4 <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <MCboot+0x120>)
 8001914:	4826      	ldr	r0, [pc, #152]	; (80019b0 <MCboot+0x124>)
 8001916:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8001918:	f007 fdfc 	bl	8009514 <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800191c:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 8001920:	4640      	mov	r0, r8
 8001922:	f7ff ff79 	bl	8001818 <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001926:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001928:	f886 a024 	strb.w	sl, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800192c:	f008 f848 	bl	80099c0 <STC_GetDefaultIqdref>
 8001930:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001932:	6828      	ldr	r0, [r5, #0]
 8001934:	f008 f844 	bl	80099c0 <STC_GetDefaultIqdref>
 8001938:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800193c:	f8db 3000 	ldr.w	r3, [fp]
 8001940:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001942:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001944:	4632      	mov	r2, r6
 8001946:	4638      	mov	r0, r7
 8001948:	f7ff fd3e 	bl	80013c8 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 800194c:	6828      	ldr	r0, [r5, #0]
 800194e:	f008 f833 	bl	80099b8 <STC_GetMecSpeedRefUnitDefault>
 8001952:	4642      	mov	r2, r8
 8001954:	4601      	mov	r1, r0
 8001956:	4638      	mov	r0, r7
 8001958:	f7ff fd4a 	bl	80013f0 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 800195c:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 800195e:	f7ff fd27 	bl	80013b0 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001962:	f889 a000 	strb.w	sl, [r9]
}
 8001966:	b005      	add	sp, #20
 8001968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	200004ac 	.word	0x200004ac
 8001974:	20000000 	.word	0x20000000
 8001978:	200009d0 	.word	0x200009d0
 800197c:	200001b0 	.word	0x200001b0
 8001980:	20000514 	.word	0x20000514
 8001984:	20000174 	.word	0x20000174
 8001988:	200002e4 	.word	0x200002e4
 800198c:	20000468 	.word	0x20000468
 8001990:	20000258 	.word	0x20000258
 8001994:	200002d0 	.word	0x200002d0
 8001998:	20000148 	.word	0x20000148
 800199c:	2000011c 	.word	0x2000011c
 80019a0:	200004a0 	.word	0x200004a0
 80019a4:	20000440 	.word	0x20000440
 80019a8:	20000a00 	.word	0x20000a00
 80019ac:	20000a30 	.word	0x20000a30
 80019b0:	20000240 	.word	0x20000240
 80019b4:	20000a34 	.word	0x20000a34
 80019b8:	20000a26 	.word	0x20000a26

080019bc <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80019c0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80019c2:	4c08      	ldr	r4, [pc, #32]	; (80019e4 <FOC_CalcCurrRef+0x24>)
 80019c4:	2326      	movs	r3, #38	; 0x26
 80019c6:	fb03 4400 	mla	r4, r3, r0, r4
 80019ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80019ce:	b103      	cbz	r3, 80019d2 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80019d0:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <FOC_CalcCurrRef+0x28>)
 80019d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80019d8:	f007 ffc4 	bl	8009964 <STC_CalcTorqueReference>
 80019dc:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80019de:	8220      	strh	r0, [r4, #16]
}
 80019e0:	bd10      	pop	{r4, pc}
 80019e2:	bf00      	nop
 80019e4:	20000a00 	.word	0x20000a00
 80019e8:	200004ac 	.word	0x200004ac

080019ec <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <TSK_SetChargeBootCapDelayM1+0x8>)
 80019ee:	8018      	strh	r0, [r3, #0]
}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000a28 	.word	0x20000a28

080019f8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80019fa:	8818      	ldrh	r0, [r3, #0]
 80019fc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80019fe:	fab0 f080 	clz	r0, r0
 8001a02:	0940      	lsrs	r0, r0, #5
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000a28 	.word	0x20000a28

08001a0c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001a0c:	4b01      	ldr	r3, [pc, #4]	; (8001a14 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001a0e:	8018      	strh	r0, [r3, #0]
}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000a2c 	.word	0x20000a2c

08001a18 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001a1a:	8818      	ldrh	r0, [r3, #0]
 8001a1c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a1e:	fab0 f080 	clz	r0, r0
 8001a22:	0940      	lsrs	r0, r0, #5
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000a2c 	.word	0x20000a2c

08001a2c <TSK_MediumFrequencyTaskM1>:
{
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001a30:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001a32:	4669      	mov	r1, sp
 8001a34:	48b6      	ldr	r0, [pc, #728]	; (8001d10 <TSK_MediumFrequencyTaskM1+0x2e4>)
  int16_t wAux = 0;
 8001a36:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001a3a:	f008 f8c9 	bl	8009bd0 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001a3e:	4eb5      	ldr	r6, [pc, #724]	; (8001d14 <TSK_MediumFrequencyTaskM1+0x2e8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001a40:	4cb5      	ldr	r4, [pc, #724]	; (8001d18 <TSK_MediumFrequencyTaskM1+0x2ec>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001a42:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001a44:	6830      	ldr	r0, [r6, #0]
 8001a46:	f006 fcf7 	bl	8008438 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7ff fd40 	bl	80014d0 <MCI_GetCurrentFaults>
 8001a50:	b118      	cbz	r0, 8001a5a <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8001a52:	230a      	movs	r3, #10
 8001a54:	7663      	strb	r3, [r4, #25]
}
 8001a56:	b002      	add	sp, #8
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff fd36 	bl	80014cc <MCI_GetOccurredFaults>
 8001a60:	bb70      	cbnz	r0, 8001ac0 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 8001a62:	7e63      	ldrb	r3, [r4, #25]
 8001a64:	2b13      	cmp	r3, #19
 8001a66:	d8f6      	bhi.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
 8001a68:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <TSK_MediumFrequencyTaskM1+0x44>)
 8001a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6e:	bf00      	nop
 8001a70:	08001c33 	.word	0x08001c33
 8001a74:	08001a57 	.word	0x08001a57
 8001a78:	08001a57 	.word	0x08001a57
 8001a7c:	08001a57 	.word	0x08001a57
 8001a80:	08001ba1 	.word	0x08001ba1
 8001a84:	08001a57 	.word	0x08001a57
 8001a88:	08001b7d 	.word	0x08001b7d
 8001a8c:	08001a57 	.word	0x08001a57
 8001a90:	08001b5d 	.word	0x08001b5d
 8001a94:	08001a57 	.word	0x08001a57
 8001a98:	08001ac1 	.word	0x08001ac1
 8001a9c:	08001c63 	.word	0x08001c63
 8001aa0:	08001a57 	.word	0x08001a57
 8001aa4:	08001a57 	.word	0x08001a57
 8001aa8:	08001a57 	.word	0x08001a57
 8001aac:	08001a57 	.word	0x08001a57
 8001ab0:	08001b1b 	.word	0x08001b1b
 8001ab4:	08001ae9 	.word	0x08001ae9
 8001ab8:	08001a57 	.word	0x08001a57
 8001abc:	08001ac9 	.word	0x08001ac9
      Mci[M1].State = FAULT_OVER;
 8001ac0:	230b      	movs	r3, #11
 8001ac2:	7663      	strb	r3, [r4, #25]
}
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001ac8:	7e23      	ldrb	r3, [r4, #24]
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	f000 80d0 	beq.w	8001c70 <TSK_MediumFrequencyTaskM1+0x244>
            if(! RUC_Exec(&RevUpControlM1))
 8001ad0:	4892      	ldr	r0, [pc, #584]	; (8001d1c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001ad2:	f007 fe2b 	bl	800972c <RUC_Exec>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	f040 80e4 	bne.w	8001ca6 <TSK_MediumFrequencyTaskM1+0x27a>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001ade:	488e      	ldr	r0, [pc, #568]	; (8001d18 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001ae0:	2110      	movs	r1, #16
 8001ae2:	f7ff fca9 	bl	8001438 <MCI_FaultProcessing>
 8001ae6:	e7b6      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8001ae8:	7e23      	ldrb	r3, [r4, #24]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	f000 80c0 	beq.w	8001c70 <TSK_MediumFrequencyTaskM1+0x244>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001af0:	4d8b      	ldr	r5, [pc, #556]	; (8001d20 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	6828      	ldr	r0, [r5, #0]
 8001af6:	f000 fcc5 	bl	8002484 <PWMC_CurrentReadingCalibr>
 8001afa:	2800      	cmp	r0, #0
 8001afc:	d0ab      	beq.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001afe:	7e23      	ldrb	r3, [r4, #24]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	f000 80fb 	beq.w	8001cfc <TSK_MediumFrequencyTaskM1+0x2d0>
                  R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001b06:	6828      	ldr	r0, [r5, #0]
 8001b08:	2100      	movs	r1, #0
 8001b0a:	f006 fea1 	bl	8008850 <R3_2_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8001b0e:	2014      	movs	r0, #20
 8001b10:	f7ff ff6c 	bl	80019ec <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8001b14:	2310      	movs	r3, #16
 8001b16:	7663      	strb	r3, [r4, #25]
 8001b18:	e79d      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b1a:	7e23      	ldrb	r3, [r4, #24]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	f000 80a7 	beq.w	8001c70 <TSK_MediumFrequencyTaskM1+0x244>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001b22:	f7ff ff69 	bl	80019f8 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d095      	beq.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001b2a:	4d7d      	ldr	r5, [pc, #500]	; (8001d20 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001b2c:	6828      	ldr	r0, [r5, #0]
 8001b2e:	f006 ff05 	bl	800893c <R3_2_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b32:	4a7c      	ldr	r2, [pc, #496]	; (8001d24 <TSK_MediumFrequencyTaskM1+0x2f8>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001b34:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <TSK_MediumFrequencyTaskM1+0x2fc>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b36:	6810      	ldr	r0, [r2, #0]
 8001b38:	497c      	ldr	r1, [pc, #496]	; (8001d2c <TSK_MediumFrequencyTaskM1+0x300>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b40:	f007 feb0 	bl	80098a4 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001b44:	4872      	ldr	r0, [pc, #456]	; (8001d10 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001b46:	f008 f91d 	bl	8009d84 <STO_PLL_Clear>
              FOC_Clear( M1 );
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fe64 	bl	8001818 <FOC_Clear>
                Mci[M1].State = START;
 8001b50:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001b52:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8001b54:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001b56:	f000 fc93 	bl	8002480 <PWMC_SwitchOnPWM>
 8001b5a:	e77c      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001b5c:	f7ff ff5c 	bl	8001a18 <TSK_StopPermanencyTimeHasElapsedM1>
 8001b60:	2800      	cmp	r0, #0
 8001b62:	f43f af78 	beq.w	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 8001b66:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001b68:	4970      	ldr	r1, [pc, #448]	; (8001d2c <TSK_MediumFrequencyTaskM1+0x300>)
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	f007 fe9a 	bl	80098a4 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001b70:	486e      	ldr	r0, [pc, #440]	; (8001d2c <TSK_MediumFrequencyTaskM1+0x300>)
 8001b72:	f008 fa1f 	bl	8009fb4 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001b76:	2300      	movs	r3, #0
 8001b78:	8323      	strh	r3, [r4, #24]
 8001b7a:	e76c      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b7c:	7e23      	ldrb	r3, [r4, #24]
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d076      	beq.n	8001c70 <TSK_MediumFrequencyTaskM1+0x244>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001b82:	4865      	ldr	r0, [pc, #404]	; (8001d18 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001b84:	f7ff fc64 	bl	8001450 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff ff19 	bl	80019c0 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001b8e:	2d00      	cmp	r5, #0
 8001b90:	f47f af61 	bne.w	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001b94:	4860      	ldr	r0, [pc, #384]	; (8001d18 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001b96:	462a      	mov	r2, r5
 8001b98:	2120      	movs	r1, #32
 8001b9a:	f7ff fc4d 	bl	8001438 <MCI_FaultProcessing>
 8001b9e:	e75a      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001ba0:	7e23      	ldrb	r3, [r4, #24]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d064      	beq.n	8001c70 <TSK_MediumFrequencyTaskM1+0x244>
            if(! RUC_Exec(&RevUpControlM1))
 8001ba6:	485d      	ldr	r0, [pc, #372]	; (8001d1c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001ba8:	f007 fdc0 	bl	800972c <RUC_Exec>
 8001bac:	4602      	mov	r2, r0
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d16f      	bne.n	8001c92 <TSK_MediumFrequencyTaskM1+0x266>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001bb2:	4859      	ldr	r0, [pc, #356]	; (8001d18 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001bb4:	2110      	movs	r1, #16
 8001bb6:	f7ff fc3f 	bl	8001438 <MCI_FaultProcessing>
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001bba:	485c      	ldr	r0, [pc, #368]	; (8001d2c <TSK_MediumFrequencyTaskM1+0x300>)
 8001bbc:	f10d 0102 	add.w	r1, sp, #2
 8001bc0:	f008 fa5c 	bl	800a07c <VSS_CalcAvrgMecSpeedUnit>
           if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001bc4:	4855      	ldr	r0, [pc, #340]	; (8001d1c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001bc6:	f007 fde7 	bl	8009798 <RUC_FirstAccelerationStageReached>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	f43f af43 	beq.w	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001bd0:	f10d 0102 	add.w	r1, sp, #2
 8001bd4:	484e      	ldr	r0, [pc, #312]	; (8001d10 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001bd6:	f008 f935 	bl	8009e44 <STO_PLL_IsObserverConverged>
 8001bda:	4605      	mov	r5, r0
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001bdc:	484e      	ldr	r0, [pc, #312]	; (8001d18 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001bde:	f7ff fccb 	bl	8001578 <MCI_GetImposedMotorDirection>
 8001be2:	b241      	sxtb	r1, r0
 8001be4:	484a      	ldr	r0, [pc, #296]	; (8001d10 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001be6:	f008 f9e1 	bl	8009fac <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001bea:	4850      	ldr	r0, [pc, #320]	; (8001d2c <TSK_MediumFrequencyTaskM1+0x300>)
 8001bec:	4629      	mov	r1, r5
 8001bee:	f008 fae7 	bl	800a1c0 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001bf2:	2d00      	cmp	r5, #0
 8001bf4:	f43f af2f 	beq.w	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001bf8:	4845      	ldr	r0, [pc, #276]	; (8001d10 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001bfa:	4e4b      	ldr	r6, [pc, #300]	; (8001d28 <TSK_MediumFrequencyTaskM1+0x2fc>)
              REMNG_Init(pREMNG[M1]);
 8001bfc:	4d4c      	ldr	r5, [pc, #304]	; (8001d30 <TSK_MediumFrequencyTaskM1+0x304>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001bfe:	f007 fdf7 	bl	80097f0 <SPD_GetElAngle>
 8001c02:	4601      	mov	r1, r0
 8001c04:	6870      	ldr	r0, [r6, #4]
 8001c06:	f7ff fd95 	bl	8001734 <MCM_Park>
 8001c0a:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8001c0c:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001c0e:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001c10:	f007 fc80 	bl	8009514 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001c14:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8001c18:	6828      	ldr	r0, [r5, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f007 fcc0 	bl	80095a0 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001c20:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001c24:	6828      	ldr	r0, [r5, #0]
 8001c26:	2219      	movs	r2, #25
 8001c28:	f007 fcba 	bl	80095a0 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001c2c:	2313      	movs	r3, #19
 8001c2e:	7663      	strb	r3, [r4, #25]
 8001c30:	e711      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001c32:	7e25      	ldrb	r5, [r4, #24]
 8001c34:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8001c38:	2d01      	cmp	r5, #1
 8001c3a:	f47f af0c 	bne.w	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001c3e:	4836      	ldr	r0, [pc, #216]	; (8001d18 <TSK_MediumFrequencyTaskM1+0x2ec>)
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001c40:	4e37      	ldr	r6, [pc, #220]	; (8001d20 <TSK_MediumFrequencyTaskM1+0x2f4>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001c42:	f7ff fc99 	bl	8001578 <MCI_GetImposedMotorDirection>
 8001c46:	4601      	mov	r1, r0
 8001c48:	4834      	ldr	r0, [pc, #208]	; (8001d1c <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001c4a:	f007 fd2b 	bl	80096a4 <RUC_Clear>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001c4e:	6830      	ldr	r0, [r6, #0]
 8001c50:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
 8001c54:	2900      	cmp	r1, #0
 8001c56:	d147      	bne.n	8001ce8 <TSK_MediumFrequencyTaskM1+0x2bc>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001c58:	f000 fc14 	bl	8002484 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8001c5c:	2311      	movs	r3, #17
 8001c5e:	7663      	strb	r3, [r4, #25]
 8001c60:	e6f9      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001c62:	7e23      	ldrb	r3, [r4, #24]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f47f aef6 	bne.w	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	8323      	strh	r3, [r4, #24]
 8001c6e:	e6f2      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	f006 fe62 	bl	800893c <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff fdcd 	bl	8001818 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001c7e:	6830      	ldr	r0, [r6, #0]
 8001c80:	f006 fbf4 	bl	800846c <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001c84:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001c88:	f7ff fec0 	bl	8001a0c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	7663      	strb	r3, [r4, #25]
  return;
 8001c90:	e6e1      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f007 fe65 	bl	8009964 <STC_CalcTorqueReference>
             IqdRef.d = FOCVars[M1].UserIdref;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001c9c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
             FOCVars[M1].Iqdref = IqdRef;
 8001ca0:	8218      	strh	r0, [r3, #16]
 8001ca2:	825a      	strh	r2, [r3, #18]
 8001ca4:	e789      	b.n	8001bba <TSK_MediumFrequencyTaskM1+0x18e>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001ca6:	4821      	ldr	r0, [pc, #132]	; (8001d2c <TSK_MediumFrequencyTaskM1+0x300>)
 8001ca8:	a901      	add	r1, sp, #4
 8001caa:	f008 f9e7 	bl	800a07c <VSS_CalcAvrgMecSpeedUnit>
 8001cae:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001cb0:	481e      	ldr	r0, [pc, #120]	; (8001d2c <TSK_MediumFrequencyTaskM1+0x300>)
 8001cb2:	f008 fa93 	bl	800a1dc <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001cb6:	b1f5      	cbz	r5, 8001cf6 <TSK_MediumFrequencyTaskM1+0x2ca>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001cb8:	4d1a      	ldr	r5, [pc, #104]	; (8001d24 <TSK_MediumFrequencyTaskM1+0x2f8>)
                PID_SetIntegralTerm(&PIDSpeedHandle_M1, 1);
 8001cba:	481e      	ldr	r0, [pc, #120]	; (8001d34 <TSK_MediumFrequencyTaskM1+0x308>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	f006 fb45 	bl	800834c <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001cc2:	4913      	ldr	r1, [pc, #76]	; (8001d10 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001cc4:	6828      	ldr	r0, [r5, #0]
 8001cc6:	f007 fded 	bl	80098a4 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff fe76 	bl	80019bc <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7ff fe75 	bl	80019c0 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001cd6:	6828      	ldr	r0, [r5, #0]
 8001cd8:	f007 fe80 	bl	80099dc <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001cdc:	480e      	ldr	r0, [pc, #56]	; (8001d18 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001cde:	f7ff fbb7 	bl	8001450 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	7663      	strb	r3, [r4, #25]
 8001ce6:	e6b6      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001ce8:	4629      	mov	r1, r5
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001cea:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001cee:	f000 fbc9 	bl	8002484 <PWMC_CurrentReadingCalibr>
             R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001cf2:	6830      	ldr	r0, [r6, #0]
 8001cf4:	e708      	b.n	8001b08 <TSK_MediumFrequencyTaskM1+0xdc>
              LoopClosed = LoopClosed || tempBool;
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d1de      	bne.n	8001cb8 <TSK_MediumFrequencyTaskM1+0x28c>
 8001cfa:	e6ac      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
                  FOC_Clear(M1);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff fd8b 	bl	8001818 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 8001d02:	6830      	ldr	r0, [r6, #0]
 8001d04:	f006 fbb2 	bl	800846c <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	8323      	strh	r3, [r4, #24]
 8001d0c:	e6a3      	b.n	8001a56 <TSK_MediumFrequencyTaskM1+0x2a>
 8001d0e:	bf00      	nop
 8001d10:	200002e4 	.word	0x200002e4
 8001d14:	200004a0 	.word	0x200004a0
 8001d18:	200009d0 	.word	0x200009d0
 8001d1c:	20000258 	.word	0x20000258
 8001d20:	20000a34 	.word	0x20000a34
 8001d24:	200004ac 	.word	0x200004ac
 8001d28:	20000a00 	.word	0x20000a00
 8001d2c:	20000468 	.word	0x20000468
 8001d30:	20000a30 	.word	0x20000a30
 8001d34:	20000174 	.word	0x20000174

08001d38 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <MC_Scheduler+0x78>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d000      	beq.n	8001d42 <MC_Scheduler+0xa>
 8001d40:	4770      	bx	lr
{
 8001d42:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001d44:	4c1b      	ldr	r4, [pc, #108]	; (8001db4 <MC_Scheduler+0x7c>)
 8001d46:	8823      	ldrh	r3, [r4, #0]
 8001d48:	b19b      	cbz	r3, 8001d72 <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001d4e:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001d50:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001d52:	8813      	ldrh	r3, [r2, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	b11b      	cbz	r3, 8001d60 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001d58:	8813      	ldrh	r3, [r2, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001d60:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <MC_Scheduler+0x84>)
 8001d62:	8813      	ldrh	r3, [r2, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b11b      	cbz	r3, 8001d70 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001d68:	8813      	ldrh	r3, [r2, #0]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	8013      	strh	r3, [r2, #0]
}
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001d72:	4d13      	ldr	r5, [pc, #76]	; (8001dc0 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001d74:	f7ff fe5a 	bl	8001a2c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001d78:	f7ff fb20 	bl	80013bc <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001d82:	6883      	ldr	r3, [r0, #8]
 8001d84:	4798      	blx	r3
 8001d86:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001d88:	b130      	cbz	r0, 8001d98 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	220a      	movs	r2, #10
 8001d8e:	f851 0b08 	ldr.w	r0, [r1], #8
 8001d92:	6803      	ldr	r3, [r0, #0]
 8001d94:	4798      	blx	r3
 8001d96:	b908      	cbnz	r0, 8001d9c <MC_Scheduler+0x64>
{
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e7d8      	b.n	8001d4e <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	f006 f83f 	bl	8007e20 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001da2:	6828      	ldr	r0, [r5, #0]
 8001da4:	89ea      	ldrh	r2, [r5, #14]
 8001da6:	6846      	ldr	r6, [r0, #4]
 8001da8:	68a9      	ldr	r1, [r5, #8]
 8001daa:	230a      	movs	r3, #10
 8001dac:	47b0      	blx	r6
 8001dae:	e7f3      	b.n	8001d98 <MC_Scheduler+0x60>
 8001db0:	20000a26 	.word	0x20000a26
 8001db4:	20000a2a 	.word	0x20000a2a
 8001db8:	20000a28 	.word	0x20000a28
 8001dbc:	20000a2c 	.word	0x20000a2c
 8001dc0:	200004f0 	.word	0x200004f0

08001dc4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t bMotorNbr = 0;

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if (SWITCH_OVER == Mci[M1].State)
 8001dc8:	4f56      	ldr	r7, [pc, #344]	; (8001f24 <TSK_HighFrequencyTask+0x160>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001dca:	4c57      	ldr	r4, [pc, #348]	; (8001f28 <TSK_HighFrequencyTask+0x164>)
  if (SWITCH_OVER == Mci[M1].State)
 8001dcc:	7e7b      	ldrb	r3, [r7, #25]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001dce:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001dd2:	b089      	sub	sp, #36	; 0x24
  if (SWITCH_OVER == Mci[M1].State)
 8001dd4:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001dd6:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 8001dd8:	f000 8098 	beq.w	8001f0c <TSK_HighFrequencyTask+0x148>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <TSK_HighFrequencyTask+0x168>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001dde:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8001f58 <TSK_HighFrequencyTask+0x194>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f007 fd60 	bl	80098a8 <STC_GetSpeedSensor>
 8001de8:	4681      	mov	r9, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001dea:	f007 fd01 	bl	80097f0 <SPD_GetElAngle>
 8001dee:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001df0:	4648      	mov	r0, r9
 8001df2:	f007 fd05 	bl	8009800 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001df6:	a902      	add	r1, sp, #8
 8001df8:	f8d8 0000 	ldr.w	r0, [r8]
 8001dfc:	f000 fa06 	bl	800220c <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001e00:	f001 fe04 	bl	8003a0c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001e04:	f001 fdb2 	bl	800396c <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001e08:	9802      	ldr	r0, [sp, #8]
 8001e0a:	f7ff fc53 	bl	80016b4 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e0e:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001e10:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e12:	f7ff fc8f 	bl	8001734 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e16:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e1a:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e1c:	b203      	sxth	r3, r0
 8001e1e:	1ac9      	subs	r1, r1, r3
 8001e20:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <TSK_HighFrequencyTask+0x16c>)
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	f006 fac4 	bl	80083b0 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001e28:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8001e2c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001e30:	1ac9      	subs	r1, r1, r3
 8001e32:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <TSK_HighFrequencyTask+0x170>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e34:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	f006 faba 	bl	80083b0 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001e3c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8001e40:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001e44:	9901      	ldr	r1, [sp, #4]
 8001e46:	483c      	ldr	r0, [pc, #240]	; (8001f38 <TSK_HighFrequencyTask+0x174>)
 8001e48:	f005 fcda 	bl	8007800 <Circle_Limitation>
 8001e4c:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001e4e:	4648      	mov	r0, r9
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001e50:	9601      	str	r6, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001e52:	f007 fcd5 	bl	8009800 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001e56:	4629      	mov	r1, r5
 8001e58:	9801      	ldr	r0, [sp, #4]
 8001e5a:	f7ff fcad 	bl	80017b8 <MCM_Rev_Park>
 8001e5e:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e60:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001e64:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e66:	f000 f9d3 	bl	8002210 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001e6a:	9b02      	ldr	r3, [sp, #8]
 8001e6c:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e6e:	4601      	mov	r1, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001e70:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8001e72:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001e74:	6063      	str	r3, [r4, #4]
  if(hFOCreturn == MC_DURATION)
 8001e76:	2901      	cmp	r1, #1
  FOCVars[M1].Iqd = Iqd;
 8001e78:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Vqd = Vqd;
 8001e7a:	f8c4 6016 	str.w	r6, [r4, #22]
  FOCVars[M1].Iqd = Iqd;
 8001e7e:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001e80:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001e84:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001e86:	d036      	beq.n	8001ef6 <TSK_HighFrequencyTask+0x132>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001e88:	482c      	ldr	r0, [pc, #176]	; (8001f3c <TSK_HighFrequencyTask+0x178>)
 8001e8a:	f007 fc85 	bl	8009798 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001e8e:	6862      	ldr	r2, [r4, #4]
 8001e90:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001e92:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001e94:	482a      	ldr	r0, [pc, #168]	; (8001f40 <TSK_HighFrequencyTask+0x17c>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001e96:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001e98:	f005 fcaa 	bl	80077f0 <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001e9c:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001e9e:	4603      	mov	r3, r0
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001ea0:	4828      	ldr	r0, [pc, #160]	; (8001f44 <TSK_HighFrequencyTask+0x180>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001ea2:	f8ad 301c 	strh.w	r3, [sp, #28]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001ea6:	f007 fda1 	bl	80099ec <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001eaa:	4826      	ldr	r0, [pc, #152]	; (8001f44 <TSK_HighFrequencyTask+0x180>)
 8001eac:	f007 ff38 	bl	8009d20 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 8001eb0:	b184      	cbz	r4, 8001ed4 <TSK_HighFrequencyTask+0x110>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8001eb2:	7e7b      	ldrb	r3, [r7, #25]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d013      	beq.n	8001ee0 <TSK_HighFrequencyTask+0x11c>
 8001eb8:	2b13      	cmp	r3, #19
 8001eba:	d011      	beq.n	8001ee0 <TSK_HighFrequencyTask+0x11c>
  GLOBAL_TIMESTAMP++;
 8001ebc:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <TSK_HighFrequencyTask+0x184>)
  if (0U == MCPA_UART_A.Mark)
 8001ebe:	4823      	ldr	r0, [pc, #140]	; (8001f4c <TSK_HighFrequencyTask+0x188>)
  GLOBAL_TIMESTAMP++;
 8001ec0:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001ec2:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001eca:	b9c9      	cbnz	r1, 8001f00 <TSK_HighFrequencyTask+0x13c>
}
 8001ecc:	2000      	movs	r0, #0
 8001ece:	b009      	add	sp, #36	; 0x24
 8001ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001ed4:	481b      	ldr	r0, [pc, #108]	; (8001f44 <TSK_HighFrequencyTask+0x180>)
 8001ed6:	f008 f84d 	bl	8009f74 <STO_ResetPLL>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8001eda:	7e7b      	ldrb	r3, [r7, #25]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d1eb      	bne.n	8001eb8 <TSK_HighFrequencyTask+0xf4>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001ee0:	4818      	ldr	r0, [pc, #96]	; (8001f44 <TSK_HighFrequencyTask+0x180>)
 8001ee2:	f007 fc85 	bl	80097f0 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001ee6:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001ee8:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001eea:	4819      	ldr	r0, [pc, #100]	; (8001f50 <TSK_HighFrequencyTask+0x18c>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001eec:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001ef0:	f008 f872 	bl	8009fd8 <VSS_CalcElAngle>
 8001ef4:	e7e2      	b.n	8001ebc <TSK_HighFrequencyTask+0xf8>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001ef6:	480b      	ldr	r0, [pc, #44]	; (8001f24 <TSK_HighFrequencyTask+0x160>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f7ff fa9d 	bl	8001438 <MCI_FaultProcessing>
 8001efe:	e7dd      	b.n	8001ebc <TSK_HighFrequencyTask+0xf8>
    MCPA_dataLog (&MCPA_UART_A);
 8001f00:	f006 f856 	bl	8007fb0 <MCPA_dataLog>
}
 8001f04:	2000      	movs	r0, #0
 8001f06:	b009      	add	sp, #36	; 0x24
 8001f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001f0c:	4d11      	ldr	r5, [pc, #68]	; (8001f54 <TSK_HighFrequencyTask+0x190>)
 8001f0e:	6828      	ldr	r0, [r5, #0]
 8001f10:	f007 fb2a 	bl	8009568 <REMNG_RampCompleted>
 8001f14:	2800      	cmp	r0, #0
 8001f16:	f47f af61 	bne.w	8001ddc <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8001f1a:	6828      	ldr	r0, [r5, #0]
 8001f1c:	f007 fb02 	bl	8009524 <REMNG_Calc>
 8001f20:	8220      	strh	r0, [r4, #16]
 8001f22:	e75b      	b.n	8001ddc <TSK_HighFrequencyTask+0x18>
 8001f24:	200009d0 	.word	0x200009d0
 8001f28:	20000a00 	.word	0x20000a00
 8001f2c:	200004ac 	.word	0x200004ac
 8001f30:	200004a8 	.word	0x200004a8
 8001f34:	200004a4 	.word	0x200004a4
 8001f38:	2000002c 	.word	0x2000002c
 8001f3c:	20000258 	.word	0x20000258
 8001f40:	20000000 	.word	0x20000000
 8001f44:	200002e4 	.word	0x200002e4
 8001f48:	20001c24 	.word	0x20001c24
 8001f4c:	200004c4 	.word	0x200004c4
 8001f50:	20000468 	.word	0x20000468
 8001f54:	20000a30 	.word	0x20000a30
 8001f58:	20000a34 	.word	0x20000a34

08001f5c <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001f5c:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001f60:	4e20      	ldr	r6, [pc, #128]	; (8001fe4 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001f62:	b082      	sub	sp, #8
 8001f64:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001f66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001f6a:	f006 f9ad 	bl	80082c8 <NTC_CalcAvTemp>
 8001f6e:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001f70:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001f74:	f000 faaa 	bl	80024cc <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001f78:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001f7c:	4328      	orrs	r0, r5
 8001f7e:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 8001f80:	b184      	cbz	r4, 8001fa4 <TSK_SafetyTask_PWMOFF+0x48>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 8001f82:	4819      	ldr	r0, [pc, #100]	; (8001fe8 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001f84:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001f88:	43ea      	mvns	r2, r5
 8001f8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	4629      	mov	r1, r5
 8001f92:	9001      	str	r0, [sp, #4]
 8001f94:	f7ff fa50 	bl	8001438 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001f98:	9801      	ldr	r0, [sp, #4]
 8001f9a:	f7ff fae3 	bl	8001564 <MCI_GetFaultState>
 8001f9e:	b940      	cbnz	r0, 8001fb2 <TSK_SafetyTask_PWMOFF+0x56>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001fa0:	b002      	add	sp, #8
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8001fa4:	4811      	ldr	r0, [pc, #68]	; (8001fec <TSK_SafetyTask_PWMOFF+0x90>)
 8001fa6:	f007 fa81 	bl	80094ac <RVBS_CalcAvVbus>
 8001faa:	f000 000e 	and.w	r0, r0, #14
 8001fae:	4305      	orrs	r5, r0
 8001fb0:	e7e7      	b.n	8001f82 <TSK_SafetyTask_PWMOFF+0x26>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001fb2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001fb6:	f000 fa61 	bl	800247c <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8001fba:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <TSK_SafetyTask_PWMOFF+0x94>)
 8001fbc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001fc0:	b953      	cbnz	r3, 8001fd8 <TSK_SafetyTask_PWMOFF+0x7c>
    FOC_Clear(bMotor);
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff fc28 	bl	8001818 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <TSK_SafetyTask_PWMOFF+0x98>)
 8001fca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001fce:	b002      	add	sp, #8
 8001fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001fd4:	f006 ba4a 	b.w	800846c <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001fd8:	f006 f8ae 	bl	8008138 <MCPA_flushDataLog>
 8001fdc:	e7f1      	b.n	8001fc2 <TSK_SafetyTask_PWMOFF+0x66>
 8001fde:	bf00      	nop
 8001fe0:	200004b0 	.word	0x200004b0
 8001fe4:	20000a34 	.word	0x20000a34
 8001fe8:	200009d0 	.word	0x200009d0
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	200004c4 	.word	0x200004c4
 8001ff4:	200004a0 	.word	0x200004a0

08001ff8 <TSK_SafetyTask>:
{
 8001ff8:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <TSK_SafetyTask+0x1c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d000      	beq.n	8002004 <TSK_SafetyTask+0xc>
}
 8002002:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002004:	2000      	movs	r0, #0
 8002006:	f7ff ffa9 	bl	8001f5c <TSK_SafetyTask_PWMOFF>
}
 800200a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 800200e:	f001 bc7d 	b.w	800390c <RCM_ExecUserConv>
 8002012:	bf00      	nop
 8002014:	20000a26 	.word	0x20000a26

08002018 <MC_RunMotorControlTasks>:
{
 8002018:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <MC_RunMotorControlTasks+0x14>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b903      	cbnz	r3, 8002022 <MC_RunMotorControlTasks+0xa>
}
 8002020:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002022:	f7ff fe89 	bl	8001d38 <MC_Scheduler>
    TSK_SafetyTask();
 8002026:	f7ff ffe7 	bl	8001ff8 <TSK_SafetyTask>
}
 800202a:	bd08      	pop	{r3, pc}
 800202c:	20000a26 	.word	0x20000a26

08002030 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002030:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <TSK_HardwareFaultTask+0x18>)
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	f006 fc81 	bl	800893c <R3_2_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800203a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800203e:	4803      	ldr	r0, [pc, #12]	; (800204c <TSK_HardwareFaultTask+0x1c>)
 8002040:	2200      	movs	r2, #0
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	f7ff b9f8 	b.w	8001438 <MCI_FaultProcessing>
 8002048:	20000a34 	.word	0x20000a34
 800204c:	200009d0 	.word	0x200009d0

08002050 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002050:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002052:	f7ff f9a5 	bl	80013a0 <MC_GetSTMStateMotor1>
 8002056:	b918      	cbnz	r0, 8002060 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 800205c:	f7ff b988 	b.w	8001370 <MC_StartMotor1>
}
 8002060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002064:	f7ff b98a 	b.w	800137c <MC_StopMotor1>

08002068 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002068:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800206a:	4a50      	ldr	r2, [pc, #320]	; (80021ac <mc_lock_pins+0x144>)
 800206c:	4950      	ldr	r1, [pc, #320]	; (80021b0 <mc_lock_pins+0x148>)
 800206e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002070:	2504      	movs	r5, #4
 8002072:	b092      	sub	sp, #72	; 0x48
 8002074:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002076:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002078:	69d3      	ldr	r3, [r2, #28]
 800207a:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800207c:	484d      	ldr	r0, [pc, #308]	; (80021b4 <mc_lock_pins+0x14c>)
  (void) temp;
 800207e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002080:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002082:	2602      	movs	r6, #2
 8002084:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002086:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002088:	69d3      	ldr	r3, [r2, #28]
 800208a:	9310      	str	r3, [sp, #64]	; 0x40
  (void) temp;
 800208c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 800208e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002092:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
 8002096:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002098:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800209a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800209c:	69d4      	ldr	r4, [r2, #28]
 800209e:	940f      	str	r4, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  (void) temp;
 80020a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020a6:	2701      	movs	r7, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020a8:	f04f 1401 	mov.w	r4, #65537	; 0x10001
 80020ac:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020ae:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020b0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020b2:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80020b6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  (void) temp;
 80020ba:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020be:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020c0:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020c2:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020c4:	69d4      	ldr	r4, [r2, #28]
 80020c6:	940d      	str	r4, [sp, #52]	; 0x34
  (void) temp;
 80020c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ca:	4c3b      	ldr	r4, [pc, #236]	; (80021b8 <mc_lock_pins+0x150>)
 80020cc:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020ce:	2780      	movs	r7, #128	; 0x80
 80020d0:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020d2:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020d4:	69dc      	ldr	r4, [r3, #28]
 80020d6:	940c      	str	r4, [sp, #48]	; 0x30
  (void) temp;
 80020d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020da:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020dc:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020de:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020e0:	69d8      	ldr	r0, [r3, #28]
 80020e2:	900b      	str	r0, [sp, #44]	; 0x2c
  (void) temp;
 80020e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020e6:	4835      	ldr	r0, [pc, #212]	; (80021bc <mc_lock_pins+0x154>)
 80020e8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020ea:	2408      	movs	r4, #8
 80020ec:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ee:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020f0:	69d8      	ldr	r0, [r3, #28]
 80020f2:	900a      	str	r0, [sp, #40]	; 0x28
  (void) temp;
 80020f4:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020f6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020f8:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020fa:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020fc:	69d9      	ldr	r1, [r3, #28]
 80020fe:	9109      	str	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002100:	2040      	movs	r0, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002102:	492f      	ldr	r1, [pc, #188]	; (80021c0 <mc_lock_pins+0x158>)
  (void) temp;
 8002104:	9c09      	ldr	r4, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002106:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002108:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800210a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800210c:	69d9      	ldr	r1, [r3, #28]
 800210e:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002110:	2020      	movs	r0, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002112:	492c      	ldr	r1, [pc, #176]	; (80021c4 <mc_lock_pins+0x15c>)
  (void) temp;
 8002114:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002116:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002118:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800211a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800211c:	69dc      	ldr	r4, [r3, #28]
 800211e:	9407      	str	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002120:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002124:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  (void) temp;
 8002128:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800212a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800212c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800212e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002130:	69dc      	ldr	r4, [r3, #28]
 8002132:	9406      	str	r4, [sp, #24]
  (void) temp;
 8002134:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002136:	4c24      	ldr	r4, [pc, #144]	; (80021c8 <mc_lock_pins+0x160>)
 8002138:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800213a:	f44f 7580 	mov.w	r5, #256	; 0x100
 800213e:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002140:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002142:	69dc      	ldr	r4, [r3, #28]
 8002144:	9405      	str	r4, [sp, #20]
  (void) temp;
 8002146:	9d05      	ldr	r5, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002148:	f44f 3481 	mov.w	r4, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 800214c:	f44f 7500 	mov.w	r5, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002150:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002152:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002154:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002156:	69dc      	ldr	r4, [r3, #28]
 8002158:	9404      	str	r4, [sp, #16]
  (void) temp;
 800215a:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800215c:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002160:	f44f 6580 	mov.w	r5, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002164:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002166:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002168:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800216a:	69dc      	ldr	r4, [r3, #28]
 800216c:	9403      	str	r4, [sp, #12]
  (void) temp;
 800216e:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002170:	f44f 3488 	mov.w	r4, #69632	; 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002174:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002178:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800217a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800217c:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	9302      	str	r3, [sp, #8]
  (void) temp;
 8002182:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002184:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002186:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002188:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800218a:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <mc_lock_pins+0x164>)
  temp = READ_REG(GPIOx->LCKR);
 800218e:	9201      	str	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002194:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 8002198:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800219a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800219c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800219e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	9300      	str	r3, [sp, #0]
  (void) temp;
 80021a4:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 80021a6:	b012      	add	sp, #72	; 0x48
 80021a8:	bcf0      	pop	{r4, r5, r6, r7}
 80021aa:	4770      	bx	lr
 80021ac:	48000400 	.word	0x48000400
 80021b0:	00010004 	.word	0x00010004
 80021b4:	00010002 	.word	0x00010002
 80021b8:	00010080 	.word	0x00010080
 80021bc:	00010008 	.word	0x00010008
 80021c0:	00010040 	.word	0x00010040
 80021c4:	00010020 	.word	0x00010020
 80021c8:	00010100 	.word	0x00010100
 80021cc:	48000800 	.word	0x48000800

080021d0 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80021d0:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80021d2:	f004 f84b 	bl	800626c <HAL_RCC_GetHCLKFreq>
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <MX_MotorControl_Init+0x30>)
 80021d8:	fba3 3000 	umull	r3, r0, r3, r0
 80021dc:	09c0      	lsrs	r0, r0, #7
 80021de:	f003 f911 	bl	8005404 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <MX_MotorControl_Init+0x34>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	6819      	ldr	r1, [r3, #0]
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f003 f8be 	bl	800536c <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_MotorControl_Init+0x38>)
 80021f2:	f7ff fb4b 	bl	800188c <MCboot>
  mc_lock_pins();
}
 80021f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80021fa:	f7ff bf35 	b.w	8002068 <mc_lock_pins>
 80021fe:	bf00      	nop
 8002200:	10624dd3 	.word	0x10624dd3
 8002204:	20000594 	.word	0x20000594
 8002208:	20001bc4 	.word	0x20001bc4

0800220c <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 800220c:	6803      	ldr	r3, [r0, #0]
 800220e:	4718      	bx	r3

08002210 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002210:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002212:	f8b0 e060 	ldrh.w	lr, [r0, #96]	; 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002216:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002218:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800221c:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800221e:	fb0e fc0c 	mul.w	ip, lr, ip
 8002222:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002226:	fb02 f303 	mul.w	r3, r2, r3
{
 800222a:	b083      	sub	sp, #12

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800222c:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002230:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
{
 8002234:	9101      	str	r1, [sp, #4]
    wZ = (wUBeta - wUAlpha) / 2;
 8002236:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
    wY = (wUBeta + wUAlpha) / 2;
 800223a:	eb02 71d2 	add.w	r1, r2, r2, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 800223e:	1c55      	adds	r5, r2, #1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002240:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002244:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002248:	ea4f 0464 	mov.w	r4, r4, asr #1
    if (wY < 0)
 800224c:	f2c0 8088 	blt.w	8002360 <PWMC_SetPhaseVoltage+0x150>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002250:	1c5d      	adds	r5, r3, #1
 8002252:	db5d      	blt.n	8002310 <PWMC_SetPhaseVoltage+0x100>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002254:	1b09      	subs	r1, r1, r4
 8002256:	bf44      	itt	mi
 8002258:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 800225c:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002260:	2b00      	cmp	r3, #0
 8002262:	bfbc      	itt	lt
 8002264:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8002268:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 800226c:	2a00      	cmp	r2, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800226e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhC = wTimePhA - (wY / 131072);
 8002272:	bfb8      	it	lt
 8002274:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002278:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 800227c:	bfb8      	it	lt
 800227e:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002282:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002286:	eba1 42a2 	sub.w	r2, r1, r2, asr #18

        pHandle->lowDuty = (uint16_t)wTimePhB;
 800228a:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 800228e:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002292:	b294      	uxth	r4, r2
 8002294:	2501      	movs	r5, #1
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002296:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 800229a:	f8b0 405e 	ldrh.w	r4, [r0, #94]	; 0x5e
          pHandle->Sector = SECTOR_4;
 800229e:	f880 506a 	strb.w	r5, [r0, #106]	; 0x6a
 80022a2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80022a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80022aa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80022ae:	b289      	uxth	r1, r1
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 80022b4:	2c01      	cmp	r4, #1
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80022b6:	f8a0 e046 	strh.w	lr, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 80022ba:	f8a0 c048 	strh.w	ip, [r0, #72]	; 0x48
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80022be:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80022c0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80022c4:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
    if (1U == pHandle->DTTest)
 80022c8:	d11d      	bne.n	8002306 <PWMC_SetPhaseVoltage+0xf6>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 80022ca:	f9b0 4050 	ldrsh.w	r4, [r0, #80]	; 0x50
 80022ce:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 80022d0:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 80022d4:	bfcc      	ite	gt
 80022d6:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 80022d8:	1b09      	suble	r1, r1, r4
 80022da:	b289      	uxth	r1, r1
 80022dc:	87c1      	strh	r1, [r0, #62]	; 0x3e
      }

      if (pHandle->Ib > 0)
 80022de:	f9b0 1052 	ldrsh.w	r1, [r0, #82]	; 0x52
 80022e2:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 80022e4:	f9b0 1054 	ldrsh.w	r1, [r0, #84]	; 0x54
        pHandle->CntPhB += pHandle->DTCompCnt;
 80022e8:	bfcc      	ite	gt
 80022ea:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80022ec:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 80022ee:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80022f0:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 80022f2:	bfcc      	ite	gt
 80022f4:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80022f6:	1b12      	suble	r2, r2, r4
 80022f8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->CntPhC += pHandle->DTCompCnt;
 80022fc:	bfcc      	ite	gt
 80022fe:	f8a0 4042 	strhgt.w	r4, [r0, #66]	; 0x42
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002302:	f8a0 2042 	strhle.w	r2, [r0, #66]	; 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002306:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002308:	b003      	add	sp, #12
 800230a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800230e:	4718      	bx	r3
        if ( wX <= 0 )
 8002310:	f1bc 0f00 	cmp.w	ip, #0
 8002314:	dd46      	ble.n	80023a4 <PWMC_SetPhaseVoltage+0x194>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002316:	ebbc 0404 	subs.w	r4, ip, r4
 800231a:	bf44      	itt	mi
 800231c:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8002320:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002324:	2b00      	cmp	r3, #0
 8002326:	bfb8      	it	lt
 8002328:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800232c:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhB = wTimePhA + (wZ / 131072);
 8002330:	bfb8      	it	lt
 8002332:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8002336:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800233a:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800233e:	bfb8      	it	lt
 8002340:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002344:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002348:	bfb8      	it	lt
 800234a:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 800234e:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002352:	fa1f fe81 	uxth.w	lr, r1
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002356:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhC;
 800235a:	b294      	uxth	r4, r2
 800235c:	2500      	movs	r5, #0
 800235e:	e79a      	b.n	8002296 <PWMC_SetPhaseVoltage+0x86>
      if (wZ < 0)
 8002360:	1c5d      	adds	r5, r3, #1
 8002362:	db69      	blt.n	8002438 <PWMC_SetPhaseVoltage+0x228>
        if (wX <= 0)
 8002364:	f1bc 0f00 	cmp.w	ip, #0
 8002368:	dd41      	ble.n	80023ee <PWMC_SetPhaseVoltage+0x1de>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800236a:	ebb1 010c 	subs.w	r1, r1, ip
 800236e:	bf44      	itt	mi
 8002370:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8002374:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002378:	2a00      	cmp	r2, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800237a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhC = wTimePhA - (wY / 131072);
 800237e:	bfb8      	it	lt
 8002380:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002384:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002388:	bfb8      	it	lt
 800238a:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
 800238e:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002392:	eb02 436c 	add.w	r3, r2, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002396:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 800239a:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 800239e:	b28c      	uxth	r4, r1
 80023a0:	2502      	movs	r5, #2
 80023a2:	e778      	b.n	8002296 <PWMC_SetPhaseVoltage+0x86>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80023a4:	ebb1 010c 	subs.w	r1, r1, ip
 80023a8:	bf44      	itt	mi
 80023aa:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 80023ae:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	bfb8      	it	lt
 80023b6:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80023ba:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhC = wTimePhA - (wY / 131072);
 80023be:	bfb8      	it	lt
 80023c0:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
          wTimePhB = wTimePhC + (wX / 131072);
 80023c4:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80023c8:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80023cc:	bfb8      	it	lt
 80023ce:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 80023d2:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80023d6:	bfb8      	it	lt
 80023d8:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80023dc:	eb02 4363 	add.w	r3, r2, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 80023e0:	fa1f fe81 	uxth.w	lr, r1
          pHandle->midDuty = (uint16_t)wTimePhC;
 80023e4:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhB;
 80023e8:	b29c      	uxth	r4, r3
 80023ea:	2505      	movs	r5, #5
 80023ec:	e753      	b.n	8002296 <PWMC_SetPhaseVoltage+0x86>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80023ee:	ebbc 0404 	subs.w	r4, ip, r4
 80023f2:	bf44      	itt	mi
 80023f4:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 80023f8:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bfb8      	it	lt
 8002400:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002404:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
          wTimePhB = wTimePhA + (wZ / 131072);
 8002408:	bfb8      	it	lt
 800240a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 800240e:	f1bc 0200 	subs.w	r2, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002412:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002416:	bfb8      	it	lt
 8002418:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 800241c:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002420:	bfb8      	it	lt
 8002422:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 8002426:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800242a:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 800242e:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002432:	b28c      	uxth	r4, r1
 8002434:	2503      	movs	r5, #3
 8002436:	e72e      	b.n	8002296 <PWMC_SetPhaseVoltage+0x86>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002438:	1b09      	subs	r1, r1, r4
 800243a:	bf44      	itt	mi
 800243c:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8002440:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002444:	2b00      	cmp	r3, #0
 8002446:	bfbc      	itt	lt
 8002448:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 800244c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002450:	2a00      	cmp	r2, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002452:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002456:	bfb8      	it	lt
 8002458:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800245c:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002460:	bfb8      	it	lt
 8002462:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002466:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 800246a:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        pHandle->lowDuty = (uint16_t)wTimePhC;
 800246e:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002472:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhB;
 8002476:	b29c      	uxth	r4, r3
 8002478:	2504      	movs	r5, #4
 800247a:	e70c      	b.n	8002296 <PWMC_SetPhaseVoltage+0x86>

0800247c <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 800247c:	6843      	ldr	r3, [r0, #4]
 800247e:	4718      	bx	r3

08002480 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002480:	6883      	ldr	r3, [r0, #8]
 8002482:	4718      	bx	r3

08002484 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002484:	b510      	push	{r4, lr}
 8002486:	4604      	mov	r4, r0
 8002488:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 800248a:	b199      	cbz	r1, 80024b4 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 800248c:	2901      	cmp	r1, #1
 800248e:	d002      	beq.n	8002496 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002490:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002492:	b002      	add	sp, #8
 8002494:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002496:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 800249a:	b19b      	cbz	r3, 80024c4 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 800249c:	3b01      	subs	r3, #1
 800249e:	b29b      	uxth	r3, r3
 80024a0:	9101      	str	r1, [sp, #4]
 80024a2:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f2      	bne.n	8002490 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 80024aa:	68c3      	ldr	r3, [r0, #12]
 80024ac:	4798      	blx	r3
          retVal = true;
 80024ae:	9901      	ldr	r1, [sp, #4]
 80024b0:	4608      	mov	r0, r1
 80024b2:	e7ee      	b.n	8002492 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 80024b4:	f7ff ffe2 	bl	800247c <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 80024b8:	4620      	mov	r0, r4
 80024ba:	68e3      	ldr	r3, [r4, #12]
 80024bc:	4798      	blx	r3
      retVal = true;
 80024be:	2001      	movs	r0, #1
}
 80024c0:	b002      	add	sp, #8
 80024c2:	bd10      	pop	{r4, pc}
        retVal = true;
 80024c4:	4608      	mov	r0, r1
}
 80024c6:	b002      	add	sp, #8
 80024c8:	bd10      	pop	{r4, pc}
 80024ca:	bf00      	nop

080024cc <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 80024cc:	6983      	ldr	r3, [r0, #24]
 80024ce:	4718      	bx	r3

080024d0 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80024d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
 80024d4:	e9d0 5701 	ldrd	r5, r7, [r0, #4]
{
 80024d8:	b089      	sub	sp, #36	; 0x24
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 80024da:	2400      	movs	r4, #0
    int16_t rxLength = pHandle->rxLength;
 80024dc:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    pHandle->txLength = 0;
 80024e0:	81c4      	strh	r4, [r0, #14]
{
 80024e2:	4680      	mov	r8, r0
    uint8_t accessResult;
    while (rxLength > 0)
 80024e4:	eb07 0b01 	add.w	fp, r7, r1
  uint8_t retVal = MCP_CMD_OK;
 80024e8:	9401      	str	r4, [sp, #4]
    while (rxLength > 0)
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	f340 8368 	ble.w	8002bc0 <RI_SetRegCommandParser+0x6f0>
    {
       number_of_item++;
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 80024f0:	462e      	mov	r6, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80024f2:	fa1f fa82 	uxth.w	sl, r2
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 80024f6:	f836 0b02 	ldrh.w	r0, [r6], #2

    typeID = (uint8_t)dataID & TYPE_MASK;
    motorID = 0U;
    MCI_Handle_t *pMCIN = &Mci[motorID];

    switch (typeID)
 80024fa:	f000 0138 	and.w	r1, r0, #56	; 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80024fe:	f1aa 0202 	sub.w	r2, sl, #2
       number_of_item++;
 8002502:	3401      	adds	r4, #1
    uint16_t regID = dataID & REG_MASK;
 8002504:	f020 0307 	bic.w	r3, r0, #7
    switch (typeID)
 8002508:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800250a:	fa1f f982 	uxth.w	r9, r2
       number_of_item++;
 800250e:	b2e4      	uxtb	r4, r4
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002510:	b212      	sxth	r2, r2
    uint16_t regID = dataID & REG_MASK;
 8002512:	b29b      	uxth	r3, r3
    switch (typeID)
 8002514:	2920      	cmp	r1, #32
 8002516:	d812      	bhi.n	800253e <RI_SetRegCommandParser+0x6e>
 8002518:	e8df f001 	tbb	[pc, r1]
 800251c:	111111a8 	.word	0x111111a8
 8002520:	11111111 	.word	0x11111111
 8002524:	1111117f 	.word	0x1111117f
 8002528:	11111111 	.word	0x11111111
 800252c:	111111b6 	.word	0x111111b6
 8002530:	11111111 	.word	0x11111111
 8002534:	1111112b 	.word	0x1111112b
 8002538:	11111111 	.word	0x11111111
 800253c:	58          	.byte	0x58
 800253d:	00          	.byte	0x00
 800253e:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 8002540:	2c01      	cmp	r4, #1
 8002542:	d03a      	beq.n	80025ba <RI_SetRegCommandParser+0xea>
        if (txSyncFreeSpace !=0 )
 8002544:	45bb      	cmp	fp, r7
 8002546:	f000 80ad 	beq.w	80026a4 <RI_SetRegCommandParser+0x1d4>
          *txData = accessResult;
 800254a:	f807 0b01 	strb.w	r0, [r7], #1
          pHandle->txLength++;
 800254e:	f8b8 300e 	ldrh.w	r3, [r8, #14]
 8002552:	3301      	adds	r3, #1
 8002554:	f8a8 300e 	strh.w	r3, [r8, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002558:	b148      	cbz	r0, 800256e <RI_SetRegCommandParser+0x9e>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800255a:	2807      	cmp	r0, #7
 800255c:	d103      	bne.n	8002566 <RI_SetRegCommandParser+0x96>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800255e:	2001      	movs	r0, #1
}
 8002560:	b009      	add	sp, #36	; 0x24
 8002562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002566:	280a      	cmp	r0, #10
 8002568:	d0f9      	beq.n	800255e <RI_SetRegCommandParser+0x8e>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800256a:	2301      	movs	r3, #1
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	4635      	mov	r5, r6
 8002570:	e7bb      	b.n	80024ea <RI_SetRegCommandParser+0x1a>

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002572:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 82b5 	beq.w	8002ae6 <RI_SetRegCommandParser+0x616>
 800257c:	2a01      	cmp	r2, #1
 800257e:	f340 82b6 	ble.w	8002aee <RI_SetRegCommandParser+0x61e>
 8002582:	1ce9      	adds	r1, r5, #3
 8002584:	ea6f 0c05 	mvn.w	ip, r5
 8002588:	e002      	b.n	8002590 <RI_SetRegCommandParser+0xc0>
 800258a:	4293      	cmp	r3, r2
 800258c:	f280 821a 	bge.w	80029c4 <RI_SetRegCommandParser+0x4f4>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
 8002590:	eb0c 0301 	add.w	r3, ip, r1
 8002594:	4608      	mov	r0, r1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002596:	f911 5b01 	ldrsb.w	r5, [r1], #1
 800259a:	b29b      	uxth	r3, r3
 800259c:	2d00      	cmp	r5, #0
 800259e:	d1f4      	bne.n	800258a <RI_SetRegCommandParser+0xba>
      rxData = rxData+size;
 80025a0:	461a      	mov	r2, r3
      rxLength = (int16_t) (rxLength - size);
 80025a2:	eba9 0903 	sub.w	r9, r9, r3
        if ((1U == number_of_item) && (0 == rxLength))
 80025a6:	2c01      	cmp	r4, #1
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 80025a8:	f04f 0300 	mov.w	r3, #0
      rxData = rxData+size;
 80025ac:	4416      	add	r6, r2
    *tempdestString = (int8_t)0;
 80025ae:	7003      	strb	r3, [r0, #0]
      rxLength = (int16_t) (rxLength - size);
 80025b0:	fa0f f289 	sxth.w	r2, r9
        retVal = MCP_ERROR_RO_REG;
 80025b4:	f04f 0004 	mov.w	r0, #4
        if ((1U == number_of_item) && (0 == rxLength))
 80025b8:	d1c4      	bne.n	8002544 <RI_SetRegCommandParser+0x74>
 80025ba:	2a00      	cmp	r2, #0
 80025bc:	d1c2      	bne.n	8002544 <RI_SetRegCommandParser+0x74>
      if (MCP_CMD_OK == retVal)
 80025be:	2800      	cmp	r0, #0
 80025c0:	d1ce      	bne.n	8002560 <RI_SetRegCommandParser+0x90>
      pHandle->txLength = 0;
 80025c2:	f8a8 000e 	strh.w	r0, [r8, #14]
}
 80025c6:	b009      	add	sp, #36	; 0x24
 80025c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
 80025cc:	f8b5 c002 	ldrh.w	ip, [r5, #2]
        *size = rawSize + 2U;
 80025d0:	f10c 0a02 	add.w	sl, ip, #2
 80025d4:	fa1f fa8a 	uxth.w	sl, sl
        if (*size > dataAvailable )
 80025d8:	4592      	cmp	sl, r2
 80025da:	f300 81f9 	bgt.w	80029d0 <RI_SetRegCommandParser+0x500>
 80025de:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
        rawData++;
 80025e2:	f105 0104 	add.w	r1, r5, #4
          switch (regID)
 80025e6:	f000 822e 	beq.w	8002a46 <RI_SetRegCommandParser+0x576>
 80025ea:	f200 81d3 	bhi.w	8002994 <RI_SetRegCommandParser+0x4c4>
 80025ee:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 80025f2:	f000 820c 	beq.w	8002a0e <RI_SetRegCommandParser+0x53e>
 80025f6:	f240 81c2 	bls.w	800297e <RI_SetRegCommandParser+0x4ae>
 80025fa:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80025fe:	f040 81db 	bne.w	80029b8 <RI_SetRegCommandParser+0x4e8>
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002602:	892a      	ldrh	r2, [r5, #8]
 8002604:	48b3      	ldr	r0, [pc, #716]	; (80028d4 <RI_SetRegCommandParser+0x404>)
 8002606:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 800260a:	f7fe ff01 	bl	8001410 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 800260e:	eba9 020a 	sub.w	r2, r9, sl
      rxData = rxData+size;
 8002612:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002614:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002616:	2000      	movs	r0, #0
              break;
 8002618:	e792      	b.n	8002540 <RI_SetRegCommandParser+0x70>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 800261a:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 800261e:	f8b5 9002 	ldrh.w	r9, [r5, #2]
        switch (regID)
 8002622:	f000 829d 	beq.w	8002b60 <RI_SetRegCommandParser+0x690>
 8002626:	f200 8099 	bhi.w	800275c <RI_SetRegCommandParser+0x28c>
 800262a:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 800262e:	f000 8292 	beq.w	8002b56 <RI_SetRegCommandParser+0x686>
 8002632:	d979      	bls.n	8002728 <RI_SetRegCommandParser+0x258>
 8002634:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8002638:	f000 8282 	beq.w	8002b40 <RI_SetRegCommandParser+0x670>
 800263c:	d95a      	bls.n	80026f4 <RI_SetRegCommandParser+0x224>
 800263e:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002642:	d051      	beq.n	80026e8 <RI_SetRegCommandParser+0x218>
 8002644:	d944      	bls.n	80026d0 <RI_SetRegCommandParser+0x200>
 8002646:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 800264a:	d12f      	bne.n	80026ac <RI_SetRegCommandParser+0x1dc>
            currComp = MCI_GetIqdref(pMCIN);
 800264c:	48a1      	ldr	r0, [pc, #644]	; (80028d4 <RI_SetRegCommandParser+0x404>)
 800264e:	f7fe fff9 	bl	8001644 <MCI_GetIqdref>
      rxData = rxData+size;
 8002652:	1d2e      	adds	r6, r5, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002654:	9005      	str	r0, [sp, #20]
            currComp.q = (int16_t)regdata16;
 8002656:	f8ad 9014 	strh.w	r9, [sp, #20]
            MCI_SetCurrentReferences(pMCIN,currComp);
 800265a:	489e      	ldr	r0, [pc, #632]	; (80028d4 <RI_SetRegCommandParser+0x404>)
 800265c:	9905      	ldr	r1, [sp, #20]
 800265e:	f7fe fee1 	bl	8001424 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002662:	f1aa 0204 	sub.w	r2, sl, #4
 8002666:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002668:	2000      	movs	r0, #0
 800266a:	e769      	b.n	8002540 <RI_SetRegCommandParser+0x70>
        switch (regID)
 800266c:	2b88      	cmp	r3, #136	; 0x88
 800266e:	f000 81b1 	beq.w	80029d4 <RI_SetRegCommandParser+0x504>
 8002672:	f020 0087 	bic.w	r0, r0, #135	; 0x87
      rxLength = (int16_t) (rxLength - size);
 8002676:	f1aa 0203 	sub.w	r2, sl, #3
 800267a:	2848      	cmp	r0, #72	; 0x48
 800267c:	b212      	sxth	r2, r2
      rxData = rxData+size;
 800267e:	f105 0603 	add.w	r6, r5, #3
 8002682:	d023      	beq.n	80026cc <RI_SetRegCommandParser+0x1fc>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002684:	2005      	movs	r0, #5
            break;
 8002686:	e75b      	b.n	8002540 <RI_SetRegCommandParser+0x70>
        switch (regID)
 8002688:	2b98      	cmp	r3, #152	; 0x98
 800268a:	f000 81ae 	beq.w	80029ea <RI_SetRegCommandParser+0x51a>
 800268e:	d814      	bhi.n	80026ba <RI_SetRegCommandParser+0x1ea>
 8002690:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002694:	2818      	cmp	r0, #24
 8002696:	d015      	beq.n	80026c4 <RI_SetRegCommandParser+0x1f4>
      rxLength = (int16_t) (rxLength - size);
 8002698:	f1aa 0a06 	sub.w	sl, sl, #6
 800269c:	fa0f f28a 	sxth.w	r2, sl
      rxData = rxData+size;
 80026a0:	1dae      	adds	r6, r5, #6
 80026a2:	e7ef      	b.n	8002684 <RI_SetRegCommandParser+0x1b4>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80026a4:	2008      	movs	r0, #8
}
 80026a6:	b009      	add	sp, #36	; 0x24
 80026a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ac:	d935      	bls.n	800271a <RI_SetRegCommandParser+0x24a>
      rxLength = (int16_t) (rxLength - size);
 80026ae:	f1aa 0204 	sub.w	r2, sl, #4
 80026b2:	b212      	sxth	r2, r2
      rxData = rxData+size;
 80026b4:	1d2e      	adds	r6, r5, #4
            retVal = MCP_ERROR_UNKNOWN_REG;
 80026b6:	2005      	movs	r0, #5
            break;
 80026b8:	e742      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 80026ba:	2bd8      	cmp	r3, #216	; 0xd8
 80026bc:	d002      	beq.n	80026c4 <RI_SetRegCommandParser+0x1f4>
 80026be:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80026c2:	d1e9      	bne.n	8002698 <RI_SetRegCommandParser+0x1c8>
      rxLength = (int16_t) (rxLength - size);
 80026c4:	f1aa 0206 	sub.w	r2, sl, #6
 80026c8:	b212      	sxth	r2, r2
      rxData = rxData+size;
 80026ca:	1dae      	adds	r6, r5, #6
            retVal = MCP_ERROR_RO_REG;
 80026cc:	2004      	movs	r0, #4
 80026ce:	e737      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 80026d0:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 80026d4:	d008      	beq.n	80026e8 <RI_SetRegCommandParser+0x218>
 80026d6:	f240 8107 	bls.w	80028e8 <RI_SetRegCommandParser+0x418>
 80026da:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80026de:	d003      	beq.n	80026e8 <RI_SetRegCommandParser+0x218>
 80026e0:	d96f      	bls.n	80027c2 <RI_SetRegCommandParser+0x2f2>
 80026e2:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80026e6:	d1e2      	bne.n	80026ae <RI_SetRegCommandParser+0x1de>
      rxLength = (int16_t) (rxLength - size);
 80026e8:	f1aa 0204 	sub.w	r2, sl, #4
 80026ec:	b212      	sxth	r2, r2
      rxData = rxData+size;
 80026ee:	1d2e      	adds	r6, r5, #4
            retVal = MCP_ERROR_RO_REG;
 80026f0:	2004      	movs	r0, #4
            break;
 80026f2:	e725      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 80026f4:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 80026f8:	f000 8247 	beq.w	8002b8a <RI_SetRegCommandParser+0x6ba>
 80026fc:	d951      	bls.n	80027a2 <RI_SetRegCommandParser+0x2d2>
 80026fe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002702:	d1d4      	bne.n	80026ae <RI_SetRegCommandParser+0x1de>
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002704:	4874      	ldr	r0, [pc, #464]	; (80028d8 <RI_SetRegCommandParser+0x408>)
 8002706:	fa0f f189 	sxth.w	r1, r9
 800270a:	f005 fe15 	bl	8008338 <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 800270e:	f1aa 0204 	sub.w	r2, sl, #4
      rxData = rxData+size;
 8002712:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002714:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002716:	2000      	movs	r0, #0
            break;
 8002718:	e712      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 800271a:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 800271e:	d0e3      	beq.n	80026e8 <RI_SetRegCommandParser+0x218>
 8002720:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002724:	d0e0      	beq.n	80026e8 <RI_SetRegCommandParser+0x218>
 8002726:	e7c2      	b.n	80026ae <RI_SetRegCommandParser+0x1de>
 8002728:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800272c:	f000 8228 	beq.w	8002b80 <RI_SetRegCommandParser+0x6b0>
 8002730:	f240 80be 	bls.w	80028b0 <RI_SetRegCommandParser+0x3e0>
 8002734:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002738:	f000 8233 	beq.w	8002ba2 <RI_SetRegCommandParser+0x6d2>
 800273c:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8002740:	f040 80a6 	bne.w	8002890 <RI_SetRegCommandParser+0x3c0>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002744:	4b65      	ldr	r3, [pc, #404]	; (80028dc <RI_SetRegCommandParser+0x40c>)
 8002746:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 800274a:	1d2e      	adds	r6, r5, #4
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	f005 fdf1 	bl	8008334 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002752:	f1aa 0204 	sub.w	r2, sl, #4
 8002756:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002758:	2000      	movs	r0, #0
            break;
 800275a:	e6f1      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 800275c:	f241 5250 	movw	r2, #5456	; 0x1550
 8002760:	4293      	cmp	r3, r2
 8002762:	f000 8209 	beq.w	8002b78 <RI_SetRegCommandParser+0x6a8>
 8002766:	d947      	bls.n	80027f8 <RI_SetRegCommandParser+0x328>
 8002768:	f241 6250 	movw	r2, #5712	; 0x1650
 800276c:	4293      	cmp	r3, r2
 800276e:	f000 81ff 	beq.w	8002b70 <RI_SetRegCommandParser+0x6a0>
 8002772:	d92d      	bls.n	80027d0 <RI_SetRegCommandParser+0x300>
 8002774:	f641 1210 	movw	r2, #6416	; 0x1910
 8002778:	4293      	cmp	r3, r2
 800277a:	f000 8217 	beq.w	8002bac <RI_SetRegCommandParser+0x6dc>
 800277e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002782:	4293      	cmp	r3, r2
 8002784:	d0b0      	beq.n	80026e8 <RI_SetRegCommandParser+0x218>
 8002786:	f641 02d0 	movw	r2, #6352	; 0x18d0
 800278a:	4293      	cmp	r3, r2
 800278c:	d18f      	bne.n	80026ae <RI_SetRegCommandParser+0x1de>
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 800278e:	4852      	ldr	r0, [pc, #328]	; (80028d8 <RI_SetRegCommandParser+0x408>)
 8002790:	4649      	mov	r1, r9
 8002792:	f005 fdeb 	bl	800836c <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002796:	f1aa 0204 	sub.w	r2, sl, #4
      rxData = rxData+size;
 800279a:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 800279c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 800279e:	2000      	movs	r0, #0
            break;
 80027a0:	e6ce      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 80027a2:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80027a6:	f040 80bc 	bne.w	8002922 <RI_SetRegCommandParser+0x452>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 80027aa:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <RI_SetRegCommandParser+0x40c>)
 80027ac:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 80027b0:	1d2e      	adds	r6, r5, #4
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	f005 fdee 	bl	8008394 <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 80027b8:	f1aa 0204 	sub.w	r2, sl, #4
 80027bc:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80027be:	2000      	movs	r0, #0
            break;
 80027c0:	e6be      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 80027c2:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 80027c6:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 80027ca:	f47f af70 	bne.w	80026ae <RI_SetRegCommandParser+0x1de>
 80027ce:	e78b      	b.n	80026e8 <RI_SetRegCommandParser+0x218>
 80027d0:	f241 52d0 	movw	r2, #5584	; 0x15d0
 80027d4:	4293      	cmp	r3, r2
 80027d6:	f000 819a 	beq.w	8002b0e <RI_SetRegCommandParser+0x63e>
 80027da:	f241 6210 	movw	r2, #5648	; 0x1610
 80027de:	4293      	cmp	r3, r2
 80027e0:	d124      	bne.n	800282c <RI_SetRegCommandParser+0x35c>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 80027e2:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <RI_SetRegCommandParser+0x410>)
 80027e4:	4649      	mov	r1, r9
      rxData = rxData+size;
 80027e6:	1d2e      	adds	r6, r5, #4
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	f005 fdbf 	bl	800836c <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 80027ee:	f1aa 0204 	sub.w	r2, sl, #4
 80027f2:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80027f4:	2000      	movs	r0, #0
            break;
 80027f6:	e6a3      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 80027f8:	f241 4250 	movw	r2, #5200	; 0x1450
 80027fc:	4293      	cmp	r3, r2
 80027fe:	f000 817c 	beq.w	8002afa <RI_SetRegCommandParser+0x62a>
 8002802:	d932      	bls.n	800286a <RI_SetRegCommandParser+0x39a>
 8002804:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8002808:	4293      	cmp	r3, r2
 800280a:	f000 818f 	beq.w	8002b2c <RI_SetRegCommandParser+0x65c>
 800280e:	f241 5210 	movw	r2, #5392	; 0x1510
 8002812:	4293      	cmp	r3, r2
 8002814:	d11a      	bne.n	800284c <RI_SetRegCommandParser+0x37c>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <RI_SetRegCommandParser+0x40c>)
 8002818:	4649      	mov	r1, r9
      rxData = rxData+size;
 800281a:	1d2e      	adds	r6, r5, #4
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	f005 fd99 	bl	8008354 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002822:	f1aa 0204 	sub.w	r2, sl, #4
 8002826:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002828:	2000      	movs	r0, #0
            break;
 800282a:	e689      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 800282c:	f241 5290 	movw	r2, #5520	; 0x1590
 8002830:	4293      	cmp	r3, r2
 8002832:	f47f af3c 	bne.w	80026ae <RI_SetRegCommandParser+0x1de>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002836:	4b29      	ldr	r3, [pc, #164]	; (80028dc <RI_SetRegCommandParser+0x40c>)
 8002838:	4649      	mov	r1, r9
      rxData = rxData+size;
 800283a:	1d2e      	adds	r6, r5, #4
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	f005 fdb1 	bl	80083a4 <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002842:	f1aa 0204 	sub.w	r2, sl, #4
 8002846:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002848:	2000      	movs	r0, #0
            break;
 800284a:	e679      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 800284c:	f241 4290 	movw	r2, #5264	; 0x1490
 8002850:	4293      	cmp	r3, r2
 8002852:	f47f af2c 	bne.w	80026ae <RI_SetRegCommandParser+0x1de>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002856:	4823      	ldr	r0, [pc, #140]	; (80028e4 <RI_SetRegCommandParser+0x414>)
 8002858:	4649      	mov	r1, r9
 800285a:	f005 fd87 	bl	800836c <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 800285e:	f1aa 0204 	sub.w	r2, sl, #4
      rxData = rxData+size;
 8002862:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002864:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002866:	2000      	movs	r0, #0
            break;
 8002868:	e66a      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 800286a:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 800286e:	f43f af3b 	beq.w	80026e8 <RI_SetRegCommandParser+0x218>
 8002872:	d947      	bls.n	8002904 <RI_SetRegCommandParser+0x434>
 8002874:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8002878:	d004      	beq.n	8002884 <RI_SetRegCommandParser+0x3b4>
 800287a:	d93a      	bls.n	80028f2 <RI_SetRegCommandParser+0x422>
 800287c:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002880:	f47f af15 	bne.w	80026ae <RI_SetRegCommandParser+0x1de>
      rxLength = (int16_t) (rxLength - size);
 8002884:	f1aa 0204 	sub.w	r2, sl, #4
 8002888:	b212      	sxth	r2, r2
      rxData = rxData+size;
 800288a:	1d2e      	adds	r6, r5, #4
  uint8_t retVal = MCP_CMD_OK;
 800288c:	2000      	movs	r0, #0
 800288e:	e657      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 8002890:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8002894:	f47f af0b 	bne.w	80026ae <RI_SetRegCommandParser+0x1de>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <RI_SetRegCommandParser+0x410>)
 800289a:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 800289e:	1d2e      	adds	r6, r5, #4
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	f005 fd49 	bl	8008338 <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 80028a6:	f1aa 0204 	sub.w	r2, sl, #4
 80028aa:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80028ac:	2000      	movs	r0, #0
            break;
 80028ae:	e647      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 80028b0:	2bd0      	cmp	r3, #208	; 0xd0
 80028b2:	f000 8130 	beq.w	8002b16 <RI_SetRegCommandParser+0x646>
 80028b6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80028ba:	d149      	bne.n	8002950 <RI_SetRegCommandParser+0x480>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 80028bc:	4809      	ldr	r0, [pc, #36]	; (80028e4 <RI_SetRegCommandParser+0x414>)
 80028be:	fa0f f189 	sxth.w	r1, r9
 80028c2:	f005 fd67 	bl	8008394 <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 80028c6:	f1aa 0204 	sub.w	r2, sl, #4
      rxData = rxData+size;
 80028ca:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 80028cc:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80028ce:	2000      	movs	r0, #0
            break;
 80028d0:	e636      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 80028d2:	bf00      	nop
 80028d4:	200009d0 	.word	0x200009d0
 80028d8:	20000318 	.word	0x20000318
 80028dc:	200004a4 	.word	0x200004a4
 80028e0:	200004a8 	.word	0x200004a8
 80028e4:	20000174 	.word	0x20000174
 80028e8:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 80028ec:	f43f aefc 	beq.w	80026e8 <RI_SetRegCommandParser+0x218>
 80028f0:	e6dd      	b.n	80026ae <RI_SetRegCommandParser+0x1de>
 80028f2:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 80028f6:	f43f aef7 	beq.w	80026e8 <RI_SetRegCommandParser+0x218>
 80028fa:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 80028fe:	f43f aef3 	beq.w	80026e8 <RI_SetRegCommandParser+0x218>
 8002902:	e6d4      	b.n	80026ae <RI_SetRegCommandParser+0x1de>
 8002904:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8002908:	d00f      	beq.n	800292a <RI_SetRegCommandParser+0x45a>
 800290a:	d92f      	bls.n	800296c <RI_SetRegCommandParser+0x49c>
 800290c:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8002910:	f43f aeea 	beq.w	80026e8 <RI_SetRegCommandParser+0x218>
 8002914:	f020 0087 	bic.w	r0, r0, #135	; 0x87
 8002918:	f5b0 6f35 	cmp.w	r0, #2896	; 0xb50
 800291c:	f43f aee4 	beq.w	80026e8 <RI_SetRegCommandParser+0x218>
 8002920:	e6c5      	b.n	80026ae <RI_SetRegCommandParser+0x1de>
 8002922:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8002926:	f47f aec2 	bne.w	80026ae <RI_SetRegCommandParser+0x1de>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800292a:	aa05      	add	r2, sp, #20
 800292c:	f10d 0112 	add.w	r1, sp, #18
 8002930:	48a4      	ldr	r0, [pc, #656]	; (8002bc4 <RI_SetRegCommandParser+0x6f4>)
 8002932:	f007 fb0d 	bl	8009f50 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 8002936:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
      rxData = rxData+size;
 800293a:	1d2e      	adds	r6, r5, #4
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 800293c:	fa0f f189 	sxth.w	r1, r9
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 8002940:	48a0      	ldr	r0, [pc, #640]	; (8002bc4 <RI_SetRegCommandParser+0x6f4>)
 8002942:	f007 fb0d 	bl	8009f60 <STO_PLL_SetObserverGains>
      rxLength = (int16_t) (rxLength - size);
 8002946:	f1aa 0204 	sub.w	r2, sl, #4
 800294a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 800294c:	2000      	movs	r0, #0
 800294e:	e5f7      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 8002950:	2b90      	cmp	r3, #144	; 0x90
 8002952:	f47f aeac 	bne.w	80026ae <RI_SetRegCommandParser+0x1de>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002956:	489c      	ldr	r0, [pc, #624]	; (8002bc8 <RI_SetRegCommandParser+0x6f8>)
 8002958:	fa0f f189 	sxth.w	r1, r9
 800295c:	f005 fcea 	bl	8008334 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002960:	f1aa 0204 	sub.w	r2, sl, #4
      rxData = rxData+size;
 8002964:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002966:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002968:	2000      	movs	r0, #0
            break;
 800296a:	e5e9      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 800296c:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002970:	f5b0 6f21 	cmp.w	r0, #2576	; 0xa10
 8002974:	d0d9      	beq.n	800292a <RI_SetRegCommandParser+0x45a>
 8002976:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 800297a:	d0d6      	beq.n	800292a <RI_SetRegCommandParser+0x45a>
 800297c:	e697      	b.n	80026ae <RI_SetRegCommandParser+0x1de>
 800297e:	2ba8      	cmp	r3, #168	; 0xa8
 8002980:	d002      	beq.n	8002988 <RI_SetRegCommandParser+0x4b8>
 8002982:	d915      	bls.n	80029b0 <RI_SetRegCommandParser+0x4e0>
 8002984:	2be8      	cmp	r3, #232	; 0xe8
 8002986:	d117      	bne.n	80029b8 <RI_SetRegCommandParser+0x4e8>
      rxLength = (int16_t) (rxLength - size);
 8002988:	eba9 020a 	sub.w	r2, r9, sl
      rxData = rxData+size;
 800298c:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 800298e:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_RO_REG;
 8002990:	2004      	movs	r0, #4
 8002992:	e5d5      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 8002994:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8002998:	d04a      	beq.n	8002a30 <RI_SetRegCommandParser+0x560>
 800299a:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 800299e:	d10b      	bne.n	80029b8 <RI_SetRegCommandParser+0x4e8>
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80029a0:	488a      	ldr	r0, [pc, #552]	; (8002bcc <RI_SetRegCommandParser+0x6fc>)
 80029a2:	f005 fbf7 	bl	8008194 <MCPA_cfgLog>
      rxLength = (int16_t) (rxLength - size);
 80029a6:	eba9 020a 	sub.w	r2, r9, sl
      rxData = rxData+size;
 80029aa:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 80029ac:	b212      	sxth	r2, r2
              break;
 80029ae:	e5c7      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 80029b0:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 80029b4:	2828      	cmp	r0, #40	; 0x28
 80029b6:	d0e7      	beq.n	8002988 <RI_SetRegCommandParser+0x4b8>
      rxLength = (int16_t) (rxLength - size);
 80029b8:	eba9 020a 	sub.w	r2, r9, sl
      rxData = rxData+size;
 80029bc:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 80029be:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_UNKNOWN_REG;
 80029c0:	2005      	movs	r0, #5
              break;
 80029c2:	e5bd      	b.n	8002540 <RI_SetRegCommandParser+0x70>
      rxLength = (int16_t) (rxLength - size);
 80029c4:	eba9 0203 	sub.w	r2, r9, r3
      rxData = rxData+size;
 80029c8:	441e      	add	r6, r3
      rxLength = (int16_t) (rxLength - size);
 80029ca:	b212      	sxth	r2, r2
        retVal = MCP_ERROR_RO_REG;
 80029cc:	2004      	movs	r0, #4
 80029ce:	e5b7      	b.n	8002540 <RI_SetRegCommandParser+0x70>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 80029d0:	200a      	movs	r0, #10
 80029d2:	e5b5      	b.n	8002540 <RI_SetRegCommandParser+0x70>
            uint8_t regdata8 = *data;
 80029d4:	78ab      	ldrb	r3, [r5, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d077      	beq.n	8002aca <RI_SetRegCommandParser+0x5fa>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d067      	beq.n	8002aae <RI_SetRegCommandParser+0x5de>
      rxLength = (int16_t) (rxLength - size);
 80029de:	f1aa 0203 	sub.w	r2, sl, #3
 80029e2:	b212      	sxth	r2, r2
      rxData = rxData+size;
 80029e4:	1cee      	adds	r6, r5, #3
  uint8_t retVal = MCP_CMD_OK;
 80029e6:	2000      	movs	r0, #0
 80029e8:	e5aa      	b.n	8002540 <RI_SetRegCommandParser+0x70>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80029ea:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80029ee:	4a78      	ldr	r2, [pc, #480]	; (8002bd0 <RI_SetRegCommandParser+0x700>)
 80029f0:	4878      	ldr	r0, [pc, #480]	; (8002bd4 <RI_SetRegCommandParser+0x704>)
 80029f2:	fb82 2103 	smull	r2, r1, r2, r3
 80029f6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80029fa:	2200      	movs	r2, #0
 80029fc:	b209      	sxth	r1, r1
 80029fe:	f7fe fcf7 	bl	80013f0 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002a02:	f1aa 0206 	sub.w	r2, sl, #6
      rxData = rxData+size;
 8002a06:	1dae      	adds	r6, r5, #6
      rxLength = (int16_t) (rxLength - size);
 8002a08:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002a0a:	2000      	movs	r0, #0
            break;
 8002a0c:	e598      	b.n	8002540 <RI_SetRegCommandParser+0x70>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002a0e:	686b      	ldr	r3, [r5, #4]
 8002a10:	496f      	ldr	r1, [pc, #444]	; (8002bd0 <RI_SetRegCommandParser+0x700>)
 8002a12:	892a      	ldrh	r2, [r5, #8]
 8002a14:	fb81 0103 	smull	r0, r1, r1, r3
 8002a18:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002a1c:	486d      	ldr	r0, [pc, #436]	; (8002bd4 <RI_SetRegCommandParser+0x704>)
 8002a1e:	b209      	sxth	r1, r1
 8002a20:	f7fe fce6 	bl	80013f0 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002a24:	eba9 020a 	sub.w	r2, r9, sl
      rxData = rxData+size;
 8002a28:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002a2a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002a2c:	2000      	movs	r0, #0
              break;
 8002a2e:	e587      	b.n	8002540 <RI_SetRegCommandParser+0x70>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002a30:	6869      	ldr	r1, [r5, #4]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002a32:	4868      	ldr	r0, [pc, #416]	; (8002bd4 <RI_SetRegCommandParser+0x704>)
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002a34:	9105      	str	r1, [sp, #20]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002a36:	f7fe fcf5 	bl	8001424 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002a3a:	eba9 020a 	sub.w	r2, r9, sl
      rxData = rxData+size;
 8002a3e:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002a40:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002a42:	2000      	movs	r0, #0
 8002a44:	e57c      	b.n	8002540 <RI_SetRegCommandParser+0x70>
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002a46:	f01c 0307 	ands.w	r3, ip, #7
 8002a4a:	d12a      	bne.n	8002aa2 <RI_SetRegCommandParser+0x5d2>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002a4c:	fa5f fc8c 	uxtb.w	ip, ip
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002a50:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 8002a54:	d825      	bhi.n	8002aa2 <RI_SetRegCommandParser+0x5d2>
                for (i = 0; i <nbrOfPhase; i++)
 8002a56:	ea5f 02dc 	movs.w	r2, ip, lsr #3
 8002a5a:	d020      	beq.n	8002a9e <RI_SetRegCommandParser+0x5ce>
 8002a5c:	e9cd 9402 	strd	r9, r4, [sp, #8]
 8002a60:	4619      	mov	r1, r3
 8002a62:	4691      	mov	r9, r2
 8002a64:	461c      	mov	r4, r3
                revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002a66:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8002a6a:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <RI_SetRegCommandParser+0x700>)
 8002a6c:	fb83 e00c 	smull	lr, r0, r3, ip
 8002a70:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8002a74:	f8ad 0016 	strh.w	r0, [sp, #22]
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002a78:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 8002a7c:	f8ad 0018 	strh.w	r0, [sp, #24]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002a80:	8968      	ldrh	r0, [r5, #10]
 8002a82:	f8ad 0014 	strh.w	r0, [sp, #20]
                for (i = 0; i <nbrOfPhase; i++)
 8002a86:	3401      	adds	r4, #1
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 8002a88:	4853      	ldr	r0, [pc, #332]	; (8002bd8 <RI_SetRegCommandParser+0x708>)
 8002a8a:	aa05      	add	r2, sp, #20
 8002a8c:	f006 fe8e 	bl	80097ac <RUC_SetPhase>
                for (i = 0; i <nbrOfPhase; i++)
 8002a90:	b2e1      	uxtb	r1, r4
 8002a92:	4589      	cmp	r9, r1
 8002a94:	f105 0508 	add.w	r5, r5, #8
 8002a98:	d8e5      	bhi.n	8002a66 <RI_SetRegCommandParser+0x596>
 8002a9a:	e9dd 9402 	ldrd	r9, r4, [sp, #8]
  uint8_t retVal = MCP_CMD_OK;
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e000      	b.n	8002aa4 <RI_SetRegCommandParser+0x5d4>
                retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002aa2:	200a      	movs	r0, #10
      rxLength = (int16_t) (rxLength - size);
 8002aa4:	eba9 020a 	sub.w	r2, r9, sl
      rxData = rxData+size;
 8002aa8:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 8002aaa:	b212      	sxth	r2, r2
 8002aac:	e548      	b.n	8002540 <RI_SetRegCommandParser+0x70>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002aae:	4849      	ldr	r0, [pc, #292]	; (8002bd4 <RI_SetRegCommandParser+0x704>)
 8002ab0:	f7fe fd9a 	bl	80015e8 <MCI_GetMecSpeedRefUnit>
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4601      	mov	r1, r0
 8002ab8:	4846      	ldr	r0, [pc, #280]	; (8002bd4 <RI_SetRegCommandParser+0x704>)
 8002aba:	f7fe fc99 	bl	80013f0 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002abe:	f1aa 0203 	sub.w	r2, sl, #3
      rxData = rxData+size;
 8002ac2:	1cee      	adds	r6, r5, #3
      rxLength = (int16_t) (rxLength - size);
 8002ac4:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	e53a      	b.n	8002540 <RI_SetRegCommandParser+0x70>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002aca:	4842      	ldr	r0, [pc, #264]	; (8002bd4 <RI_SetRegCommandParser+0x704>)
 8002acc:	f7fe fde4 	bl	8001698 <MCI_GetTeref>
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4601      	mov	r1, r0
 8002ad4:	483f      	ldr	r0, [pc, #252]	; (8002bd4 <RI_SetRegCommandParser+0x704>)
 8002ad6:	f7fe fc9b 	bl	8001410 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8002ada:	f1aa 0203 	sub.w	r2, sl, #3
      rxData = rxData+size;
 8002ade:	1cee      	adds	r6, r5, #3
      rxLength = (int16_t) (rxLength - size);
 8002ae0:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	e52c      	b.n	8002540 <RI_SetRegCommandParser+0x70>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002ae6:	2201      	movs	r2, #1
  const char_t *tempsrcString = srcString;
 8002ae8:	4630      	mov	r0, r6
  *size= 1U ; /* /0 is the min String size */
 8002aea:	4613      	mov	r3, r2
 8002aec:	e559      	b.n	80025a2 <RI_SetRegCommandParser+0xd2>
      rxLength = (int16_t) (rxLength - size);
 8002aee:	f1aa 0203 	sub.w	r2, sl, #3
 8002af2:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002af4:	1cee      	adds	r6, r5, #3
        retVal = MCP_ERROR_RO_REG;
 8002af6:	2004      	movs	r0, #4
 8002af8:	e522      	b.n	8002540 <RI_SetRegCommandParser+0x70>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002afa:	4833      	ldr	r0, [pc, #204]	; (8002bc8 <RI_SetRegCommandParser+0x6f8>)
 8002afc:	4649      	mov	r1, r9
 8002afe:	f005 fc29 	bl	8008354 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002b02:	f1aa 0204 	sub.w	r2, sl, #4
      rxData = rxData+size;
 8002b06:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002b08:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b0a:	2000      	movs	r0, #0
            break;
 8002b0c:	e518      	b.n	8002540 <RI_SetRegCommandParser+0x70>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002b0e:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <RI_SetRegCommandParser+0x70c>)
 8002b10:	4649      	mov	r1, r9
      rxData = rxData+size;
 8002b12:	1d2e      	adds	r6, r5, #4
 8002b14:	e682      	b.n	800281c <RI_SetRegCommandParser+0x34c>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002b16:	482c      	ldr	r0, [pc, #176]	; (8002bc8 <RI_SetRegCommandParser+0x6f8>)
 8002b18:	fa0f f189 	sxth.w	r1, r9
 8002b1c:	f005 fc0c 	bl	8008338 <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002b20:	f1aa 0204 	sub.w	r2, sl, #4
      rxData = rxData+size;
 8002b24:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002b26:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b28:	2000      	movs	r0, #0
            break;
 8002b2a:	e509      	b.n	8002540 <RI_SetRegCommandParser+0x70>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002b2c:	4826      	ldr	r0, [pc, #152]	; (8002bc8 <RI_SetRegCommandParser+0x6f8>)
 8002b2e:	4649      	mov	r1, r9
 8002b30:	f005 fc38 	bl	80083a4 <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002b34:	f1aa 0204 	sub.w	r2, sl, #4
      rxData = rxData+size;
 8002b38:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002b3a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b3c:	2000      	movs	r0, #0
            break;
 8002b3e:	e4ff      	b.n	8002540 <RI_SetRegCommandParser+0x70>
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002b40:	4827      	ldr	r0, [pc, #156]	; (8002be0 <RI_SetRegCommandParser+0x710>)
 8002b42:	fa0f f189 	sxth.w	r1, r9
 8002b46:	f005 fbf5 	bl	8008334 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002b4a:	f1aa 0204 	sub.w	r2, sl, #4
      rxData = rxData+size;
 8002b4e:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002b50:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b52:	2000      	movs	r0, #0
            break;
 8002b54:	e4f4      	b.n	8002540 <RI_SetRegCommandParser+0x70>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <RI_SetRegCommandParser+0x714>)
 8002b58:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 8002b5c:	1d2e      	adds	r6, r5, #4
 8002b5e:	e69f      	b.n	80028a0 <RI_SetRegCommandParser+0x3d0>
            currComp = MCI_GetIqdref(pMCIN);
 8002b60:	481c      	ldr	r0, [pc, #112]	; (8002bd4 <RI_SetRegCommandParser+0x704>)
 8002b62:	f7fe fd6f 	bl	8001644 <MCI_GetIqdref>
      rxData = rxData+size;
 8002b66:	1d2e      	adds	r6, r5, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002b68:	9005      	str	r0, [sp, #20]
            currComp.d = (int16_t)regdata16;
 8002b6a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8002b6e:	e574      	b.n	800265a <RI_SetRegCommandParser+0x18a>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <RI_SetRegCommandParser+0x70c>)
 8002b72:	4649      	mov	r1, r9
      rxData = rxData+size;
 8002b74:	1d2e      	adds	r6, r5, #4
 8002b76:	e661      	b.n	800283c <RI_SetRegCommandParser+0x36c>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <RI_SetRegCommandParser+0x714>)
 8002b7a:	4649      	mov	r1, r9
      rxData = rxData+size;
 8002b7c:	1d2e      	adds	r6, r5, #4
 8002b7e:	e633      	b.n	80027e8 <RI_SetRegCommandParser+0x318>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <RI_SetRegCommandParser+0x70c>)
 8002b82:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 8002b86:	1d2e      	adds	r6, r5, #4
 8002b88:	e5e0      	b.n	800274c <RI_SetRegCommandParser+0x27c>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002b8a:	aa05      	add	r2, sp, #20
 8002b8c:	f10d 0112 	add.w	r1, sp, #18
 8002b90:	480c      	ldr	r0, [pc, #48]	; (8002bc4 <RI_SetRegCommandParser+0x6f4>)
 8002b92:	f007 f9dd 	bl	8009f50 <STO_PLL_GetObserverGains>
      rxData = rxData+size;
 8002b96:	1d2e      	adds	r6, r5, #4
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 8002b98:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8002b9c:	fa0f f289 	sxth.w	r2, r9
 8002ba0:	e6ce      	b.n	8002940 <RI_SetRegCommandParser+0x470>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <RI_SetRegCommandParser+0x70c>)
 8002ba4:	fa0f f189 	sxth.w	r1, r9
      rxData = rxData+size;
 8002ba8:	1d2e      	adds	r6, r5, #4
 8002baa:	e602      	b.n	80027b2 <RI_SetRegCommandParser+0x2e2>
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002bac:	480c      	ldr	r0, [pc, #48]	; (8002be0 <RI_SetRegCommandParser+0x710>)
 8002bae:	4649      	mov	r1, r9
 8002bb0:	f005 fbd0 	bl	8008354 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002bb4:	f1aa 0204 	sub.w	r2, sl, #4
      rxData = rxData+size;
 8002bb8:	1d2e      	adds	r6, r5, #4
      rxLength = (int16_t) (rxLength - size);
 8002bba:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002bbc:	2000      	movs	r0, #0
            break;
 8002bbe:	e4bf      	b.n	8002540 <RI_SetRegCommandParser+0x70>
 8002bc0:	9801      	ldr	r0, [sp, #4]
 8002bc2:	e4fc      	b.n	80025be <RI_SetRegCommandParser+0xee>
 8002bc4:	200002e4 	.word	0x200002e4
 8002bc8:	20000174 	.word	0x20000174
 8002bcc:	200004c4 	.word	0x200004c4
 8002bd0:	2aaaaaab 	.word	0x2aaaaaab
 8002bd4:	200009d0 	.word	0x200009d0
 8002bd8:	20000258 	.word	0x20000258
 8002bdc:	200004a8 	.word	0x200004a8
 8002be0:	20000318 	.word	0x20000318
 8002be4:	200004a4 	.word	0x200004a4

08002be8 <RI_GetRegCommandParser>:
{
 8002be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 8002bec:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t * rxData = pHandle->rxBuffer;
 8002bf0:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002bf4:	6886      	ldr	r6, [r0, #8]
    pHandle->txLength = 0;
 8002bf6:	2300      	movs	r3, #0
{
 8002bf8:	b099      	sub	sp, #100	; 0x64
    pHandle->txLength = 0;
 8002bfa:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 8002bfc:	f1b8 0f00 	cmp.w	r8, #0
 8002c00:	f000 8366 	beq.w	80032d0 <RI_GetRegCommandParser+0x6e8>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002c04:	f8df a37c 	ldr.w	sl, [pc, #892]	; 8002f84 <RI_GetRegCommandParser+0x39c>
 8002c08:	b20c      	sxth	r4, r1
 8002c0a:	4607      	mov	r7, r0
    while (rxLength > 0U)
 8002c0c:	4619      	mov	r1, r3
    uint8_t * rxData = pHandle->rxBuffer;
 8002c0e:	464d      	mov	r5, r9
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002c10:	f835 3b02 	ldrh.w	r3, [r5], #2
    switch (typeID)
 8002c14:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c18:	3a08      	subs	r2, #8
    uint16_t regID = dataID & REG_MASK;
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	b29b      	uxth	r3, r3
    switch (typeID)
 8002c20:	2a20      	cmp	r2, #32
 8002c22:	d812      	bhi.n	8002c4a <RI_GetRegCommandParser+0x62>
 8002c24:	e8df f002 	tbb	[pc, r2]
 8002c28:	111111d3 	.word	0x111111d3
 8002c2c:	11111111 	.word	0x11111111
 8002c30:	11111169 	.word	0x11111169
 8002c34:	11111111 	.word	0x11111111
 8002c38:	111111e1 	.word	0x111111e1
 8002c3c:	11111111 	.word	0x11111111
 8002c40:	11111131 	.word	0x11111131
 8002c44:	11111111 	.word	0x11111111
 8002c48:	15          	.byte	0x15
 8002c49:	00          	.byte	0x00
 8002c4a:	2007      	movs	r0, #7
}
 8002c4c:	b019      	add	sp, #100	; 0x64
 8002c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 8002c52:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002c56:	f106 0202 	add.w	r2, r6, #2
        switch (regID)
 8002c5a:	f000 82dc 	beq.w	8003216 <RI_GetRegCommandParser+0x62e>
 8002c5e:	f200 8106 	bhi.w	8002e6e <RI_GetRegCommandParser+0x286>
 8002c62:	2ba8      	cmp	r3, #168	; 0xa8
 8002c64:	f000 82ae 	beq.w	80031c4 <RI_GetRegCommandParser+0x5dc>
 8002c68:	f200 80f7 	bhi.w	8002e5a <RI_GetRegCommandParser+0x272>
 8002c6c:	2b28      	cmp	r3, #40	; 0x28
 8002c6e:	f000 82c1 	beq.w	80031f4 <RI_GetRegCommandParser+0x60c>
 8002c72:	2b68      	cmp	r3, #104	; 0x68
 8002c74:	f040 80b7 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002c78:	233c      	movs	r3, #60	; 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8002c7a:	2c3d      	cmp	r4, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002c7c:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002c7e:	f200 8307 	bhi.w	8003290 <RI_GetRegCommandParser+0x6a8>
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c82:	2008      	movs	r0, #8
}
 8002c84:	b019      	add	sp, #100	; 0x64
 8002c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8002c8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c8c:	f000 8229 	beq.w	80030e2 <RI_GetRegCommandParser+0x4fa>
 8002c90:	f200 80c5 	bhi.w	8002e1e <RI_GetRegCommandParser+0x236>
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	f000 823c 	beq.w	8003112 <RI_GetRegCommandParser+0x52a>
 8002c9a:	2b60      	cmp	r3, #96	; 0x60
 8002c9c:	f040 80a3 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002ca0:	48b0      	ldr	r0, [pc, #704]	; (8002f64 <RI_GetRegCommandParser+0x37c>)
 8002ca2:	f990 1000 	ldrsb.w	r1, [r0]
 8002ca6:	2900      	cmp	r1, #0
 8002ca8:	f000 8264 	beq.w	8003174 <RI_GetRegCommandParser+0x58c>
 8002cac:	2c01      	cmp	r4, #1
 8002cae:	f340 8216 	ble.w	80030de <RI_GetRegCommandParser+0x4f6>
 8002cb2:	46b4      	mov	ip, r6
 8002cb4:	f1c6 0201 	rsb	r2, r6, #1
 8002cb8:	e002      	b.n	8002cc0 <RI_GetRegCommandParser+0xd8>
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	f280 820f 	bge.w	80030de <RI_GetRegCommandParser+0x4f6>
    *tempdestString = *tempsrcString;
 8002cc0:	f80c 1b01 	strb.w	r1, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002cc4:	f910 1f01 	ldrsb.w	r1, [r0, #1]!
 8002cc8:	eb0c 0302 	add.w	r3, ip, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d1f3      	bne.n	8002cba <RI_GetRegCommandParser+0xd2>
        txData = txData+size;
 8002cd2:	4618      	mov	r0, r3
    *tempdestString = (int8_t)0;
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f88c 2000 	strb.w	r2, [ip]
        pHandle->txLength += size;
 8002cda:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 8002cdc:	b2a4      	uxth	r4, r4
    while (rxLength > 0U)
 8002cde:	eb09 0208 	add.w	r2, r9, r8
        pHandle->txLength += size;
 8002ce2:	4419      	add	r1, r3
        freeSpaceS16 = freeSpaceS16-size;
 8002ce4:	1ae4      	subs	r4, r4, r3
    while (rxLength > 0U)
 8002ce6:	b292      	uxth	r2, r2
 8002ce8:	b2ab      	uxth	r3, r5
        pHandle->txLength += size;
 8002cea:	b289      	uxth	r1, r1
    while (rxLength > 0U)
 8002cec:	4293      	cmp	r3, r2
        pHandle->txLength += size;
 8002cee:	81f9      	strh	r1, [r7, #14]
        txData = txData+size;
 8002cf0:	4406      	add	r6, r0
        freeSpaceS16 = freeSpaceS16-size;
 8002cf2:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 8002cf4:	d18c      	bne.n	8002c10 <RI_GetRegCommandParser+0x28>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	e7a8      	b.n	8002c4c <RI_GetRegCommandParser+0x64>
        if (freeSpace >= 2U)
 8002cfa:	b2a4      	uxth	r4, r4
 8002cfc:	2c01      	cmp	r4, #1
 8002cfe:	d9c0      	bls.n	8002c82 <RI_GetRegCommandParser+0x9a>
          switch (regID)
 8002d00:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002d04:	f000 82f1 	beq.w	80032ea <RI_GetRegCommandParser+0x702>
 8002d08:	d924      	bls.n	8002d54 <RI_GetRegCommandParser+0x16c>
 8002d0a:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002d0e:	f000 80dc 	beq.w	8002eca <RI_GetRegCommandParser+0x2e2>
 8002d12:	f240 80dd 	bls.w	8002ed0 <RI_GetRegCommandParser+0x2e8>
 8002d16:	f241 5290 	movw	r2, #5520	; 0x1590
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	f000 82f3 	beq.w	8003306 <RI_GetRegCommandParser+0x71e>
 8002d20:	f240 8101 	bls.w	8002f26 <RI_GetRegCommandParser+0x33e>
 8002d24:	f241 6250 	movw	r2, #5712	; 0x1650
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	f000 82e3 	beq.w	80032f4 <RI_GetRegCommandParser+0x70c>
 8002d2e:	f240 80e7 	bls.w	8002f00 <RI_GetRegCommandParser+0x318>
 8002d32:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f000 8367 	beq.w	800340a <RI_GetRegCommandParser+0x822>
 8002d3c:	f641 1210 	movw	r2, #6416	; 0x1910
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d150      	bne.n	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8002d44:	4888      	ldr	r0, [pc, #544]	; (8002f68 <RI_GetRegCommandParser+0x380>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8002d46:	f005 fb03 	bl	8008350 <PID_GetKPDivisorPOW2>
 8002d4a:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8002d50:	4603      	mov	r3, r0
 8002d52:	e7c4      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 8002d54:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002d58:	f000 82fd 	beq.w	8003356 <RI_GetRegCommandParser+0x76e>
 8002d5c:	d917      	bls.n	8002d8e <RI_GetRegCommandParser+0x1a6>
 8002d5e:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002d62:	f000 82ef 	beq.w	8003344 <RI_GetRegCommandParser+0x75c>
 8002d66:	f240 8163 	bls.w	8003030 <RI_GetRegCommandParser+0x448>
 8002d6a:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002d6e:	f000 82e4 	beq.w	800333a <RI_GetRegCommandParser+0x752>
 8002d72:	f240 812b 	bls.w	8002fcc <RI_GetRegCommandParser+0x3e4>
 8002d76:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002d7a:	d134      	bne.n	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002d7c:	4650      	mov	r0, sl
 8002d7e:	f7fe fc61 	bl	8001644 <MCI_GetIqdref>
 8002d82:	8030      	strh	r0, [r6, #0]
 8002d84:	900e      	str	r0, [sp, #56]	; 0x38
              break;
 8002d86:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8002d88:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8002d8a:	4603      	mov	r3, r0
              break;
 8002d8c:	e7a7      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 8002d8e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002d92:	f000 82d0 	beq.w	8003336 <RI_GetRegCommandParser+0x74e>
 8002d96:	f240 813b 	bls.w	8003010 <RI_GetRegCommandParser+0x428>
 8002d9a:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002d9e:	f000 82c1 	beq.w	8003324 <RI_GetRegCommandParser+0x73c>
 8002da2:	f240 8124 	bls.w	8002fee <RI_GetRegCommandParser+0x406>
 8002da6:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8002daa:	f000 82ae 	beq.w	800330a <RI_GetRegCommandParser+0x722>
 8002dae:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8002db2:	d118      	bne.n	8002de6 <RI_GetRegCommandParser+0x1fe>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002db4:	486d      	ldr	r0, [pc, #436]	; (8002f6c <RI_GetRegCommandParser+0x384>)
 8002db6:	f10d 010a 	add.w	r1, sp, #10
 8002dba:	aa15      	add	r2, sp, #84	; 0x54
 8002dbc:	f007 f8c8 	bl	8009f50 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8002dc0:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 8002dc4:	8033      	strh	r3, [r6, #0]
        pHandle->txLength += size;
 8002dc6:	2002      	movs	r0, #2
 8002dc8:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8002dca:	4603      	mov	r3, r0
 8002dcc:	e787      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
        if (freeSpace > 0U)
 8002dce:	2c00      	cmp	r4, #0
 8002dd0:	f43f af57 	beq.w	8002c82 <RI_GetRegCommandParser+0x9a>
          switch (regID)
 8002dd4:	2b88      	cmp	r3, #136	; 0x88
 8002dd6:	f000 81c4 	beq.w	8003162 <RI_GetRegCommandParser+0x57a>
 8002dda:	2bc8      	cmp	r3, #200	; 0xc8
 8002ddc:	f000 81b8 	beq.w	8003150 <RI_GetRegCommandParser+0x568>
 8002de0:	2b48      	cmp	r3, #72	; 0x48
 8002de2:	f000 81ac 	beq.w	800313e <RI_GetRegCommandParser+0x556>
 8002de6:	2005      	movs	r0, #5
  return (retVal);
 8002de8:	e730      	b.n	8002c4c <RI_GetRegCommandParser+0x64>
        if (freeSpace >= 4U)
 8002dea:	b2a4      	uxth	r4, r4
 8002dec:	2c03      	cmp	r4, #3
 8002dee:	f67f af48 	bls.w	8002c82 <RI_GetRegCommandParser+0x9a>
          switch (regID)
 8002df2:	2bd8      	cmp	r3, #216	; 0xd8
 8002df4:	f000 822a 	beq.w	800324c <RI_GetRegCommandParser+0x664>
 8002df8:	f200 815c 	bhi.w	80030b4 <RI_GetRegCommandParser+0x4cc>
 8002dfc:	2b58      	cmp	r3, #88	; 0x58
 8002dfe:	f000 822d 	beq.w	800325c <RI_GetRegCommandParser+0x674>
 8002e02:	2b98      	cmp	r3, #152	; 0x98
 8002e04:	f040 814b 	bne.w	800309e <RI_GetRegCommandParser+0x4b6>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002e08:	4650      	mov	r0, sl
 8002e0a:	f7fe fbed 	bl	80015e8 <MCI_GetMecSpeedRefUnit>
 8002e0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002e12:	0040      	lsls	r0, r0, #1
 8002e14:	6030      	str	r0, [r6, #0]
        pHandle->txLength += size;
 8002e16:	2004      	movs	r0, #4
 8002e18:	89f9      	ldrh	r1, [r7, #14]
          *size = 4;
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	e75f      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 8002e1e:	2be0      	cmp	r3, #224	; 0xe0
 8002e20:	d1e1      	bne.n	8002de6 <RI_GetRegCommandParser+0x1fe>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002e22:	4b53      	ldr	r3, [pc, #332]	; (8002f70 <RI_GetRegCommandParser+0x388>)
 8002e24:	6818      	ldr	r0, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002e26:	f990 1024 	ldrsb.w	r1, [r0, #36]	; 0x24
 8002e2a:	2900      	cmp	r1, #0
 8002e2c:	f000 81a2 	beq.w	8003174 <RI_GetRegCommandParser+0x58c>
 8002e30:	2c01      	cmp	r4, #1
 8002e32:	f340 8154 	ble.w	80030de <RI_GetRegCommandParser+0x4f6>
 8002e36:	3024      	adds	r0, #36	; 0x24
 8002e38:	46b4      	mov	ip, r6
 8002e3a:	f1c6 0201 	rsb	r2, r6, #1
 8002e3e:	e002      	b.n	8002e46 <RI_GetRegCommandParser+0x25e>
 8002e40:	42a3      	cmp	r3, r4
 8002e42:	f280 814c 	bge.w	80030de <RI_GetRegCommandParser+0x4f6>
    *tempdestString = *tempsrcString;
 8002e46:	f80c 1b01 	strb.w	r1, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002e4a:	f910 1f01 	ldrsb.w	r1, [r0, #1]!
 8002e4e:	eb0c 0302 	add.w	r3, ip, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2900      	cmp	r1, #0
 8002e56:	d1f3      	bne.n	8002e40 <RI_GetRegCommandParser+0x258>
 8002e58:	e73b      	b.n	8002cd2 <RI_GetRegCommandParser+0xea>
 8002e5a:	2be8      	cmp	r3, #232	; 0xe8
 8002e5c:	d1c3      	bne.n	8002de6 <RI_GetRegCommandParser+0x1fe>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002e5e:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 8002e60:	2c0f      	cmp	r4, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002e62:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002e64:	f67f af0d 	bls.w	8002c82 <RI_GetRegCommandParser+0x9a>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8002e68:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <RI_GetRegCommandParser+0x38c>)
        if (freeSpace >= 2U)
 8002e6a:	b2a4      	uxth	r4, r4
 8002e6c:	e1b1      	b.n	80031d2 <RI_GetRegCommandParser+0x5ea>
 8002e6e:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8002e72:	f000 8183 	beq.w	800317c <RI_GetRegCommandParser+0x594>
 8002e76:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8002e7a:	d114      	bne.n	8002ea6 <RI_GetRegCommandParser+0x2be>
            *rawSize = 4;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	8033      	strh	r3, [r6, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002e80:	4650      	mov	r0, sl
 8002e82:	f7fe fbdf 	bl	8001644 <MCI_GetIqdref>
 8002e86:	8070      	strh	r0, [r6, #2]
 8002e88:	9004      	str	r0, [sp, #16]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002e8a:	4650      	mov	r0, sl
 8002e8c:	f7fe fbda 	bl	8001644 <MCI_GetIqdref>
 8002e90:	9003      	str	r0, [sp, #12]
 8002e92:	f3c0 400f 	ubfx	r0, r0, #16, #16
        if (freeSpace >= 2U)
 8002e96:	b2a4      	uxth	r4, r4
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002e98:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 8002e9a:	8833      	ldrh	r3, [r6, #0]
        pHandle->txLength += size;
 8002e9c:	89f9      	ldrh	r1, [r7, #14]
        *size = (*rawSize) + 2U;
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	b29b      	uxth	r3, r3
        txData = txData+size;
 8002ea2:	4618      	mov	r0, r3
        break;
 8002ea4:	e71b      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 8002ea6:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8002eaa:	d19c      	bne.n	8002de6 <RI_GetRegCommandParser+0x1fe>
            *rawSize = 4;
 8002eac:	2304      	movs	r3, #4
 8002eae:	8033      	strh	r3, [r6, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8002eb0:	4650      	mov	r0, sl
 8002eb2:	f7fe fb87 	bl	80015c4 <MCI_GetLastRampFinalTorque>
 8002eb6:	8070      	strh	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002eb8:	4650      	mov	r0, sl
 8002eba:	f7fe fb87 	bl	80015cc <MCI_GetLastRampFinalDuration>
        if (freeSpace >= 2U)
 8002ebe:	b2a4      	uxth	r4, r4
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002ec0:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 8002ec2:	e7ea      	b.n	8002e9a <RI_GetRegCommandParser+0x2b2>
 8002ec4:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8002ec8:	d18d      	bne.n	8002de6 <RI_GetRegCommandParser+0x1fe>
 8002eca:	2002      	movs	r0, #2
 8002ecc:	4603      	mov	r3, r0
 8002ece:	e706      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 8002ed0:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8002ed4:	f000 81fe 	beq.w	80032d4 <RI_GetRegCommandParser+0x6ec>
 8002ed8:	d963      	bls.n	8002fa2 <RI_GetRegCommandParser+0x3ba>
 8002eda:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8002ede:	f000 823c 	beq.w	800335a <RI_GetRegCommandParser+0x772>
 8002ee2:	d951      	bls.n	8002f88 <RI_GetRegCommandParser+0x3a0>
 8002ee4:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8002ee8:	d1ec      	bne.n	8002ec4 <RI_GetRegCommandParser+0x2dc>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 8002eea:	4820      	ldr	r0, [pc, #128]	; (8002f6c <RI_GetRegCommandParser+0x384>)
 8002eec:	f007 f810 	bl	8009f10 <STO_PLL_GetEstimatedBemf>
 8002ef0:	9005      	str	r0, [sp, #20]
 8002ef2:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002ef6:	8030      	strh	r0, [r6, #0]
              break;
 8002ef8:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8002efa:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8002efc:	4603      	mov	r3, r0
              break;
 8002efe:	e6ee      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 8002f00:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8002f04:	4293      	cmp	r3, r2
 8002f06:	f000 81ed 	beq.w	80032e4 <RI_GetRegCommandParser+0x6fc>
 8002f0a:	f241 6210 	movw	r2, #5648	; 0x1610
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	f47f af69 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <RI_GetRegCommandParser+0x390>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	f005 fa22 	bl	8008360 <PID_GetKIDivisorPOW2>
 8002f1c:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8002f1e:	2002      	movs	r0, #2
 8002f20:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8002f22:	4603      	mov	r3, r0
 8002f24:	e6db      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 8002f26:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	f000 824f 	beq.w	80033ce <RI_GetRegCommandParser+0x7e6>
 8002f30:	d90b      	bls.n	8002f4a <RI_GetRegCommandParser+0x362>
 8002f32:	f241 5210 	movw	r2, #5392	; 0x1510
 8002f36:	4293      	cmp	r3, r2
 8002f38:	f000 8247 	beq.w	80033ca <RI_GetRegCommandParser+0x7e2>
 8002f3c:	f241 5250 	movw	r2, #5456	; 0x1550
 8002f40:	4293      	cmp	r3, r2
 8002f42:	f47f af50 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <RI_GetRegCommandParser+0x394>)
 8002f48:	e7e5      	b.n	8002f16 <RI_GetRegCommandParser+0x32e>
 8002f4a:	f241 4250 	movw	r2, #5200	; 0x1450
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	f000 8239 	beq.w	80033c6 <RI_GetRegCommandParser+0x7de>
 8002f54:	f241 4290 	movw	r2, #5264	; 0x1490
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	f47f af44 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8002f5e:	4808      	ldr	r0, [pc, #32]	; (8002f80 <RI_GetRegCommandParser+0x398>)
 8002f60:	e7da      	b.n	8002f18 <RI_GetRegCommandParser+0x330>
 8002f62:	bf00      	nop
 8002f64:	0800a380 	.word	0x0800a380
 8002f68:	20000318 	.word	0x20000318
 8002f6c:	200002e4 	.word	0x200002e4
 8002f70:	200004bc 	.word	0x200004bc
 8002f74:	200004b8 	.word	0x200004b8
 8002f78:	200004a8 	.word	0x200004a8
 8002f7c:	200004a4 	.word	0x200004a4
 8002f80:	20000174 	.word	0x20000174
 8002f84:	200009d0 	.word	0x200009d0
 8002f88:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8002f8c:	f000 8234 	beq.w	80033f8 <RI_GetRegCommandParser+0x810>
 8002f90:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8002f94:	f47f af27 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 8002f98:	48b2      	ldr	r0, [pc, #712]	; (8003264 <RI_GetRegCommandParser+0x67c>)
 8002f9a:	f006 ffc5 	bl	8009f28 <STO_PLL_GetEstimatedCurrent>
 8002f9e:	9007      	str	r0, [sp, #28]
 8002fa0:	e7a7      	b.n	8002ef2 <RI_GetRegCommandParser+0x30a>
 8002fa2:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002fa6:	f000 821e 	beq.w	80033e6 <RI_GetRegCommandParser+0x7fe>
 8002faa:	d953      	bls.n	8003054 <RI_GetRegCommandParser+0x46c>
 8002fac:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8002fb0:	f000 8214 	beq.w	80033dc <RI_GetRegCommandParser+0x7f4>
 8002fb4:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8002fb8:	f47f af15 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8002fbc:	48a9      	ldr	r0, [pc, #676]	; (8003264 <RI_GetRegCommandParser+0x67c>)
 8002fbe:	f006 fc17 	bl	80097f0 <SPD_GetElAngle>
 8002fc2:	8030      	strh	r0, [r6, #0]
              break;
 8002fc4:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8002fc6:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8002fc8:	4603      	mov	r3, r0
              break;
 8002fca:	e688      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 8002fcc:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002fd0:	f000 81ff 	beq.w	80033d2 <RI_GetRegCommandParser+0x7ea>
 8002fd4:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002fd8:	f47f af05 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8002fdc:	4650      	mov	r0, sl
 8002fde:	f7fe fb23 	bl	8001628 <MCI_GetIqd>
 8002fe2:	8030      	strh	r0, [r6, #0]
 8002fe4:	9010      	str	r0, [sp, #64]	; 0x40
              break;
 8002fe6:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8002fe8:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8002fea:	4603      	mov	r3, r0
              break;
 8002fec:	e677      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 8002fee:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8002ff2:	f000 81de 	beq.w	80033b2 <RI_GetRegCommandParser+0x7ca>
 8002ff6:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8002ffa:	f47f aef4 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8002ffe:	4b9a      	ldr	r3, [pc, #616]	; (8003268 <RI_GetRegCommandParser+0x680>)
 8003000:	6818      	ldr	r0, [r3, #0]
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 8003002:	f005 f99f 	bl	8008344 <PID_GetKI>
 8003006:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003008:	2002      	movs	r0, #2
 800300a:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800300c:	4603      	mov	r3, r0
 800300e:	e666      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 8003010:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8003014:	f000 81d3 	beq.w	80033be <RI_GetRegCommandParser+0x7d6>
 8003018:	d929      	bls.n	800306e <RI_GetRegCommandParser+0x486>
 800301a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800301e:	f000 81cb 	beq.w	80033b8 <RI_GetRegCommandParser+0x7d0>
 8003022:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8003026:	f47f aede 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 800302a:	4b90      	ldr	r3, [pc, #576]	; (800326c <RI_GetRegCommandParser+0x684>)
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	e7e8      	b.n	8003002 <RI_GetRegCommandParser+0x41a>
 8003030:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8003034:	f000 81a2 	beq.w	800337c <RI_GetRegCommandParser+0x794>
 8003038:	d921      	bls.n	800307e <RI_GetRegCommandParser+0x496>
 800303a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800303e:	f000 81af 	beq.w	80033a0 <RI_GetRegCommandParser+0x7b8>
 8003042:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003046:	f47f aece 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdata16 = MCI_GetIab(pMCIN).b;
 800304a:	4650      	mov	r0, sl
 800304c:	f7fe fad0 	bl	80015f0 <MCI_GetIab>
 8003050:	9013      	str	r0, [sp, #76]	; 0x4c
 8003052:	e74e      	b.n	8002ef2 <RI_GetRegCommandParser+0x30a>
 8003054:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8003058:	f000 8199 	beq.w	800338e <RI_GetRegCommandParser+0x7a6>
 800305c:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003060:	f47f aec1 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003064:	4650      	mov	r0, sl
 8003066:	f7fe fafb 	bl	8001660 <MCI_GetVqd>
 800306a:	900b      	str	r0, [sp, #44]	; 0x2c
 800306c:	e741      	b.n	8002ef2 <RI_GetRegCommandParser+0x30a>
 800306e:	2b90      	cmp	r3, #144	; 0x90
 8003070:	f000 81a7 	beq.w	80033c2 <RI_GetRegCommandParser+0x7da>
 8003074:	2bd0      	cmp	r3, #208	; 0xd0
 8003076:	f47f aeb6 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 800307a:	487d      	ldr	r0, [pc, #500]	; (8003270 <RI_GetRegCommandParser+0x688>)
 800307c:	e7c1      	b.n	8003002 <RI_GetRegCommandParser+0x41a>
 800307e:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8003082:	f000 8173 	beq.w	800336c <RI_GetRegCommandParser+0x784>
 8003086:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 800308a:	f47f aeac 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 800308e:	4879      	ldr	r0, [pc, #484]	; (8003274 <RI_GetRegCommandParser+0x68c>)
 8003090:	f004 fbb0 	bl	80077f4 <VBS_GetAvBusVoltage_V>
 8003094:	8030      	strh	r0, [r6, #0]
              break;
 8003096:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003098:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800309a:	4603      	mov	r3, r0
              break;
 800309c:	e61f      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 800309e:	2b18      	cmp	r3, #24
 80030a0:	f47f aea1 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80030a4:	4650      	mov	r0, sl
 80030a6:	f7fe fa5d 	bl	8001564 <MCI_GetFaultState>
 80030aa:	6030      	str	r0, [r6, #0]
        pHandle->txLength += size;
 80030ac:	2004      	movs	r0, #4
 80030ae:	89f9      	ldrh	r1, [r7, #14]
          *size = 4;
 80030b0:	4603      	mov	r3, r0
 80030b2:	e614      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
 80030b4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80030b8:	f000 80c0 	beq.w	800323c <RI_GetRegCommandParser+0x654>
 80030bc:	f641 3258 	movw	r2, #7000	; 0x1b58
 80030c0:	4293      	cmp	r3, r2
 80030c2:	f47f ae90 	bne.w	8002de6 <RI_GetRegCommandParser+0x1fe>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 80030c6:	4b6c      	ldr	r3, [pc, #432]	; (8003278 <RI_GetRegCommandParser+0x690>)
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	f005 f9d3 	bl	8008474 <PQD_GetAvrgElMotorPowerW>
 80030ce:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 80030d2:	9b01      	ldr	r3, [sp, #4]
 80030d4:	6033      	str	r3, [r6, #0]
        pHandle->txLength += size;
 80030d6:	2004      	movs	r0, #4
 80030d8:	89f9      	ldrh	r1, [r7, #14]
          *size = 4;
 80030da:	4603      	mov	r3, r0
 80030dc:	e5ff      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
    retVal = MCP_ERROR_STRING_FORMAT;
 80030de:	2006      	movs	r0, #6
 80030e0:	e5b4      	b.n	8002c4c <RI_GetRegCommandParser+0x64>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 80030e2:	4b66      	ldr	r3, [pc, #408]	; (800327c <RI_GetRegCommandParser+0x694>)
 80030e4:	6818      	ldr	r0, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80030e6:	f990 1000 	ldrsb.w	r1, [r0]
 80030ea:	2900      	cmp	r1, #0
 80030ec:	d042      	beq.n	8003174 <RI_GetRegCommandParser+0x58c>
 80030ee:	2c01      	cmp	r4, #1
 80030f0:	ddf5      	ble.n	80030de <RI_GetRegCommandParser+0x4f6>
 80030f2:	46b4      	mov	ip, r6
 80030f4:	f1c6 0201 	rsb	r2, r6, #1
 80030f8:	e001      	b.n	80030fe <RI_GetRegCommandParser+0x516>
 80030fa:	42a3      	cmp	r3, r4
 80030fc:	daef      	bge.n	80030de <RI_GetRegCommandParser+0x4f6>
    *tempdestString = *tempsrcString;
 80030fe:	f80c 1b01 	strb.w	r1, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003102:	f910 1f01 	ldrsb.w	r1, [r0, #1]!
 8003106:	eb0c 0302 	add.w	r3, ip, r2
 800310a:	b29b      	uxth	r3, r3
 800310c:	2900      	cmp	r1, #0
 800310e:	d1f4      	bne.n	80030fa <RI_GetRegCommandParser+0x512>
 8003110:	e5df      	b.n	8002cd2 <RI_GetRegCommandParser+0xea>
 8003112:	485b      	ldr	r0, [pc, #364]	; (8003280 <RI_GetRegCommandParser+0x698>)
 8003114:	f990 1000 	ldrsb.w	r1, [r0]
 8003118:	b361      	cbz	r1, 8003174 <RI_GetRegCommandParser+0x58c>
 800311a:	2c01      	cmp	r4, #1
 800311c:	dddf      	ble.n	80030de <RI_GetRegCommandParser+0x4f6>
 800311e:	46b4      	mov	ip, r6
 8003120:	f1c6 0201 	rsb	r2, r6, #1
 8003124:	e001      	b.n	800312a <RI_GetRegCommandParser+0x542>
 8003126:	42a3      	cmp	r3, r4
 8003128:	dad9      	bge.n	80030de <RI_GetRegCommandParser+0x4f6>
    *tempdestString = *tempsrcString;
 800312a:	f80c 1b01 	strb.w	r1, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800312e:	f910 1f01 	ldrsb.w	r1, [r0, #1]!
 8003132:	eb0c 0302 	add.w	r3, ip, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	2900      	cmp	r1, #0
 800313a:	d1f4      	bne.n	8003126 <RI_GetRegCommandParser+0x53e>
 800313c:	e5c9      	b.n	8002cd2 <RI_GetRegCommandParser+0xea>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 800313e:	4650      	mov	r0, sl
 8003140:	f7fe f9c2 	bl	80014c8 <MCI_GetSTMState>
 8003144:	7030      	strb	r0, [r6, #0]
        if (freeSpace >= 2U)
 8003146:	2001      	movs	r0, #1
        pHandle->txLength += size;
 8003148:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 800314a:	b2a4      	uxth	r4, r4
          *size = 1;
 800314c:	4603      	mov	r3, r0
 800314e:	e5c6      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 8003150:	484c      	ldr	r0, [pc, #304]	; (8003284 <RI_GetRegCommandParser+0x69c>)
 8003152:	f006 fb39 	bl	80097c8 <RUC_GetNumberOfPhases>
 8003156:	7030      	strb	r0, [r6, #0]
              break;
 8003158:	2001      	movs	r0, #1
        pHandle->txLength += size;
 800315a:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 800315c:	b2a4      	uxth	r4, r4
          *size = 1;
 800315e:	4603      	mov	r3, r0
              break;
 8003160:	e5bd      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003162:	4650      	mov	r0, sl
 8003164:	f7fe fa04 	bl	8001570 <MCI_GetControlMode>
 8003168:	7030      	strb	r0, [r6, #0]
              break;
 800316a:	2001      	movs	r0, #1
        pHandle->txLength += size;
 800316c:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 800316e:	b2a4      	uxth	r4, r4
          *size = 1;
 8003170:	4603      	mov	r3, r0
              break;
 8003172:	e5b4      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003174:	2001      	movs	r0, #1
 8003176:	46b4      	mov	ip, r6
  *size= 1U ; /* /0 is the min String size */
 8003178:	4603      	mov	r3, r0
 800317a:	e5ab      	b.n	8002cd4 <RI_GetRegCommandParser+0xec>
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 800317c:	2328      	movs	r3, #40	; 0x28
            if (((*rawSize) + 2U) > freeSpace)
 800317e:	2c29      	cmp	r4, #41	; 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003180:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003182:	f67f ad7e 	bls.w	8002c82 <RI_GetRegCommandParser+0x9a>
 8003186:	f04f 0b00 	mov.w	fp, #0
 800318a:	9401      	str	r4, [sp, #4]
 800318c:	465c      	mov	r4, fp
 800318e:	46b3      	mov	fp, r6
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8003190:	b2e1      	uxtb	r1, r4
 8003192:	aa15      	add	r2, sp, #84	; 0x54
 8003194:	483b      	ldr	r0, [pc, #236]	; (8003284 <RI_GetRegCommandParser+0x69c>)
 8003196:	f006 fb1b 	bl	80097d0 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800319a:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 800319e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80031a2:	0052      	lsls	r2, r2, #1
 80031a4:	f8cb 2002 	str.w	r2, [fp, #2]
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80031a8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 80031ac:	f8ab 2006 	strh.w	r2, [fp, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80031b0:	3401      	adds	r4, #1
                *durationms  = revUpPhase.hDurationms;
 80031b2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80031b6:	f82b 2f08 	strh.w	r2, [fp, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80031ba:	2c05      	cmp	r4, #5
 80031bc:	d1e8      	bne.n	8003190 <RI_GetRegCommandParser+0x5a8>
        if (freeSpace >= 2U)
 80031be:	9c01      	ldr	r4, [sp, #4]
 80031c0:	b2a4      	uxth	r4, r4
 80031c2:	e66a      	b.n	8002e9a <RI_GetRegCommandParser+0x2b2>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 80031c4:	230e      	movs	r3, #14
            if ((*rawSize) +2  > freeSpace)
 80031c6:	2c0f      	cmp	r4, #15
            *rawSize = sizeof(ApplicationConfig_reg_t);
 80031c8:	8033      	strh	r3, [r6, #0]
            if ((*rawSize) +2  > freeSpace)
 80031ca:	f77f ad5a 	ble.w	8002c82 <RI_GetRegCommandParser+0x9a>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 80031ce:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <RI_GetRegCommandParser+0x6a0>)
        if (freeSpace >= 2U)
 80031d0:	b2a4      	uxth	r4, r4
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	f8d3 c000 	ldr.w	ip, [r3]
 80031da:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80031de:	f8c2 e008 	str.w	lr, [r2, #8]
 80031e2:	f8c2 c000 	str.w	ip, [r2]
 80031e6:	6051      	str	r1, [r2, #4]
 80031e8:	899b      	ldrh	r3, [r3, #12]
 80031ea:	8193      	strh	r3, [r2, #12]
        if (freeSpace >= 2U)
 80031ec:	2010      	movs	r0, #16
        pHandle->txLength += size;
 80031ee:	89f9      	ldrh	r1, [r7, #14]
        *size = (*rawSize) + 2U;
 80031f0:	4603      	mov	r3, r0
 80031f2:	e574      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80031f4:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 80031f6:	2c0b      	cmp	r4, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80031f8:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80031fa:	f67f ad42 	bls.w	8002c82 <RI_GetRegCommandParser+0x9a>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <RI_GetRegCommandParser+0x6a4>)
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	6011      	str	r1, [r2, #0]
 8003204:	6859      	ldr	r1, [r3, #4]
 8003206:	891b      	ldrh	r3, [r3, #8]
 8003208:	8113      	strh	r3, [r2, #8]
        if (freeSpace >= 2U)
 800320a:	200c      	movs	r0, #12
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800320c:	6051      	str	r1, [r2, #4]
        pHandle->txLength += size;
 800320e:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 8003210:	b2a4      	uxth	r4, r4
        *size = (*rawSize) + 2U;
 8003212:	4603      	mov	r3, r0
 8003214:	e563      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003216:	4650      	mov	r0, sl
 8003218:	f7fe f9d0 	bl	80015bc <MCI_GetLastRampFinalSpeed>
 800321c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003220:	0040      	lsls	r0, r0, #1
 8003222:	f8c6 0002 	str.w	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003226:	4650      	mov	r0, sl
 8003228:	f7fe f9d0 	bl	80015cc <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 800322c:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800322e:	80f0      	strh	r0, [r6, #6]
            *rawSize = 6;
 8003230:	8033      	strh	r3, [r6, #0]
        if (freeSpace >= 2U)
 8003232:	2008      	movs	r0, #8
        pHandle->txLength += size;
 8003234:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 8003236:	b2a4      	uxth	r4, r4
        *size = (*rawSize) + 2U;
 8003238:	4603      	mov	r3, r0
 800323a:	e550      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 800323c:	4809      	ldr	r0, [pc, #36]	; (8003264 <RI_GetRegCommandParser+0x67c>)
 800323e:	f006 fea1 	bl	8009f84 <STO_PLL_GetObservedBemfLevel>
 8003242:	6030      	str	r0, [r6, #0]
        pHandle->txLength += size;
 8003244:	2004      	movs	r0, #4
 8003246:	89f9      	ldrh	r1, [r7, #14]
          *size = 4;
 8003248:	4603      	mov	r3, r0
 800324a:	e548      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <RI_GetRegCommandParser+0x67c>)
 800324e:	f006 fe95 	bl	8009f7c <STO_PLL_GetEstimatedBemfLevel>
 8003252:	6030      	str	r0, [r6, #0]
        pHandle->txLength += size;
 8003254:	2004      	movs	r0, #4
 8003256:	89f9      	ldrh	r1, [r7, #14]
          *size = 4;
 8003258:	4603      	mov	r3, r0
 800325a:	e540      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800325c:	4650      	mov	r0, sl
 800325e:	f7fe f9bb 	bl	80015d8 <MCI_GetAvrgMecSpeedUnit>
 8003262:	e5d4      	b.n	8002e0e <RI_GetRegCommandParser+0x226>
 8003264:	200002e4 	.word	0x200002e4
 8003268:	200004a4 	.word	0x200004a4
 800326c:	200004a8 	.word	0x200004a8
 8003270:	20000174 	.word	0x20000174
 8003274:	20000000 	.word	0x20000000
 8003278:	200004a0 	.word	0x200004a0
 800327c:	200004c0 	.word	0x200004c0
 8003280:	0800a390 	.word	0x0800a390
 8003284:	20000258 	.word	0x20000258
 8003288:	200004b4 	.word	0x200004b4
 800328c:	0800a410 	.word	0x0800a410
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8003290:	4b5f      	ldr	r3, [pc, #380]	; (8003410 <RI_GetRegCommandParser+0x828>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 8003298:	f8d3 c000 	ldr.w	ip, [r3]
 800329c:	6858      	ldr	r0, [r3, #4]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80032a4:	f8c2 e00c 	str.w	lr, [r2, #12]
 80032a8:	3310      	adds	r3, #16
 80032aa:	455b      	cmp	r3, fp
 80032ac:	f8c2 c000 	str.w	ip, [r2]
 80032b0:	6050      	str	r0, [r2, #4]
 80032b2:	6091      	str	r1, [r2, #8]
 80032b4:	f102 0210 	add.w	r2, r2, #16
 80032b8:	d1ee      	bne.n	8003298 <RI_GetRegCommandParser+0x6b0>
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	6093      	str	r3, [r2, #8]
 80032c2:	6010      	str	r0, [r2, #0]
 80032c4:	6051      	str	r1, [r2, #4]
        if (freeSpace >= 2U)
 80032c6:	203e      	movs	r0, #62	; 0x3e
        pHandle->txLength += size;
 80032c8:	89f9      	ldrh	r1, [r7, #14]
        if (freeSpace >= 2U)
 80032ca:	b2a4      	uxth	r4, r4
        *size = (*rawSize) + 2U;
 80032cc:	4603      	mov	r3, r0
 80032ce:	e506      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
  uint8_t retVal = MCP_CMD_NOK;
 80032d0:	2001      	movs	r0, #1
 80032d2:	e4bb      	b.n	8002c4c <RI_GetRegCommandParser+0x64>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 80032d4:	484f      	ldr	r0, [pc, #316]	; (8003414 <RI_GetRegCommandParser+0x82c>)
 80032d6:	f006 fac5 	bl	8009864 <SPD_GetS16Speed>
 80032da:	8030      	strh	r0, [r6, #0]
              break;
 80032dc:	2002      	movs	r0, #2
        pHandle->txLength += size;
 80032de:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 80032e0:	4603      	mov	r3, r0
              break;
 80032e2:	e4fc      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 80032e4:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <RI_GetRegCommandParser+0x830>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	e52d      	b.n	8002d46 <RI_GetRegCommandParser+0x15e>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80032ea:	4650      	mov	r0, sl
 80032ec:	f7fe f9aa 	bl	8001644 <MCI_GetIqdref>
 80032f0:	900d      	str	r0, [sp, #52]	; 0x34
 80032f2:	e5fe      	b.n	8002ef2 <RI_GetRegCommandParser+0x30a>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 80032f4:	4b48      	ldr	r3, [pc, #288]	; (8003418 <RI_GetRegCommandParser+0x830>)
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	f005 f852 	bl	80083a0 <PID_GetKDDivisorPOW2>
 80032fc:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 80032fe:	2002      	movs	r0, #2
 8003300:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003302:	4603      	mov	r3, r0
 8003304:	e4eb      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8003306:	4b45      	ldr	r3, [pc, #276]	; (800341c <RI_GetRegCommandParser+0x834>)
 8003308:	e7f5      	b.n	80032f6 <RI_GetRegCommandParser+0x70e>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800330a:	4842      	ldr	r0, [pc, #264]	; (8003414 <RI_GetRegCommandParser+0x82c>)
 800330c:	f10d 010a 	add.w	r1, sp, #10
 8003310:	aa15      	add	r2, sp, #84	; 0x54
 8003312:	f006 fe1d 	bl	8009f50 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8003316:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800331a:	8033      	strh	r3, [r6, #0]
        pHandle->txLength += size;
 800331c:	2002      	movs	r0, #2
 800331e:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003320:	4603      	mov	r3, r0
 8003322:	e4dc      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003324:	4b3d      	ldr	r3, [pc, #244]	; (800341c <RI_GetRegCommandParser+0x834>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	f005 f836 	bl	8008398 <PID_GetKD>
 800332c:	8030      	strh	r0, [r6, #0]
              break;
 800332e:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003330:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003332:	4603      	mov	r3, r0
              break;
 8003334:	e4d3      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <RI_GetRegCommandParser+0x830>)
 8003338:	e7f5      	b.n	8003326 <RI_GetRegCommandParser+0x73e>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800333a:	4650      	mov	r0, sl
 800333c:	f7fe f974 	bl	8001628 <MCI_GetIqd>
 8003340:	900f      	str	r0, [sp, #60]	; 0x3c
 8003342:	e5d6      	b.n	8002ef2 <RI_GetRegCommandParser+0x30a>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003344:	4650      	mov	r0, sl
 8003346:	f7fe f961 	bl	800160c <MCI_GetIalphabeta>
 800334a:	8030      	strh	r0, [r6, #0]
 800334c:	9012      	str	r0, [sp, #72]	; 0x48
              break;
 800334e:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003350:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003352:	4603      	mov	r3, r0
              break;
 8003354:	e4c3      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 8003356:	4832      	ldr	r0, [pc, #200]	; (8003420 <RI_GetRegCommandParser+0x838>)
 8003358:	e653      	b.n	8003002 <RI_GetRegCommandParser+0x41a>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 800335a:	482e      	ldr	r0, [pc, #184]	; (8003414 <RI_GetRegCommandParser+0x82c>)
 800335c:	f006 fdd8 	bl	8009f10 <STO_PLL_GetEstimatedBemf>
 8003360:	8030      	strh	r0, [r6, #0]
 8003362:	9006      	str	r0, [sp, #24]
              break;
 8003364:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003366:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003368:	4603      	mov	r3, r0
              break;
 800336a:	e4b8      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 800336c:	482c      	ldr	r0, [pc, #176]	; (8003420 <RI_GetRegCommandParser+0x838>)
 800336e:	f004 ffe5 	bl	800833c <PID_GetKP>
 8003372:	8030      	strh	r0, [r6, #0]
        pHandle->txLength += size;
 8003374:	2002      	movs	r0, #2
 8003376:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003378:	4603      	mov	r3, r0
 800337a:	e4b0      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <RI_GetRegCommandParser+0x83c>)
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	f004 ffbe 	bl	8008300 <NTC_GetAvTemp_C>
 8003384:	8030      	strh	r0, [r6, #0]
              break;
 8003386:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003388:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800338a:	4603      	mov	r3, r0
              break;
 800338c:	e4a7      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 800338e:	4650      	mov	r0, sl
 8003390:	f7fe f966 	bl	8001660 <MCI_GetVqd>
 8003394:	8030      	strh	r0, [r6, #0]
 8003396:	900c      	str	r0, [sp, #48]	; 0x30
              break;
 8003398:	2002      	movs	r0, #2
        pHandle->txLength += size;
 800339a:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 800339c:	4603      	mov	r3, r0
              break;
 800339e:	e49e      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80033a0:	4650      	mov	r0, sl
 80033a2:	f7fe f925 	bl	80015f0 <MCI_GetIab>
 80033a6:	8030      	strh	r0, [r6, #0]
 80033a8:	9014      	str	r0, [sp, #80]	; 0x50
              break;
 80033aa:	2002      	movs	r0, #2
        pHandle->txLength += size;
 80033ac:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 80033ae:	4603      	mov	r3, r0
              break;
 80033b0:	e495      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <RI_GetRegCommandParser+0x834>)
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	e7da      	b.n	800336e <RI_GetRegCommandParser+0x786>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 80033b8:	4b17      	ldr	r3, [pc, #92]	; (8003418 <RI_GetRegCommandParser+0x830>)
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	e7d7      	b.n	800336e <RI_GetRegCommandParser+0x786>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 80033be:	481a      	ldr	r0, [pc, #104]	; (8003428 <RI_GetRegCommandParser+0x840>)
 80033c0:	e7b2      	b.n	8003328 <RI_GetRegCommandParser+0x740>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 80033c2:	4819      	ldr	r0, [pc, #100]	; (8003428 <RI_GetRegCommandParser+0x840>)
 80033c4:	e7d3      	b.n	800336e <RI_GetRegCommandParser+0x786>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80033c6:	4818      	ldr	r0, [pc, #96]	; (8003428 <RI_GetRegCommandParser+0x840>)
 80033c8:	e4bd      	b.n	8002d46 <RI_GetRegCommandParser+0x15e>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <RI_GetRegCommandParser+0x834>)
 80033cc:	e78b      	b.n	80032e6 <RI_GetRegCommandParser+0x6fe>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 80033ce:	4816      	ldr	r0, [pc, #88]	; (8003428 <RI_GetRegCommandParser+0x840>)
 80033d0:	e792      	b.n	80032f8 <RI_GetRegCommandParser+0x710>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80033d2:	4650      	mov	r0, sl
 80033d4:	f7fe f91a 	bl	800160c <MCI_GetIalphabeta>
 80033d8:	9011      	str	r0, [sp, #68]	; 0x44
 80033da:	e58a      	b.n	8002ef2 <RI_GetRegCommandParser+0x30a>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80033dc:	4650      	mov	r0, sl
 80033de:	f7fe f94d 	bl	800167c <MCI_GetValphabeta>
 80033e2:	9009      	str	r0, [sp, #36]	; 0x24
 80033e4:	e585      	b.n	8002ef2 <RI_GetRegCommandParser+0x30a>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80033e6:	4650      	mov	r0, sl
 80033e8:	f7fe f948 	bl	800167c <MCI_GetValphabeta>
 80033ec:	8030      	strh	r0, [r6, #0]
 80033ee:	900a      	str	r0, [sp, #40]	; 0x28
              break;
 80033f0:	2002      	movs	r0, #2
        pHandle->txLength += size;
 80033f2:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 80033f4:	4603      	mov	r3, r0
              break;
 80033f6:	e472      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 80033f8:	4806      	ldr	r0, [pc, #24]	; (8003414 <RI_GetRegCommandParser+0x82c>)
 80033fa:	f006 fd95 	bl	8009f28 <STO_PLL_GetEstimatedCurrent>
 80033fe:	8030      	strh	r0, [r6, #0]
 8003400:	9008      	str	r0, [sp, #32]
              break;
 8003402:	2002      	movs	r0, #2
        pHandle->txLength += size;
 8003404:	89f9      	ldrh	r1, [r7, #14]
          *size = 2;
 8003406:	4603      	mov	r3, r0
              break;
 8003408:	e469      	b.n	8002cde <RI_GetRegCommandParser+0xf6>
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <RI_GetRegCommandParser+0x838>)
 800340c:	e584      	b.n	8002f18 <RI_GetRegCommandParser+0x330>
 800340e:	bf00      	nop
 8003410:	200004bc 	.word	0x200004bc
 8003414:	200002e4 	.word	0x200002e4
 8003418:	200004a8 	.word	0x200004a8
 800341c:	200004a4 	.word	0x200004a4
 8003420:	20000318 	.word	0x20000318
 8003424:	200004b0 	.word	0x200004b0
 8003428:	20000174 	.word	0x20000174

0800342c <RI_GetIDSize>:

  return (retVal);
}
uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 800342c:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003430:	3808      	subs	r0, #8
 8003432:	b2c0      	uxtb	r0, r0
 8003434:	2810      	cmp	r0, #16
 8003436:	bf9a      	itte	ls
 8003438:	4b01      	ldrls	r3, [pc, #4]	; (8003440 <RI_GetIDSize+0x14>)
 800343a:	5c18      	ldrbls	r0, [r3, r0]
 800343c:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800343e:	4770      	bx	lr
 8003440:	0800a588 	.word	0x0800a588

08003444 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003444:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8003448:	2b10      	cmp	r3, #16
 800344a:	d003      	beq.n	8003454 <RI_GetPtrReg+0x10>
 800344c:	4a43      	ldr	r2, [pc, #268]	; (800355c <RI_GetPtrReg+0x118>)
            break;
          }
          default:
          {
            *dataPtr = &nullData16;
            retVal = MCP_ERROR_UNKNOWN_REG;
 800344e:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003450:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 8003452:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003454:	f020 0007 	bic.w	r0, r0, #7
 8003458:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 800345c:	b283      	uxth	r3, r0
 800345e:	d073      	beq.n	8003548 <RI_GetPtrReg+0x104>
 8003460:	d80f      	bhi.n	8003482 <RI_GetPtrReg+0x3e>
 8003462:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003466:	d074      	beq.n	8003552 <RI_GetPtrReg+0x10e>
 8003468:	d824      	bhi.n	80034b4 <RI_GetPtrReg+0x70>
 800346a:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800346e:	d058      	beq.n	8003522 <RI_GetPtrReg+0xde>
 8003470:	d915      	bls.n	800349e <RI_GetPtrReg+0x5a>
 8003472:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003476:	d1e9      	bne.n	800344c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003478:	4b39      	ldr	r3, [pc, #228]	; (8003560 <RI_GetPtrReg+0x11c>)
 800347a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800347c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800347e:	3206      	adds	r2, #6
            break;
 8003480:	e7e6      	b.n	8003450 <RI_GetPtrReg+0xc>
 8003482:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8003486:	d049      	beq.n	800351c <RI_GetPtrReg+0xd8>
 8003488:	d929      	bls.n	80034de <RI_GetPtrReg+0x9a>
 800348a:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 800348e:	d041      	beq.n	8003514 <RI_GetPtrReg+0xd0>
 8003490:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8003494:	d119      	bne.n	80034ca <RI_GetPtrReg+0x86>
 8003496:	4a33      	ldr	r2, [pc, #204]	; (8003564 <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003498:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800349a:	2000      	movs	r0, #0
}
 800349c:	4770      	bx	lr
 800349e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80034a2:	d04d      	beq.n	8003540 <RI_GetPtrReg+0xfc>
 80034a4:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80034a8:	d1d0      	bne.n	800344c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80034aa:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <RI_GetPtrReg+0x11c>)
 80034ac:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80034ae:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80034b0:	3202      	adds	r2, #2
            break;
 80034b2:	e7cd      	b.n	8003450 <RI_GetPtrReg+0xc>
 80034b4:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80034b8:	d038      	beq.n	800352c <RI_GetPtrReg+0xe8>
 80034ba:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 80034be:	d119      	bne.n	80034f4 <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <RI_GetPtrReg+0x11c>)
 80034c2:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80034c4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80034c6:	3212      	adds	r2, #18
            break;
 80034c8:	e7c2      	b.n	8003450 <RI_GetPtrReg+0xc>
 80034ca:	4827      	ldr	r0, [pc, #156]	; (8003568 <RI_GetPtrReg+0x124>)
 80034cc:	4a23      	ldr	r2, [pc, #140]	; (800355c <RI_GetPtrReg+0x118>)
 80034ce:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 80034d2:	bf0a      	itet	eq
 80034d4:	4602      	moveq	r2, r0
 80034d6:	2005      	movne	r0, #5
 80034d8:	2000      	moveq	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80034da:	600a      	str	r2, [r1, #0]
}
 80034dc:	4770      	bx	lr
 80034de:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 80034e2:	d028      	beq.n	8003536 <RI_GetPtrReg+0xf2>
 80034e4:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80034e8:	d10c      	bne.n	8003504 <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <RI_GetPtrReg+0x11c>)
 80034ec:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80034ee:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80034f0:	321c      	adds	r2, #28
            break;
 80034f2:	e7ad      	b.n	8003450 <RI_GetPtrReg+0xc>
 80034f4:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80034f8:	d1a8      	bne.n	800344c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80034fa:	4b19      	ldr	r3, [pc, #100]	; (8003560 <RI_GetPtrReg+0x11c>)
 80034fc:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80034fe:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003500:	320e      	adds	r2, #14
            break;
 8003502:	e7a5      	b.n	8003450 <RI_GetPtrReg+0xc>
 8003504:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003508:	d1a0      	bne.n	800344c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <RI_GetPtrReg+0x11c>)
 800350c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800350e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003510:	3218      	adds	r2, #24
            break;
 8003512:	e79d      	b.n	8003450 <RI_GetPtrReg+0xc>
 8003514:	4a15      	ldr	r2, [pc, #84]	; (800356c <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003516:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003518:	2000      	movs	r0, #0
}
 800351a:	4770      	bx	lr
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 800351e:	2000      	movs	r0, #0
 8003520:	e796      	b.n	8003450 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <RI_GetPtrReg+0x11c>)
 8003524:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003526:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003528:	3204      	adds	r2, #4
            break;
 800352a:	e791      	b.n	8003450 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <RI_GetPtrReg+0x11c>)
 800352e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003530:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003532:	3210      	adds	r2, #16
            break;
 8003534:	e78c      	b.n	8003450 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <RI_GetPtrReg+0x11c>)
 8003538:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800353a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800353c:	321a      	adds	r2, #26
            break;
 800353e:	e787      	b.n	8003450 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 8003542:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003544:	685a      	ldr	r2, [r3, #4]
             break;
 8003546:	e783      	b.n	8003450 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <RI_GetPtrReg+0x11c>)
 800354a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800354c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800354e:	3216      	adds	r2, #22
            break;
 8003550:	e77e      	b.n	8003450 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003552:	4b03      	ldr	r3, [pc, #12]	; (8003560 <RI_GetPtrReg+0x11c>)
 8003554:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003556:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003558:	320c      	adds	r2, #12
            break;
 800355a:	e779      	b.n	8003450 <RI_GetPtrReg+0xc>
 800355c:	20001bc8 	.word	0x20001bc8
 8003560:	200009d0 	.word	0x200009d0
 8003564:	20000356 	.word	0x20000356
 8003568:	200002f0 	.word	0x200002f0
 800356c:	20000354 	.word	0x20000354
 8003570:	200002e8 	.word	0x200002e8

08003574 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003574:	497e      	ldr	r1, [pc, #504]	; (8003770 <RCM_RegisterRegConv+0x1fc>)
{
 8003576:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003578:	680c      	ldr	r4, [r1, #0]
{
 800357a:	4602      	mov	r2, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800357c:	2c00      	cmp	r4, #0
 800357e:	f000 808f 	beq.w	80036a0 <RCM_RegisterRegConv+0x12c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003582:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003586:	7923      	ldrb	r3, [r4, #4]
 8003588:	459c      	cmp	ip, r3
 800358a:	d026      	beq.n	80035da <RCM_RegisterRegConv+0x66>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800358c:	684b      	ldr	r3, [r1, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80a2 	beq.w	80036d8 <RCM_RegisterRegConv+0x164>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003594:	791c      	ldrb	r4, [r3, #4]
 8003596:	4564      	cmp	r4, ip
  uint8_t handle = 255U;
 8003598:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800359c:	f000 808a 	beq.w	80036b4 <RCM_RegisterRegConv+0x140>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035a0:	688c      	ldr	r4, [r1, #8]
 80035a2:	2c00      	cmp	r4, #0
 80035a4:	f000 80bb 	beq.w	800371e <RCM_RegisterRegConv+0x1aa>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035a8:	7923      	ldrb	r3, [r4, #4]
 80035aa:	4563      	cmp	r3, ip
 80035ac:	f000 808b 	beq.w	80036c6 <RCM_RegisterRegConv+0x152>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80035b0:	68cb      	ldr	r3, [r1, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80bc 	beq.w	8003730 <RCM_RegisterRegConv+0x1bc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80035b8:	791c      	ldrb	r4, [r3, #4]
 80035ba:	4564      	cmp	r4, ip
 80035bc:	f000 8098 	beq.w	80036f0 <RCM_RegisterRegConv+0x17c>
    while (i < RCM_MAX_CONV)
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	f360 0307 	bfi	r3, r0, #0, #8
 80035c8:	f360 230f 	bfi	r3, r0, #8, #8
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80035cc:	2803      	cmp	r0, #3
 80035ce:	461c      	mov	r4, r3
 80035d0:	bf88      	it	hi
 80035d2:	20ff      	movhi	r0, #255	; 0xff
 80035d4:	f240 80c9 	bls.w	800376a <RCM_RegisterRegConv+0x1f6>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 80035d8:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80035da:	6803      	ldr	r3, [r0, #0]
 80035dc:	6820      	ldr	r0, [r4, #0]
 80035de:	4283      	cmp	r3, r0
 80035e0:	d1d4      	bne.n	800358c <RCM_RegisterRegConv+0x18>
    uint8_t i = 0;
 80035e2:	2000      	movs	r0, #0
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80035e4:	4604      	mov	r4, r0
      RCM_handle_array [handle] = regConv;
 80035e6:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80035ea:	4d62      	ldr	r5, [pc, #392]	; (8003774 <RCM_RegisterRegConv+0x200>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ec:	6899      	ldr	r1, [r3, #8]
 80035ee:	2600      	movs	r6, #0
 80035f0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80035f4:	07ce      	lsls	r6, r1, #31
 80035f6:	d422      	bmi.n	800363e <RCM_RegisterRegConv+0xca>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80035f8:	6859      	ldr	r1, [r3, #4]
 80035fa:	f021 0104 	bic.w	r1, r1, #4
 80035fe:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003600:	2104      	movs	r1, #4
 8003602:	6019      	str	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003604:	6859      	ldr	r1, [r3, #4]
 8003606:	f021 0120 	bic.w	r1, r1, #32
 800360a:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800360c:	2120      	movs	r1, #32
 800360e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003610:	6899      	ldr	r1, [r3, #8]
 8003612:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003616:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800361a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800361e:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	2900      	cmp	r1, #0
 8003624:	dbfc      	blt.n	8003620 <RCM_RegisterRegConv+0xac>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	07cd      	lsls	r5, r1, #31
 800362a:	d408      	bmi.n	800363e <RCM_RegisterRegConv+0xca>
  MODIFY_REG(ADCx->CR,
 800362c:	4d52      	ldr	r5, [pc, #328]	; (8003778 <RCM_RegisterRegConv+0x204>)
 800362e:	6899      	ldr	r1, [r3, #8]
 8003630:	4029      	ands	r1, r5
 8003632:	f041 0101 	orr.w	r1, r1, #1
 8003636:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	07c9      	lsls	r1, r1, #31
 800363c:	d5f7      	bpl.n	800362e <RCM_RegisterRegConv+0xba>
      RCM_NoInj_array[handle].enable = false;
 800363e:	4d4f      	ldr	r5, [pc, #316]	; (800377c <RCM_RegisterRegConv+0x208>)
 8003640:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8003644:	0049      	lsls	r1, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 8003646:	eb05 0c01 	add.w	ip, r5, r1
      RCM_NoInj_array[handle].enable = false;
 800364a:	f04f 0e00 	mov.w	lr, #0
 800364e:	f805 e001 	strb.w	lr, [r5, r1]
      RCM_NoInj_array[handle].prev = handle;
 8003652:	f8ac 4004 	strh.w	r4, [ip, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003658:	f021 010f 	bic.w	r1, r1, #15
 800365c:	6319      	str	r1, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800365e:	7914      	ldrb	r4, [r2, #4]
 8003660:	2c09      	cmp	r4, #9
 8003662:	d84e      	bhi.n	8003702 <RCM_RegisterRegConv+0x18e>
 8003664:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8003668:	06a1      	lsls	r1, r4, #26
 800366a:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 800366e:	2501      	movs	r5, #1
 8003670:	fa05 f404 	lsl.w	r4, r5, r4
 8003674:	4321      	orrs	r1, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003676:	0dcc      	lsrs	r4, r1, #23
 8003678:	f103 0514 	add.w	r5, r3, #20
 800367c:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8003680:	6893      	ldr	r3, [r2, #8]
 8003682:	f04f 0e07 	mov.w	lr, #7
 8003686:	f3c1 5204 	ubfx	r2, r1, #20, #5
 800368a:	5929      	ldr	r1, [r5, r4]
 800368c:	fa03 fc02 	lsl.w	ip, r3, r2
 8003690:	fa0e f202 	lsl.w	r2, lr, r2
 8003694:	ea21 0202 	bic.w	r2, r1, r2
 8003698:	ea42 020c 	orr.w	r2, r2, ip
 800369c:	512a      	str	r2, [r5, r4]
}
 800369e:	bd70      	pop	{r4, r5, r6, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036a0:	684b      	ldr	r3, [r1, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d04b      	beq.n	800373e <RCM_RegisterRegConv+0x1ca>
 80036a6:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 80036aa:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036ac:	791c      	ldrb	r4, [r3, #4]
 80036ae:	4564      	cmp	r4, ip
 80036b0:	f47f af76 	bne.w	80035a0 <RCM_RegisterRegConv+0x2c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80036b4:	681c      	ldr	r4, [r3, #0]
 80036b6:	6813      	ldr	r3, [r2, #0]
 80036b8:	429c      	cmp	r4, r3
 80036ba:	f47f af71 	bne.w	80035a0 <RCM_RegisterRegConv+0x2c>
      i++;
 80036be:	2001      	movs	r0, #1
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80036c0:	f240 1401 	movw	r4, #257	; 0x101
 80036c4:	e78f      	b.n	80035e6 <RCM_RegisterRegConv+0x72>
 80036c6:	6824      	ldr	r4, [r4, #0]
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	429c      	cmp	r4, r3
 80036cc:	f47f af70 	bne.w	80035b0 <RCM_RegisterRegConv+0x3c>
      i++;
 80036d0:	2002      	movs	r0, #2
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036d2:	f240 2402 	movw	r4, #514	; 0x202
 80036d6:	e786      	b.n	80035e6 <RCM_RegisterRegConv+0x72>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036d8:	688c      	ldr	r4, [r1, #8]
      i++;
 80036da:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036dc:	2c00      	cmp	r4, #0
 80036de:	f47f af63 	bne.w	80035a8 <RCM_RegisterRegConv+0x34>
 80036e2:	68cb      	ldr	r3, [r1, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d03a      	beq.n	800375e <RCM_RegisterRegConv+0x1ea>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036e8:	791d      	ldrb	r5, [r3, #4]
 80036ea:	7914      	ldrb	r4, [r2, #4]
 80036ec:	42a5      	cmp	r5, r4
 80036ee:	d136      	bne.n	800375e <RCM_RegisterRegConv+0x1ea>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80036f0:	681c      	ldr	r4, [r3, #0]
 80036f2:	6813      	ldr	r3, [r2, #0]
 80036f4:	429c      	cmp	r4, r3
 80036f6:	f47f af63 	bne.w	80035c0 <RCM_RegisterRegConv+0x4c>
      i++;
 80036fa:	2003      	movs	r0, #3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80036fc:	f240 3403 	movw	r4, #771	; 0x303
 8003700:	e771      	b.n	80035e6 <RCM_RegisterRegConv+0x72>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003702:	f06f 011d 	mvn.w	r1, #29
 8003706:	2503      	movs	r5, #3
 8003708:	fb15 1504 	smlabb	r5, r5, r4, r1
 800370c:	2101      	movs	r1, #1
 800370e:	40a1      	lsls	r1, r4
 8003710:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 8003714:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8003718:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800371c:	e7ab      	b.n	8003676 <RCM_RegisterRegConv+0x102>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800371e:	2804      	cmp	r0, #4
 8003720:	d913      	bls.n	800374a <RCM_RegisterRegConv+0x1d6>
 8003722:	68cb      	ldr	r3, [r1, #12]
 8003724:	b113      	cbz	r3, 800372c <RCM_RegisterRegConv+0x1b8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003726:	7918      	ldrb	r0, [r3, #4]
 8003728:	4560      	cmp	r0, ip
 800372a:	d010      	beq.n	800374e <RCM_RegisterRegConv+0x1da>
 800372c:	6813      	ldr	r3, [r2, #0]
 800372e:	e7cf      	b.n	80036d0 <RCM_RegisterRegConv+0x15c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003730:	2804      	cmp	r0, #4
 8003732:	d914      	bls.n	800375e <RCM_RegisterRegConv+0x1ea>
 8003734:	6813      	ldr	r3, [r2, #0]
      i++;
 8003736:	2003      	movs	r0, #3
 8003738:	f240 3403 	movw	r4, #771	; 0x303
 800373c:	e753      	b.n	80035e6 <RCM_RegisterRegConv+0x72>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800373e:	688c      	ldr	r4, [r1, #8]
 8003740:	b11c      	cbz	r4, 800374a <RCM_RegisterRegConv+0x1d6>
 8003742:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8003746:	4618      	mov	r0, r3
 8003748:	e72e      	b.n	80035a8 <RCM_RegisterRegConv+0x34>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800374a:	4620      	mov	r0, r4
 800374c:	e7c9      	b.n	80036e2 <RCM_RegisterRegConv+0x16e>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	6813      	ldr	r3, [r2, #0]
 8003752:	4298      	cmp	r0, r3
 8003754:	d0d1      	beq.n	80036fa <RCM_RegisterRegConv+0x186>
 8003756:	f240 2402 	movw	r4, #514	; 0x202
      i++;
 800375a:	2002      	movs	r0, #2
 800375c:	e743      	b.n	80035e6 <RCM_RegisterRegConv+0x72>
    while (i < RCM_MAX_CONV)
 800375e:	f04f 0400 	mov.w	r4, #0
 8003762:	f360 0407 	bfi	r4, r0, #0, #8
 8003766:	f360 240f 	bfi	r4, r0, #8, #8
 800376a:	6813      	ldr	r3, [r2, #0]
    if (handle < RCM_MAX_CONV)
 800376c:	e73b      	b.n	80035e6 <RCM_RegisterRegConv+0x72>
 800376e:	bf00      	nop
 8003770:	20001c0c 	.word	0x20001c0c
 8003774:	20001bcc 	.word	0x20001bcc
 8003778:	7fffffc0 	.word	0x7fffffc0
 800377c:	20001bec 	.word	0x20001bec

08003780 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003780:	4b5e      	ldr	r3, [pc, #376]	; (80038fc <RCM_ExecRegularConv+0x17c>)
 8003782:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 8003786:	b510      	push	{r4, lr}
  if (false == RCM_NoInj_array [handle].enable)
 8003788:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800378c:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8003790:	2a00      	cmp	r2, #0
 8003792:	d13c      	bne.n	800380e <RCM_ExecRegularConv+0x8e>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8003794:	7819      	ldrb	r1, [r3, #0]
 8003796:	b9a9      	cbnz	r1, 80037c4 <RCM_ExecRegularConv+0x44>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003798:	2204      	movs	r2, #4
      if (true == RCM_NoInj_array [i].enable)
 800379a:	7999      	ldrb	r1, [r3, #6]
 800379c:	2900      	cmp	r1, #0
 800379e:	d07f      	beq.n	80038a0 <RCM_ExecRegularConv+0x120>
      {
        if (RCM_NoInj_array[i].next > handle)
 80037a0:	7ad9      	ldrb	r1, [r3, #11]
 80037a2:	4288      	cmp	r0, r1
 80037a4:	f0c0 809b 	bcc.w	80038de <RCM_ExecRegularConv+0x15e>
      if (true == RCM_NoInj_array [i].enable)
 80037a8:	7b1a      	ldrb	r2, [r3, #12]
 80037aa:	2a00      	cmp	r2, #0
 80037ac:	f000 809a 	beq.w	80038e4 <RCM_ExecRegularConv+0x164>
        if (RCM_NoInj_array[i].next > handle)
 80037b0:	7c59      	ldrb	r1, [r3, #17]
 80037b2:	4288      	cmp	r0, r1
 80037b4:	f0c0 80a0 	bcc.w	80038f8 <RCM_ExecRegularConv+0x178>
      if (true == RCM_NoInj_array [i].enable)
 80037b8:	7c9a      	ldrb	r2, [r3, #18]
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	f040 8096 	bne.w	80038ec <RCM_ExecRegularConv+0x16c>
      }
      else
      {
        /* nothing to do */
      }
      i++;
 80037c0:	2202      	movs	r2, #2
 80037c2:	e074      	b.n	80038ae <RCM_ExecRegularConv+0x12e>
        if (RCM_NoInj_array[i].next > handle)
 80037c4:	7959      	ldrb	r1, [r3, #5]
 80037c6:	4281      	cmp	r1, r0
 80037c8:	d9e7      	bls.n	800379a <RCM_ExecRegularConv+0x1a>
      if (true == RCM_NoInj_array [i].enable)
 80037ca:	4696      	mov	lr, r2
          RCM_NoInj_array[handle].next = formerNext;
 80037cc:	eb0c 0400 	add.w	r4, ip, r0
 80037d0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array[i].next = handle;
 80037d4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array[handle].prev = i;
 80037d8:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array[handle].next = formerNext;
 80037da:	7161      	strb	r1, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80037dc:	4c48      	ldr	r4, [pc, #288]	; (8003900 <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array[formerNext].prev = handle;
 80037de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[i].next = handle;
 80037e2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 80037e6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80037ea:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 80037ec:	f88e 0005 	strb.w	r0, [lr, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 80037f0:	7108      	strb	r0, [r1, #4]
    RCM_NoInj_array[handle].enable = true;
 80037f2:	eb0c 0100 	add.w	r1, ip, r0
 80037f6:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80037fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array[handle].enable = true;
 80037fe:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003802:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003806:	7852      	ldrb	r2, [r2, #1]
 8003808:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 800380a:	bf18      	it	ne
 800380c:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 800380e:	4a3d      	ldr	r2, [pc, #244]	; (8003904 <RCM_ExecRegularConv+0x184>)
 8003810:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8003814:	2a00      	cmp	r2, #0
 8003816:	d133      	bne.n	8003880 <RCM_ExecRegularConv+0x100>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003818:	4a3b      	ldr	r2, [pc, #236]	; (8003908 <RCM_ExecRegularConv+0x188>)
 800381a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800381e:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003820:	6811      	ldr	r1, [r2, #0]
 8003822:	2c09      	cmp	r4, #9
 8003824:	d931      	bls.n	800388a <RCM_ExecRegularConv+0x10a>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003826:	f06f 021d 	mvn.w	r2, #29
 800382a:	f04f 0e03 	mov.w	lr, #3
 800382e:	fb1e 2e04 	smlabb	lr, lr, r4, r2
 8003832:	2201      	movs	r2, #1
 8003834:	40a2      	lsls	r2, r4
 8003836:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 800383a:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800383e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8003842:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8003844:	0d12      	lsrs	r2, r2, #20
 8003846:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 800384a:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 800384e:	4322      	orrs	r2, r4
 8003850:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003852:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003854:	688a      	ldr	r2, [r1, #8]
 8003856:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800385a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800385e:	f042 0204 	orr.w	r2, r2, #4
 8003862:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003864:	680a      	ldr	r2, [r1, #0]
 8003866:	0752      	lsls	r2, r2, #29
 8003868:	d5fc      	bpl.n	8003864 <RCM_ExecRegularConv+0xe4>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 800386a:	eb0c 0200 	add.w	r2, ip, r0
 800386e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003872:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003874:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003876:	4922      	ldr	r1, [pc, #136]	; (8003900 <RCM_ExecRegularConv+0x180>)
 8003878:	7954      	ldrb	r4, [r2, #5]
 800387a:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array[handle].status = valid;
 800387c:	2102      	movs	r1, #2
 800387e:	7051      	strb	r1, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8003880:	4484      	add	ip, r0
 8003882:	eb03 034c 	add.w	r3, r3, ip, lsl #1
  return retVal;
}
 8003886:	8858      	ldrh	r0, [r3, #2]
 8003888:	bd10      	pop	{r4, pc}
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800388a:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800388e:	06a2      	lsls	r2, r4, #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003890:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003894:	f04f 0e01 	mov.w	lr, #1
 8003898:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800389c:	4322      	orrs	r2, r4
 800389e:	e7d0      	b.n	8003842 <RCM_ExecRegularConv+0xc2>
      if (true == RCM_NoInj_array [i].enable)
 80038a0:	7b19      	ldrb	r1, [r3, #12]
 80038a2:	2900      	cmp	r1, #0
 80038a4:	d184      	bne.n	80037b0 <RCM_ExecRegularConv+0x30>
 80038a6:	7c99      	ldrb	r1, [r3, #18]
 80038a8:	bb01      	cbnz	r1, 80038ec <RCM_ExecRegularConv+0x16c>
       if (LastEnable != RCM_MAX_CONV )
 80038aa:	2a04      	cmp	r2, #4
 80038ac:	d013      	beq.n	80038d6 <RCM_ExecRegularConv+0x156>
         formerNext = RCM_NoInj_array[LastEnable].next;
 80038ae:	eb02 0142 	add.w	r1, r2, r2, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 80038b2:	eb0c 0400 	add.w	r4, ip, r0
 80038b6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 80038ba:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 80038be:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 80038c0:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 80038c2:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 80038c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80038c8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80038cc:	4c0c      	ldr	r4, [pc, #48]	; (8003900 <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array[formerNext].prev = handle;
 80038ce:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 80038d0:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80038d2:	7822      	ldrb	r2, [r4, #0]
 80038d4:	e78d      	b.n	80037f2 <RCM_ExecRegularConv+0x72>
         RCM_currentHandle = handle;
 80038d6:	4c0a      	ldr	r4, [pc, #40]	; (8003900 <RCM_ExecRegularConv+0x180>)
 80038d8:	4602      	mov	r2, r0
 80038da:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 80038dc:	e789      	b.n	80037f2 <RCM_ExecRegularConv+0x72>
      i++;
 80038de:	2201      	movs	r2, #1
      if (true == RCM_NoInj_array [i].enable)
 80038e0:	4696      	mov	lr, r2
 80038e2:	e773      	b.n	80037cc <RCM_ExecRegularConv+0x4c>
 80038e4:	7c9a      	ldrb	r2, [r3, #18]
 80038e6:	b90a      	cbnz	r2, 80038ec <RCM_ExecRegularConv+0x16c>
      i++;
 80038e8:	2201      	movs	r2, #1
 80038ea:	e7e0      	b.n	80038ae <RCM_ExecRegularConv+0x12e>
        if (RCM_NoInj_array[i].next > handle)
 80038ec:	7dd9      	ldrb	r1, [r3, #23]
 80038ee:	4281      	cmp	r1, r0
      i++;
 80038f0:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array[i].next > handle)
 80038f4:	d9db      	bls.n	80038ae <RCM_ExecRegularConv+0x12e>
 80038f6:	e768      	b.n	80037ca <RCM_ExecRegularConv+0x4a>
      i++;
 80038f8:	2202      	movs	r2, #2
 80038fa:	e766      	b.n	80037ca <RCM_ExecRegularConv+0x4a>
 80038fc:	20001bec 	.word	0x20001bec
 8003900:	20001c08 	.word	0x20001c08
 8003904:	200001b0 	.word	0x200001b0
 8003908:	20001c0c 	.word	0x20001c0c

0800390c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 800390c:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800390e:	4c12      	ldr	r4, [pc, #72]	; (8003958 <RCM_ExecUserConv+0x4c>)
 8003910:	7823      	ldrb	r3, [r4, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d000      	beq.n	8003918 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8003916:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003918:	4b10      	ldr	r3, [pc, #64]	; (800395c <RCM_ExecUserConv+0x50>)
 800391a:	781d      	ldrb	r5, [r3, #0]
 800391c:	4628      	mov	r0, r5
 800391e:	f7ff ff2f 	bl	8003780 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <RCM_ExecUserConv+0x54>)
 8003924:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8003928:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800392c:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800392e:	785b      	ldrb	r3, [r3, #1]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003930:	8010      	strh	r0, [r2, #0]
 8003932:	4601      	mov	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003934:	b10b      	cbz	r3, 800393a <RCM_ExecUserConv+0x2e>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8003936:	2302      	movs	r3, #2
 8003938:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <RCM_ExecUserConv+0x5c>)
 800393c:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
 8003940:	2e00      	cmp	r6, #0
 8003942:	d0e8      	beq.n	8003916 <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003944:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003948:	4628      	mov	r0, r5
 800394a:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800394c:	2300      	movs	r3, #0
 800394e:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003950:	4633      	mov	r3, r6
}
 8003952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003956:	4718      	bx	r3
 8003958:	20001c05 	.word	0x20001c05
 800395c:	20001c04 	.word	0x20001c04
 8003960:	20001bec 	.word	0x20001bec
 8003964:	20001c06 	.word	0x20001c06
 8003968:	20001bcc 	.word	0x20001bcc

0800396c <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <RCM_ExecNextConv+0x94>)
 800396e:	4825      	ldr	r0, [pc, #148]	; (8003a04 <RCM_ExecNextConv+0x98>)
 8003970:	781a      	ldrb	r2, [r3, #0]
 8003972:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003976:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800397a:	b3a3      	cbz	r3, 80039e6 <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800397c:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <RCM_ExecNextConv+0x9c>)
{
 800397e:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003986:	2404      	movs	r4, #4
 8003988:	600c      	str	r4, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800398a:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 800398e:	f1bc 0f09 	cmp.w	ip, #9
 8003992:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8003996:	d927      	bls.n	80039e8 <RCM_ExecNextConv+0x7c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003998:	f06f 031d 	mvn.w	r3, #29
 800399c:	2403      	movs	r4, #3
 800399e:	fb14 340c 	smlabb	r4, r4, ip, r3
 80039a2:	2301      	movs	r3, #1
 80039a4:	fa03 f30c 	lsl.w	r3, r3, ip
 80039a8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80039ac:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80039b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80039b4:	4496      	add	lr, r2
  MODIFY_REG(*preg,
 80039b6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80039b8:	0d1b      	lsrs	r3, r3, #20
 80039ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80039be:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 80039c2:	4313      	orrs	r3, r2
 80039c4:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80039c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80039c8:	688b      	ldr	r3, [r1, #8]
 80039ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039ce:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 80039d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039d6:	f04f 0c01 	mov.w	ip, #1
 80039da:	f043 0304 	orr.w	r3, r3, #4
 80039de:	608b      	str	r3, [r1, #8]
 80039e0:	f880 c001 	strb.w	ip, [r0, #1]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 80039e4:	bd10      	pop	{r4, pc}
 80039e6:	4770      	bx	lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80039e8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80039ec:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80039f0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80039f4:	2401      	movs	r4, #1
 80039f6:	fa04 f40c 	lsl.w	r4, r4, ip
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80039fa:	4323      	orrs	r3, r4
 80039fc:	e7da      	b.n	80039b4 <RCM_ExecNextConv+0x48>
 80039fe:	bf00      	nop
 8003a00:	20001c08 	.word	0x20001c08
 8003a04:	20001bec 	.word	0x20001bec
 8003a08:	20001c0c 	.word	0x20001c0c

08003a0c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003a0c:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003a0e:	4814      	ldr	r0, [pc, #80]	; (8003a60 <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003a10:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <RCM_ReadOngoingConv+0x58>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003a12:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003a14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a18:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003a1a:	6822      	ldr	r2, [r4, #0]
 8003a1c:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003a20:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8003a24:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <RCM_ReadOngoingConv+0x5c>)
 8003a26:	d008      	beq.n	8003a3a <RCM_ReadOngoingConv+0x2e>
 8003a28:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8003a2c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003a30:	f89c e001 	ldrb.w	lr, [ip, #1]
 8003a34:	f01e 0ffd 	tst.w	lr, #253	; 0xfd
 8003a38:	d105      	bne.n	8003a46 <RCM_ReadOngoingConv+0x3a>
    RCM_NoInj_array[RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003a3a:	440b      	add	r3, r1
 8003a3c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003a40:	7953      	ldrb	r3, [r2, #5]
 8003a42:	7003      	strb	r3, [r0, #0]
}
 8003a44:	bd10      	pop	{r4, pc}
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003a46:	440b      	add	r3, r1
 8003a48:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003a4c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8003a4e:	7953      	ldrb	r3, [r2, #5]
 8003a50:	f8ac 4002 	strh.w	r4, [ip, #2]
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003a54:	2402      	movs	r4, #2
 8003a56:	f88c 4001 	strb.w	r4, [ip, #1]
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003a5a:	7003      	strb	r3, [r0, #0]
}
 8003a5c:	bd10      	pop	{r4, pc}
 8003a5e:	bf00      	nop
 8003a60:	20001c08 	.word	0x20001c08
 8003a64:	20001c0c 	.word	0x20001c0c
 8003a68:	20001bec 	.word	0x20001bec

08003a6c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <HAL_MspInit+0x3c>)
{
 8003a6e:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	661a      	str	r2, [r3, #96]	; 0x60
 8003a78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003a7a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7c:	f002 0201 	and.w	r2, r2, #1
 8003a80:	9200      	str	r2, [sp, #0]
 8003a82:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003a94:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003a98:	f001 fc56 	bl	8005348 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9c:	b003      	add	sp, #12
 8003a9e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8003aa2:	f002 b853 	b.w	8005b4c <HAL_PWREx_DisableUCPDDeadBattery>
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	00000000 	.word	0x00000000

08003ab0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ab8:	2244      	movs	r2, #68	; 0x44
 8003aba:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003ac0:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8003ac4:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ac6:	f006 fb8d 	bl	800a1e4 <memset>
  if(hadc->Instance==ADC1)
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ad0:	d004      	beq.n	8003adc <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003ad2:	4a43      	ldr	r2, [pc, #268]	; (8003be0 <HAL_ADC_MspInit+0x130>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d046      	beq.n	8003b66 <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003ad8:	b01c      	add	sp, #112	; 0x70
 8003ada:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003adc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ae4:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003ae6:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003ae8:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003aea:	f002 fbe9 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d16a      	bne.n	8003bc8 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003af2:	4a3c      	ldr	r2, [pc, #240]	; (8003be4 <HAL_ADC_MspInit+0x134>)
 8003af4:	6813      	ldr	r3, [r2, #0]
 8003af6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003af8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003afa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003afc:	d109      	bne.n	8003b12 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003afe:	4b3a      	ldr	r3, [pc, #232]	; (8003be8 <HAL_ADC_MspInit+0x138>)
 8003b00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b06:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b12:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_ADC_MspInit+0x138>)
 8003b14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b1e:	f002 0201 	and.w	r2, r2, #1
 8003b22:	9202      	str	r2, [sp, #8]
 8003b24:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b28:	f042 0202 	orr.w	r2, r2, #2
 8003b2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b38:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8003b3a:	2205      	movs	r2, #5
 8003b3c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8003b42:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b48:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4a:	f001 fe13 	bl	8005774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8003b4e:	f244 0202 	movw	r2, #16386	; 0x4002
 8003b52:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b54:	4825      	ldr	r0, [pc, #148]	; (8003bec <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b58:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8003b5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5e:	f001 fe09 	bl	8005774 <HAL_GPIO_Init>
}
 8003b62:	b01c      	add	sp, #112	; 0x70
 8003b64:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003b66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003b6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b6e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003b70:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003b72:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b74:	f002 fba4 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8003b78:	bb48      	cbnz	r0, 8003bce <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <HAL_ADC_MspInit+0x134>)
 8003b7c:	6813      	ldr	r3, [r2, #0]
 8003b7e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003b80:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003b82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003b84:	d109      	bne.n	8003b9a <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <HAL_ADC_MspInit+0x138>)
 8003b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b96:	9304      	str	r3, [sp, #16]
 8003b98:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <HAL_ADC_MspInit+0x138>)
 8003b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8003ba6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8003bd8 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003bb0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8003bb8:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bbc:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003bc0:	f001 fdd8 	bl	8005774 <HAL_GPIO_Init>
}
 8003bc4:	b01c      	add	sp, #112	; 0x70
 8003bc6:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003bc8:	f7fd fbd0 	bl	800136c <Error_Handler>
 8003bcc:	e791      	b.n	8003af2 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8003bce:	f7fd fbcd 	bl	800136c <Error_Handler>
 8003bd2:	e7d2      	b.n	8003b7a <HAL_ADC_MspInit+0xca>
 8003bd4:	f3af 8000 	nop.w
 8003bd8:	00000040 	.word	0x00000040
 8003bdc:	00000003 	.word	0x00000003
 8003be0:	50000100 	.word	0x50000100
 8003be4:	20001c1c 	.word	0x20001c1c
 8003be8:	40021000 	.word	0x40021000
 8003bec:	48000400 	.word	0x48000400

08003bf0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003bf0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 8003bf2:	6802      	ldr	r2, [r0, #0]
 8003bf4:	4934      	ldr	r1, [pc, #208]	; (8003cc8 <HAL_COMP_MspInit+0xd8>)
{
 8003bf6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf8:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8003bfa:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003c00:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003c04:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 8003c06:	d008      	beq.n	8003c1a <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8003c08:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_COMP_MspInit+0xdc>)
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d01e      	beq.n	8003c4c <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_COMP_MspInit+0xe0>)
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d034      	beq.n	8003c7e <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 8003c14:	b00b      	add	sp, #44	; 0x2c
 8003c16:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c1e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8003c22:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8003cb0 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8003c36:	a904      	add	r1, sp, #16
 8003c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8003c3c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c40:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8003c42:	f001 fd97 	bl	8005774 <HAL_GPIO_Init>
}
 8003c46:	b00b      	add	sp, #44	; 0x2c
 8003c48:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003c50:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8003c5e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8003cb8 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8003c68:	a904      	add	r1, sp, #16
 8003c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8003c6e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c72:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8003c74:	f001 fd7e 	bl	8005774 <HAL_GPIO_Init>
}
 8003c78:	b00b      	add	sp, #44	; 0x2c
 8003c7a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003c82:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003c88:	4812      	ldr	r0, [pc, #72]	; (8003cd4 <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c8a:	f042 0202 	orr.w	r2, r2, #2
 8003c8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8003c92:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8003cc0 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003c9c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8003c9e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca2:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003ca4:	f001 fd66 	bl	8005774 <HAL_GPIO_Init>
}
 8003ca8:	b00b      	add	sp, #44	; 0x2c
 8003caa:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cae:	bf00      	nop
 8003cb0:	00000002 	.word	0x00000002
 8003cb4:	00000003 	.word	0x00000003
 8003cb8:	00000080 	.word	0x00000080
 8003cbc:	00000003 	.word	0x00000003
 8003cc0:	00000001 	.word	0x00000001
 8003cc4:	00000003 	.word	0x00000003
 8003cc8:	40010200 	.word	0x40010200
 8003ccc:	40010204 	.word	0x40010204
 8003cd0:	4001020c 	.word	0x4001020c
 8003cd4:	48000400 	.word	0x48000400

08003cd8 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <HAL_CORDIC_MspInit+0x2c>)
 8003cda:	6802      	ldr	r2, [r0, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d000      	beq.n	8003ce2 <HAL_CORDIC_MspInit+0xa>
 8003ce0:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003ce2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8003ce6:	f042 0208 	orr.w	r2, r2, #8
 8003cea:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8003cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8003cf2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8003cfe:	b002      	add	sp, #8
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40020c00 	.word	0x40020c00

08003d08 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_DAC_MspInit+0x2c>)
 8003d0a:	6802      	ldr	r2, [r0, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d000      	beq.n	8003d12 <HAL_DAC_MspInit+0xa>
 8003d10:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8003d12:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003d16:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 8003d1a:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8003d1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d1e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003d22:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8003d2e:	b002      	add	sp, #8
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	50001000 	.word	0x50001000

08003d38 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003d38:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8003d3a:	6802      	ldr	r2, [r0, #0]
 8003d3c:	4934      	ldr	r1, [pc, #208]	; (8003e10 <HAL_OPAMP_MspInit+0xd8>)
{
 8003d3e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d40:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8003d42:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003d48:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003d4c:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8003d4e:	d008      	beq.n	8003d62 <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8003d50:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_OPAMP_MspInit+0xdc>)
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d01e      	beq.n	8003d94 <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8003d56:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <HAL_OPAMP_MspInit+0xe0>)
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d033      	beq.n	8003dc4 <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8003d5c:	b00b      	add	sp, #44	; 0x2c
 8003d5e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d66:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8003d6a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8003df8 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d7e:	a904      	add	r1, sp, #16
 8003d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8003d84:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d88:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8a:	f001 fcf3 	bl	8005774 <HAL_GPIO_Init>
}
 8003d8e:	b00b      	add	sp, #44	; 0x2c
 8003d90:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d94:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003d98:	33fc      	adds	r3, #252	; 0xfc
 8003d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	64da      	str	r2, [r3, #76]	; 0x4c
 8003da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003da4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8003e00 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dae:	a904      	add	r1, sp, #16
 8003db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003db4:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dba:	f001 fcdb 	bl	8005774 <HAL_GPIO_Init>
}
 8003dbe:	b00b      	add	sp, #44	; 0x2c
 8003dc0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc4:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003dc8:	33f8      	adds	r3, #248	; 0xf8
 8003dca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dcc:	4813      	ldr	r0, [pc, #76]	; (8003e1c <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dce:	f042 0202 	orr.w	r2, r2, #2
 8003dd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8003dd6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8003e08 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8003de2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de6:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de8:	f001 fcc4 	bl	8005774 <HAL_GPIO_Init>
}
 8003dec:	b00b      	add	sp, #44	; 0x2c
 8003dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8003df2:	bf00      	nop
 8003df4:	f3af 8000 	nop.w
 8003df8:	0000000e 	.word	0x0000000e
 8003dfc:	00000003 	.word	0x00000003
 8003e00:	000000e0 	.word	0x000000e0
 8003e04:	00000003 	.word	0x00000003
 8003e08:	00000007 	.word	0x00000007
 8003e0c:	00000003 	.word	0x00000003
 8003e10:	40010300 	.word	0x40010300
 8003e14:	40010304 	.word	0x40010304
 8003e18:	40010308 	.word	0x40010308
 8003e1c:	48000400 	.word	0x48000400

08003e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e20:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003e22:	6802      	ldr	r2, [r0, #0]
 8003e24:	4922      	ldr	r1, [pc, #136]	; (8003eb0 <HAL_TIM_Base_MspInit+0x90>)
{
 8003e26:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8003e2a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003e30:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003e34:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8003e36:	d004      	beq.n	8003e42 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003e38:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003e3c:	d010      	beq.n	8003e60 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003e3e:	b00a      	add	sp, #40	; 0x28
 8003e40:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e46:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003e4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e50:	661a      	str	r2, [r3, #96]	; 0x60
 8003e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	9b01      	ldr	r3, [sp, #4]
}
 8003e5c:	b00a      	add	sp, #40	; 0x28
 8003e5e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <HAL_TIM_Base_MspInit+0x94>)
 8003e62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	659a      	str	r2, [r3, #88]	; 0x58
 8003e6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e6c:	f002 0201 	and.w	r2, r2, #1
 8003e70:	9202      	str	r2, [sp, #8]
 8003e72:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_PWM_INPUT_Pin;
 8003e7e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8003ea8 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e88:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e8a:	2301      	movs	r3, #1
    HAL_GPIO_Init(M1_PWM_INPUT_GPIO_Port, &GPIO_InitStruct);
 8003e8c:	a904      	add	r1, sp, #16
 8003e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_INPUT_Pin;
 8003e92:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e96:	9c03      	ldr	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e98:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e9a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_PWM_INPUT_GPIO_Port, &GPIO_InitStruct);
 8003e9c:	f001 fc6a 	bl	8005774 <HAL_GPIO_Init>
}
 8003ea0:	b00a      	add	sp, #40	; 0x28
 8003ea2:	bd10      	pop	{r4, pc}
 8003ea4:	f3af 8000 	nop.w
 8003ea8:	00008000 	.word	0x00008000
 8003eac:	00000002 	.word	0x00000002
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003eb8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003eba:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <HAL_TIM_MspPostInit+0xac>)
 8003ebc:	6801      	ldr	r1, [r0, #0]
{
 8003ebe:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003ec2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003ec8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003ecc:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8003ece:	d001      	beq.n	8003ed4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003ed0:	b00a      	add	sp, #40	; 0x28
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ed8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003edc:	2604      	movs	r6, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003ee0:	4821      	ldr	r0, [pc, #132]	; (8003f68 <HAL_TIM_MspPostInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee2:	4332      	orrs	r2, r6
 8003ee4:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ee8:	4032      	ands	r2, r6
 8003eea:	9201      	str	r2, [sp, #4]
 8003eec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ef0:	f042 0202 	orr.w	r2, r2, #2
 8003ef4:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ef8:	f002 0202 	and.w	r2, r2, #2
 8003efc:	9202      	str	r2, [sp, #8]
 8003efe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	64da      	str	r2, [r3, #76]	; 0x4c
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003f0a:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003f12:	2402      	movs	r4, #2
 8003f14:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003f16:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f22:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003f28:	f001 fc24 	bl	8005774 <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003f2c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003f2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f32:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003f34:	480d      	ldr	r0, [pc, #52]	; (8003f6c <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003f36:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003f38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003f40:	f001 fc18 	bl	8005774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8003f44:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003f50:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8003f56:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003f5a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5c:	f001 fc0a 	bl	8005774 <HAL_GPIO_Init>
}
 8003f60:	b00a      	add	sp, #40	; 0x28
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	48000800 	.word	0x48000800
 8003f6c:	48000400 	.word	0x48000400

08003f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	4604      	mov	r4, r0
 8003f74:	b098      	sub	sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f76:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f78:	2244      	movs	r2, #68	; 0x44
 8003f7a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f7c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003f80:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003f84:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f86:	f006 f92d 	bl	800a1e4 <memset>
  if(huart->Instance==USART2)
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_UART_MspInit+0xe0>)
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f92:	b018      	add	sp, #96	; 0x60
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f96:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f98:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f9a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f9c:	f002 f990 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d14b      	bne.n	800403c <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	; (8004054 <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa6:	482c      	ldr	r0, [pc, #176]	; (8004058 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003faa:	4e2c      	ldr	r6, [pc, #176]	; (800405c <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003fb0:	659a      	str	r2, [r3, #88]	; 0x58
 8003fb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fb4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003fb8:	9200      	str	r2, [sp, #0]
 8003fba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fbe:	f042 0202 	orr.w	r2, r2, #2
 8003fc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003fcc:	2218      	movs	r2, #24
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fd4:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fde:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fe0:	2307      	movs	r3, #7
 8003fe2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe4:	f001 fbc6 	bl	8005774 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003fe8:	491d      	ldr	r1, [pc, #116]	; (8004060 <HAL_UART_MspInit+0xf0>)
 8003fea:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fec:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003fee:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ff2:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ff4:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ff6:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ffa:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003ffe:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004002:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004004:	f001 fb20 	bl	8005648 <HAL_DMA_Init>
 8004008:	b9f0      	cbnz	r0, 8004048 <HAL_UART_MspInit+0xd8>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800400a:	4d16      	ldr	r5, [pc, #88]	; (8004064 <HAL_UART_MspInit+0xf4>)
 800400c:	4916      	ldr	r1, [pc, #88]	; (8004068 <HAL_UART_MspInit+0xf8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800400e:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004010:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004012:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004014:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004018:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800401a:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800401c:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800401e:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004022:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004026:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800402a:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800402c:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800402e:	f001 fb0b 	bl	8005648 <HAL_DMA_Init>
 8004032:	b930      	cbnz	r0, 8004042 <HAL_UART_MspInit+0xd2>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004034:	67a5      	str	r5, [r4, #120]	; 0x78
 8004036:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8004038:	b018      	add	sp, #96	; 0x60
 800403a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800403c:	f7fd f996 	bl	800136c <Error_Handler>
 8004040:	e7b0      	b.n	8003fa4 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8004042:	f7fd f993 	bl	800136c <Error_Handler>
 8004046:	e7f5      	b.n	8004034 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8004048:	f7fd f990 	bl	800136c <Error_Handler>
 800404c:	e7dd      	b.n	800400a <HAL_UART_MspInit+0x9a>
 800404e:	bf00      	nop
 8004050:	40004400 	.word	0x40004400
 8004054:	40021000 	.word	0x40021000
 8004058:	48000400 	.word	0x48000400
 800405c:	20000734 	.word	0x20000734
 8004060:	40020008 	.word	0x40020008
 8004064:	20000794 	.word	0x20000794
 8004068:	4002001c 	.word	0x4002001c

0800406c <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800406c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004070:	2240      	movs	r2, #64	; 0x40
 8004072:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  (void)TSK_HighFrequencyTask();
 8004074:	f7fd bea6 	b.w	8001dc4 <TSK_HighFrequencyTask>

08004078 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    ( void )R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800407a:	4804      	ldr	r0, [pc, #16]	; (800408c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800407c:	f06f 0201 	mvn.w	r2, #1
 8004080:	611a      	str	r2, [r3, #16]
 8004082:	f004 bfeb 	b.w	800905c <R3_2_TIMx_UP_IRQHandler>
 8004086:	bf00      	nop
 8004088:	40012c00 	.word	0x40012c00
 800408c:	200001b0 	.word	0x200001b0

08004090 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8004090:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	0611      	lsls	r1, r2, #24
 8004098:	d505      	bpl.n	80040a6 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800409a:	f06f 0280 	mvn.w	r2, #128	; 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    ( void )R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 800409e:	480a      	ldr	r0, [pc, #40]	; (80040c8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80040a0:	611a      	str	r2, [r3, #16]
 80040a2:	f005 f847 	bl	8009134 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	05d2      	lsls	r2, r2, #23
 80040ac:	d505      	bpl.n	80040ba <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80040ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    ( void )R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 80040b2:	4805      	ldr	r0, [pc, #20]	; (80040c8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80040b4:	611a      	str	r2, [r3, #16]
 80040b6:	f005 f819 	bl	80090ec <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80040ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80040be:	f7fd be3b 	b.w	8001d38 <MC_Scheduler>
 80040c2:	bf00      	nop
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	200001b0 	.word	0x200001b0

080040cc <DMA1_Channel1_IRQHandler>:
  }
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <DMA1_Channel1_IRQHandler+0x14>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	0792      	lsls	r2, r2, #30
 80040d2:	d400      	bmi.n	80040d6 <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 80040d4:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80040d6:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80040d8:	4802      	ldr	r0, [pc, #8]	; (80040e4 <DMA1_Channel1_IRQHandler+0x18>)
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	f7fc bd54 	b.w	8000b88 <ASPEP_HWDataReceivedIT>
 80040e0:	40020000 	.word	0x40020000
 80040e4:	20000514 	.word	0x20000514

080040e8 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80040e8:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <USART2_IRQHandler+0x10c>)
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 80040ee:	b510      	push	{r4, lr}
 80040f0:	d509      	bpl.n	8004106 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80040f2:	4941      	ldr	r1, [pc, #260]	; (80041f8 <USART2_IRQHandler+0x110>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 80040f4:	4841      	ldr	r0, [pc, #260]	; (80041fc <USART2_IRQHandler+0x114>)
 80040f6:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80040f8:	2440      	movs	r4, #64	; 0x40
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	61ca      	str	r2, [r1, #28]
 8004100:	621c      	str	r4, [r3, #32]
 8004102:	f7fc fb95 	bl	8000830 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004106:	4b3b      	ldr	r3, [pc, #236]	; (80041f4 <USART2_IRQHandler+0x10c>)
 8004108:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800410a:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800410c:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 800410e:	689c      	ldr	r4, [r3, #8]
 8004110:	07e4      	lsls	r4, r4, #31
 8004112:	d526      	bpl.n	8004162 <USART2_IRQHandler+0x7a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004114:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004118:	f000 0008 	and.w	r0, r0, #8
  test2 = LL_USART_IsActiveFlag_FE (USARTA);
  test3 = LL_USART_IsActiveFlag_NE (USARTA);
  mask = LL_USART_IsEnabledIT_ERROR (USARTA);

  test1 = ( ( test1 | test2 | test3 ) & mask );
  if ( 0U == test1 )
 800411c:	4302      	orrs	r2, r0
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800411e:	f001 0104 	and.w	r1, r1, #4
 8004122:	430a      	orrs	r2, r1
 8004124:	d01d      	beq.n	8004162 <USART2_IRQHandler+0x7a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8004126:	220e      	movs	r2, #14
 8004128:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800412e:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 8004132:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004136:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 800413e:	e840 3100 	strex	r1, r3, [r0]
 8004142:	2900      	cmp	r1, #0
 8004144:	d1f3      	bne.n	800412e <USART2_IRQHandler+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800414a:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 800414e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004152:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800415a:	e840 3100 	strex	r1, r3, [r0]
 800415e:	2900      	cmp	r1, #0
 8004160:	d1f3      	bne.n	800414a <USART2_IRQHandler+0x62>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <USART2_IRQHandler+0x10c>)
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	06d2      	lsls	r2, r2, #27
 8004168:	d541      	bpl.n	80041ee <USART2_IRQHandler+0x106>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	06db      	lsls	r3, r3, #27
 800416e:	d53f      	bpl.n	80041f0 <USART2_IRQHandler+0x108>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004174:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 8004178:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800417c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8004184:	e840 3100 	strex	r1, r3, [r0]
 8004188:	2900      	cmp	r1, #0
 800418a:	d1f3      	bne.n	8004174 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004190:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 8004194:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004198:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 80041a0:	e840 3100 	strex	r1, r3, [r0]
 80041a4:	2900      	cmp	r1, #0
 80041a6:	d1f3      	bne.n	8004190 <USART2_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041ac:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 80041b0:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 80041b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 80041bc:	e840 3100 	strex	r1, r3, [r0]
 80041c0:	2900      	cmp	r1, #0
 80041c2:	d1f3      	bne.n	80041ac <USART2_IRQHandler+0xc4>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <USART2_IRQHandler+0x10c>)
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041cc:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 80041d0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80041d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 80041dc:	e840 3100 	strex	r1, r3, [r0]
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d1f3      	bne.n	80041cc <USART2_IRQHandler+0xe4>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 80041e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 80041e8:	4804      	ldr	r0, [pc, #16]	; (80041fc <USART2_IRQHandler+0x114>)
 80041ea:	f7fc bd1b 	b.w	8000c24 <ASPEP_HWDMAReset>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	bf00      	nop
 80041f4:	40004400 	.word	0x40004400
 80041f8:	40020000 	.word	0x40020000
 80041fc:	20000514 	.word	0x20000514

08004200 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004200:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8004202:	f7fd ff15 	bl	8002030 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8004206:	e7fe      	b.n	8004206 <HardFault_Handler+0x6>

08004208 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004208:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800420a:	4c0a      	ldr	r4, [pc, #40]	; (8004234 <SysTick_Handler+0x2c>)
 800420c:	7823      	ldrb	r3, [r4, #0]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d006      	beq.n	8004220 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8004212:	3301      	adds	r3, #1
 8004214:	b2db      	uxtb	r3, r3
 8004216:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800421c:	f7fd befc 	b.w	8002018 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8004220:	f000 f8e2 	bl	80043e8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004224:	f001 f90a 	bl	800543c <HAL_SYSTICK_IRQHandler>
 8004228:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 800422a:	7023      	strb	r3, [r4, #0]
}
 800422c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004230:	f7fd bef2 	b.w	8002018 <MC_RunMotorControlTasks>
 8004234:	20000588 	.word	0x20000588

08004238 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <EXTI15_10_IRQHandler+0x14>)
 800423a:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if (  0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 800423c:	0552      	lsls	r2, r2, #21
 800423e:	d400      	bmi.n	8004242 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    ( void )UI_HandleStartStopButton_cb ();
  }

}
 8004240:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004246:	615a      	str	r2, [r3, #20]
    ( void )UI_HandleStartStopButton_cb ();
 8004248:	f7fd bf02 	b.w	8002050 <UI_HandleStartStopButton_cb>
 800424c:	40010400 	.word	0x40010400

08004250 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8004250:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004252:	2340      	movs	r3, #64	; 0x40
{
 8004254:	b470      	push	{r4, r5, r6}
 8004256:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800425c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	e842 3100 	strex	r1, r3, [r2]
 8004264:	2900      	cmp	r1, #0
 8004266:	d1f7      	bne.n	8004258 <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004268:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	e851 3f00 	ldrex	r3, [r1]
 8004270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	e841 3400 	strex	r4, r3, [r1]
 8004278:	2c00      	cmp	r4, #0
 800427a:	d1f7      	bne.n	800426c <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800427c:	6901      	ldr	r1, [r0, #16]
 800427e:	4e17      	ldr	r6, [pc, #92]	; (80042dc <UASPEP_INIT+0x8c>)
 8004280:	6883      	ldr	r3, [r0, #8]
 8004282:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004284:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004286:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8004288:	f102 0128 	add.w	r1, r2, #40	; 0x28
 800428c:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 800428e:	68c3      	ldr	r3, [r0, #12]
 8004290:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004292:	2340      	movs	r3, #64	; 0x40
 8004294:	6213      	str	r3, [r2, #32]
 8004296:	586b      	ldr	r3, [r5, r1]
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800429e:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	e851 3f00 	ldrex	r3, [r1]
 80042a6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	e841 3400 	strex	r4, r3, [r1]
 80042ae:	2c00      	cmp	r4, #0
 80042b0:	d1f7      	bne.n	80042a2 <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80042b2:	68c3      	ldr	r3, [r0, #12]
 80042b4:	5cf0      	ldrb	r0, [r6, r3]
 80042b6:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 80042b8:	f102 0124 	add.w	r1, r2, #36	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80042bc:	2340      	movs	r3, #64	; 0x40
 80042be:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80042c0:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80042c4:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80042ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	e841 3200 	strex	r2, r3, [r1]
 80042d2:	2a00      	cmp	r2, #0
 80042d4:	d1f7      	bne.n	80042c6 <UASPEP_INIT+0x76>
}
 80042d6:	bc70      	pop	{r4, r5, r6}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	0800a59c 	.word	0x0800a59c

080042e0 <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 80042e0:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80042e2:	6903      	ldr	r3, [r0, #16]
 80042e4:	4d0b      	ldr	r5, [pc, #44]	; (8004314 <UASPEP_SEND_PACKET+0x34>)
 80042e6:	6884      	ldr	r4, [r0, #8]
 80042e8:	5ceb      	ldrb	r3, [r5, r3]
 80042ea:	58e5      	ldr	r5, [r4, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80042ec:	07ed      	lsls	r5, r5, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80042ee:	eb04 0003 	add.w	r0, r4, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80042f2:	d40b      	bmi.n	800430c <UASPEP_SEND_PACKET+0x2c>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80042f4:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80042f6:	6841      	ldr	r1, [r0, #4]
 80042f8:	0c09      	lsrs	r1, r1, #16
 80042fa:	0409      	lsls	r1, r1, #16
 80042fc:	430a      	orrs	r2, r1
 80042fe:	6042      	str	r2, [r0, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004300:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8004302:	2001      	movs	r0, #1
 8004304:	4302      	orrs	r2, r0
 8004306:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return result;
}
 8004308:	bc30      	pop	{r4, r5}
 800430a:	4770      	bx	lr
    result = false;
 800430c:	2000      	movs	r0, #0
}
 800430e:	bc30      	pop	{r4, r5}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	0800a59c 	.word	0x0800a59c

08004318 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8004318:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800431a:	68c3      	ldr	r3, [r0, #12]
 800431c:	4d0b      	ldr	r5, [pc, #44]	; (800434c <UASPEP_RECEIVE_BUFFER+0x34>)
 800431e:	6844      	ldr	r4, [r0, #4]
 8004320:	5ce8      	ldrb	r0, [r5, r3]
 8004322:	5823      	ldr	r3, [r4, r0]
 8004324:	eb04 0c00 	add.w	ip, r4, r0
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800432e:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004332:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004336:	0c1b      	lsrs	r3, r3, #16
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	431a      	orrs	r2, r3
 800433c:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004340:	5823      	ldr	r3, [r4, r0]
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	5023      	str	r3, [r4, r0]
  LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8004348:	bc30      	pop	{r4, r5}
 800434a:	4770      	bx	lr
 800434c:	0800a59c 	.word	0x0800a59c

08004350 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004350:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004352:	2310      	movs	r3, #16
 8004354:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800435a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	e842 3100 	strex	r1, r3, [r2]
 8004362:	2900      	cmp	r1, #0
 8004364:	d1f7      	bne.n	8004356 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8004366:	4770      	bx	lr

08004368 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004368:	4a03      	ldr	r2, [pc, #12]	; (8004378 <SystemInit+0x10>)
 800436a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800436e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004372:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004376:	4770      	bx	lr
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800437c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800437e:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <HAL_InitTick+0x40>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	b90b      	cbnz	r3, 8004388 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004384:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004386:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004388:	490d      	ldr	r1, [pc, #52]	; (80043c0 <HAL_InitTick+0x44>)
 800438a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800438e:	4605      	mov	r5, r0
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	6808      	ldr	r0, [r1, #0]
 8004396:	fbb0 f0f3 	udiv	r0, r0, r3
 800439a:	f001 f833 	bl	8005404 <HAL_SYSTICK_Config>
 800439e:	4604      	mov	r4, r0
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d1ef      	bne.n	8004384 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043a4:	2d0f      	cmp	r5, #15
 80043a6:	d8ed      	bhi.n	8004384 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043a8:	4602      	mov	r2, r0
 80043aa:	4629      	mov	r1, r5
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	f000 ffdc 	bl	800536c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_InitTick+0x48>)
 80043b6:	4620      	mov	r0, r4
 80043b8:	601d      	str	r5, [r3, #0]
}
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	20000590 	.word	0x20000590
 80043c0:	2000058c 	.word	0x2000058c
 80043c4:	20000594 	.word	0x20000594

080043c8 <HAL_Init>:
{
 80043c8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043ca:	2003      	movs	r0, #3
 80043cc:	f000 ffbc 	bl	8005348 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043d0:	2004      	movs	r0, #4
 80043d2:	f7ff ffd3 	bl	800437c <HAL_InitTick>
 80043d6:	b110      	cbz	r0, 80043de <HAL_Init+0x16>
    status = HAL_ERROR;
 80043d8:	2401      	movs	r4, #1
}
 80043da:	4620      	mov	r0, r4
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	4604      	mov	r4, r0
    HAL_MspInit();
 80043e0:	f7ff fb44 	bl	8003a6c <HAL_MspInit>
}
 80043e4:	4620      	mov	r0, r4
 80043e6:	bd10      	pop	{r4, pc}

080043e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80043e8:	4a03      	ldr	r2, [pc, #12]	; (80043f8 <HAL_IncTick+0x10>)
 80043ea:	4904      	ldr	r1, [pc, #16]	; (80043fc <HAL_IncTick+0x14>)
 80043ec:	6813      	ldr	r3, [r2, #0]
 80043ee:	6809      	ldr	r1, [r1, #0]
 80043f0:	440b      	add	r3, r1
 80043f2:	6013      	str	r3, [r2, #0]
}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20001c20 	.word	0x20001c20
 80043fc:	20000590 	.word	0x20000590

08004400 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004400:	4b01      	ldr	r3, [pc, #4]	; (8004408 <HAL_GetTick+0x8>)
 8004402:	6818      	ldr	r0, [r3, #0]
}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20001c20 	.word	0x20001c20

0800440c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7ff fff6 	bl	8004400 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004414:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004416:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004418:	d002      	beq.n	8004420 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800441a:	4b04      	ldr	r3, [pc, #16]	; (800442c <HAL_Delay+0x20>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004420:	f7ff ffee 	bl	8004400 <HAL_GetTick>
 8004424:	1b43      	subs	r3, r0, r5
 8004426:	42a3      	cmp	r3, r4
 8004428:	d3fa      	bcc.n	8004420 <HAL_Delay+0x14>
  {
  }
}
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	20000590 	.word	0x20000590

08004430 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004430:	b530      	push	{r4, r5, lr}
 8004432:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004434:	2300      	movs	r3, #0
 8004436:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004438:	2800      	cmp	r0, #0
 800443a:	f000 80c9 	beq.w	80045d0 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800443e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004440:	4604      	mov	r4, r0
 8004442:	2d00      	cmp	r5, #0
 8004444:	f000 8092 	beq.w	800456c <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004448:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800444a:	6893      	ldr	r3, [r2, #8]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	d505      	bpl.n	800445c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004450:	6893      	ldr	r3, [r2, #8]
 8004452:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004456:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800445a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800445c:	6893      	ldr	r3, [r2, #8]
 800445e:	00dd      	lsls	r5, r3, #3
 8004460:	d419      	bmi.n	8004496 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004462:	4b70      	ldr	r3, [pc, #448]	; (8004624 <HAL_ADC_Init+0x1f4>)
 8004464:	4870      	ldr	r0, [pc, #448]	; (8004628 <HAL_ADC_Init+0x1f8>)
 8004466:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004468:	6891      	ldr	r1, [r2, #8]
 800446a:	099b      	lsrs	r3, r3, #6
 800446c:	fba0 0303 	umull	r0, r3, r0, r3
 8004470:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004474:	099b      	lsrs	r3, r3, #6
 8004476:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800447a:	3301      	adds	r3, #1
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004482:	6091      	str	r1, [r2, #8]
 8004484:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004486:	9b01      	ldr	r3, [sp, #4]
 8004488:	b12b      	cbz	r3, 8004496 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800448a:	9b01      	ldr	r3, [sp, #4]
 800448c:	3b01      	subs	r3, #1
 800448e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004490:	9b01      	ldr	r3, [sp, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f9      	bne.n	800448a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004496:	6893      	ldr	r3, [r2, #8]
 8004498:	00d8      	lsls	r0, r3, #3
 800449a:	d459      	bmi.n	8004550 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800449e:	f043 0310 	orr.w	r3, r3, #16
 80044a2:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a4:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80044a6:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a8:	4303      	orrs	r3, r0
 80044aa:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044ac:	6893      	ldr	r3, [r2, #8]
 80044ae:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044b4:	d153      	bne.n	800455e <HAL_ADC_Init+0x12e>
 80044b6:	06d9      	lsls	r1, r3, #27
 80044b8:	d451      	bmi.n	800455e <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044c0:	f043 0302 	orr.w	r3, r3, #2
 80044c4:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044c6:	6893      	ldr	r3, [r2, #8]
 80044c8:	07db      	lsls	r3, r3, #31
 80044ca:	d40e      	bmi.n	80044ea <HAL_ADC_Init+0xba>
 80044cc:	4b57      	ldr	r3, [pc, #348]	; (800462c <HAL_ADC_Init+0x1fc>)
 80044ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80044d2:	6889      	ldr	r1, [r1, #8]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	430b      	orrs	r3, r1
 80044d8:	07dd      	lsls	r5, r3, #31
 80044da:	d406      	bmi.n	80044ea <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044dc:	4954      	ldr	r1, [pc, #336]	; (8004630 <HAL_ADC_Init+0x200>)
 80044de:	6865      	ldr	r5, [r4, #4]
 80044e0:	688b      	ldr	r3, [r1, #8]
 80044e2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80044e6:	432b      	orrs	r3, r5
 80044e8:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80044ea:	68e5      	ldr	r5, [r4, #12]
 80044ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044ee:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80044f2:	432b      	orrs	r3, r5
 80044f4:	68a5      	ldr	r5, [r4, #8]
 80044f6:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044f8:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044fa:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80044fc:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004500:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004504:	d05f      	beq.n	80045c6 <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004506:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004508:	b121      	cbz	r1, 8004514 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800450a:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800450c:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004510:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004512:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004514:	68d5      	ldr	r5, [r2, #12]
 8004516:	4947      	ldr	r1, [pc, #284]	; (8004634 <HAL_ADC_Init+0x204>)
 8004518:	4029      	ands	r1, r5
 800451a:	4319      	orrs	r1, r3
 800451c:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800451e:	6913      	ldr	r3, [r2, #16]
 8004520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004522:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004526:	430b      	orrs	r3, r1
 8004528:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800452a:	6893      	ldr	r3, [r2, #8]
 800452c:	0759      	lsls	r1, r3, #29
 800452e:	d523      	bpl.n	8004578 <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004530:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004532:	6963      	ldr	r3, [r4, #20]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d04e      	beq.n	80045d6 <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004538:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800453a:	f023 030f 	bic.w	r3, r3, #15
 800453e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004540:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800454c:	b003      	add	sp, #12
 800454e:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004550:	6893      	ldr	r3, [r2, #8]
 8004552:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004556:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800455a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800455c:	d0ab      	beq.n	80044b6 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004560:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004562:	f043 0310 	orr.w	r3, r3, #16
 8004566:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8004568:	b003      	add	sp, #12
 800456a:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800456c:	f7ff faa0 	bl	8003ab0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004570:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004572:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8004576:	e767      	b.n	8004448 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004578:	6893      	ldr	r3, [r2, #8]
 800457a:	071b      	lsls	r3, r3, #28
 800457c:	d4d9      	bmi.n	8004532 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800457e:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004580:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004584:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004586:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800458a:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800458c:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004590:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004594:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8004596:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004598:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800459a:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 800459c:	bb19      	cbnz	r1, 80045e6 <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800459e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a2:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80045a4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80045a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045b0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80045b4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d021      	beq.n	8004600 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045bc:	6913      	ldr	r3, [r2, #16]
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	6113      	str	r3, [r2, #16]
 80045c4:	e7b5      	b.n	8004532 <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80045c8:	3901      	subs	r1, #1
 80045ca:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80045ce:	e79a      	b.n	8004506 <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 80045d0:	2001      	movs	r0, #1
}
 80045d2:	b003      	add	sp, #12
 80045d4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80045d8:	6a23      	ldr	r3, [r4, #32]
 80045da:	f021 010f 	bic.w	r1, r1, #15
 80045de:	3b01      	subs	r3, #1
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6313      	str	r3, [r2, #48]	; 0x30
 80045e4:	e7ac      	b.n	8004540 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ea:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80045ec:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80045f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045f8:	430b      	orrs	r3, r1
 80045fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80045fe:	e7d9      	b.n	80045b4 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004600:	6911      	ldr	r1, [r2, #16]
 8004602:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004604:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004606:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800460a:	f021 0104 	bic.w	r1, r1, #4
 800460e:	432b      	orrs	r3, r5
 8004610:	430b      	orrs	r3, r1
 8004612:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004614:	430b      	orrs	r3, r1
 8004616:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004618:	430b      	orrs	r3, r1
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6113      	str	r3, [r2, #16]
 8004620:	e787      	b.n	8004532 <HAL_ADC_Init+0x102>
 8004622:	bf00      	nop
 8004624:	2000058c 	.word	0x2000058c
 8004628:	053e2d63 	.word	0x053e2d63
 800462c:	50000100 	.word	0x50000100
 8004630:	50000300 	.word	0x50000300
 8004634:	fff04007 	.word	0xfff04007

08004638 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004638:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800463a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 800463e:	b083      	sub	sp, #12
 8004640:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004642:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004644:	f04f 0000 	mov.w	r0, #0
 8004648:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800464a:	f000 8141 	beq.w	80048d0 <HAL_ADC_ConfigChannel+0x298>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800464e:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8004650:	2001      	movs	r0, #1
 8004652:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004656:	68a2      	ldr	r2, [r4, #8]
 8004658:	0756      	lsls	r6, r2, #29
 800465a:	d44c      	bmi.n	80046f6 <HAL_ADC_ConfigChannel+0xbe>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800465c:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 800465e:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004660:	ea4f 1c90 	mov.w	ip, r0, lsr #6
 8004664:	f00c 0c0c 	and.w	ip, ip, #12
 8004668:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  MODIFY_REG(*preg,
 800466c:	f000 001f 	and.w	r0, r0, #31
 8004670:	f85e 500c 	ldr.w	r5, [lr, ip]
 8004674:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8004678:	261f      	movs	r6, #31
 800467a:	4082      	lsls	r2, r0
 800467c:	fa06 f000 	lsl.w	r0, r6, r0
 8004680:	ea25 0000 	bic.w	r0, r5, r0
 8004684:	4302      	orrs	r2, r0
 8004686:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800468a:	68a2      	ldr	r2, [r4, #8]
 800468c:	0755      	lsls	r5, r2, #29
 800468e:	d543      	bpl.n	8004718 <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004690:	68a2      	ldr	r2, [r4, #8]
 8004692:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004694:	68a2      	ldr	r2, [r4, #8]
 8004696:	f012 0f01 	tst.w	r2, #1
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800469a:	4602      	mov	r2, r0
 800469c:	d10c      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800469e:	4dbf      	ldr	r5, [pc, #764]	; (800499c <HAL_ADC_ConfigChannel+0x364>)
 80046a0:	68ce      	ldr	r6, [r1, #12]
 80046a2:	42ae      	cmp	r6, r5
 80046a4:	f000 80bc 	beq.w	8004820 <HAL_ADC_ConfigChannel+0x1e8>
    CLEAR_BIT(ADCx->DIFSEL,
 80046a8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80046ac:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80046b0:	ea21 0100 	bic.w	r1, r1, r0
 80046b4:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80046b8:	49b9      	ldr	r1, [pc, #740]	; (80049a0 <HAL_ADC_ConfigChannel+0x368>)
 80046ba:	420a      	tst	r2, r1
 80046bc:	d02a      	beq.n	8004714 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80046be:	49b9      	ldr	r1, [pc, #740]	; (80049a4 <HAL_ADC_ConfigChannel+0x36c>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046c0:	4db9      	ldr	r5, [pc, #740]	; (80049a8 <HAL_ADC_ConfigChannel+0x370>)
 80046c2:	6888      	ldr	r0, [r1, #8]
 80046c4:	42aa      	cmp	r2, r5
 80046c6:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80046ca:	d01d      	beq.n	8004708 <HAL_ADC_ConfigChannel+0xd0>
 80046cc:	4db7      	ldr	r5, [pc, #732]	; (80049ac <HAL_ADC_ConfigChannel+0x374>)
 80046ce:	42aa      	cmp	r2, r5
 80046d0:	d01a      	beq.n	8004708 <HAL_ADC_ConfigChannel+0xd0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046d2:	4db7      	ldr	r5, [pc, #732]	; (80049b0 <HAL_ADC_ConfigChannel+0x378>)
 80046d4:	42aa      	cmp	r2, r5
 80046d6:	f040 812d 	bne.w	8004934 <HAL_ADC_ConfigChannel+0x2fc>
 80046da:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80046de:	d119      	bne.n	8004714 <HAL_ADC_ConfigChannel+0xdc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046e0:	4ab4      	ldr	r2, [pc, #720]	; (80049b4 <HAL_ADC_ConfigChannel+0x37c>)
 80046e2:	4294      	cmp	r4, r2
 80046e4:	d016      	beq.n	8004714 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80046e6:	688a      	ldr	r2, [r1, #8]
 80046e8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80046ec:	4332      	orrs	r2, r6
 80046ee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80046f2:	608a      	str	r2, [r1, #8]
}
 80046f4:	e003      	b.n	80046fe <HAL_ADC_ConfigChannel+0xc6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046f8:	f042 0220 	orr.w	r2, r2, #32
 80046fc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004704:	b003      	add	sp, #12
 8004706:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004708:	0202      	lsls	r2, r0, #8
 800470a:	d403      	bmi.n	8004714 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800470c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8004710:	f000 80f1 	beq.w	80048f6 <HAL_ADC_ConfigChannel+0x2be>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004714:	2000      	movs	r0, #0
 8004716:	e7f2      	b.n	80046fe <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004718:	68a2      	ldr	r2, [r4, #8]
 800471a:	0710      	lsls	r0, r2, #28
 800471c:	d47e      	bmi.n	800481c <HAL_ADC_ConfigChannel+0x1e4>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800471e:	688a      	ldr	r2, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004720:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004722:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004726:	f000 8119 	beq.w	800495c <HAL_ADC_ConfigChannel+0x324>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800472a:	0dee      	lsrs	r6, r5, #23
 800472c:	f104 0c14 	add.w	ip, r4, #20
 8004730:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8004734:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8004738:	f85c 0006 	ldr.w	r0, [ip, r6]
 800473c:	2707      	movs	r7, #7
 800473e:	40aa      	lsls	r2, r5
 8004740:	fa07 f505 	lsl.w	r5, r7, r5
 8004744:	ea20 0005 	bic.w	r0, r0, r5
 8004748:	4302      	orrs	r2, r0
 800474a:	f84c 2006 	str.w	r2, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800474e:	6962      	ldr	r2, [r4, #20]
 8004750:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004754:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004756:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800475a:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800475c:	68e2      	ldr	r2, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800475e:	d02d      	beq.n	80047bc <HAL_ADC_ConfigChannel+0x184>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004760:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004764:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004768:	0052      	lsls	r2, r2, #1
  MODIFY_REG(*preg,
 800476a:	f850 c025 	ldr.w	ip, [r0, r5, lsl #2]
 800476e:	4f92      	ldr	r7, [pc, #584]	; (80049b8 <HAL_ADC_ConfigChannel+0x380>)
 8004770:	4096      	lsls	r6, r2
 8004772:	680a      	ldr	r2, [r1, #0]
 8004774:	ea0c 0707 	and.w	r7, ip, r7
 8004778:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800477c:	433a      	orrs	r2, r7
 800477e:	4332      	orrs	r2, r6
 8004780:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004784:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004788:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 800478a:	698e      	ldr	r6, [r1, #24]
 800478c:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 8004790:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004794:	4332      	orrs	r2, r6
 8004796:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800479a:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800479c:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 800479e:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 80047a2:	f1a5 0501 	sub.w	r5, r5, #1
 80047a6:	fab5 f585 	clz	r5, r5
 80047aa:	096d      	lsrs	r5, r5, #5
 80047ac:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80047b0:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 80047b4:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 80047b8:	6808      	ldr	r0, [r1, #0]
}
 80047ba:	e76b      	b.n	8004694 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047bc:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047be:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80047c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80047c2:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047c6:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047ca:	2d00      	cmp	r5, #0
 80047cc:	f040 80fc 	bne.w	80049c8 <HAL_ADC_ConfigChannel+0x390>
 80047d0:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047d4:	42aa      	cmp	r2, r5
 80047d6:	f000 8170 	beq.w	8004aba <HAL_ADC_ConfigChannel+0x482>
 80047da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047de:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047e2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80047e6:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80047ea:	42ae      	cmp	r6, r5
 80047ec:	f000 8153 	beq.w	8004a96 <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047f0:	6896      	ldr	r6, [r2, #8]
 80047f2:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047f4:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047f8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80047fc:	42ae      	cmp	r6, r5
 80047fe:	f000 8138 	beq.w	8004a72 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004802:	68d6      	ldr	r6, [r2, #12]
 8004804:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004806:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800480a:	f3c6 6284 	ubfx	r2, r6, #26, #5
 800480e:	4295      	cmp	r5, r2
 8004810:	f47f af40 	bne.w	8004694 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800481a:	603a      	str	r2, [r7, #0]
 800481c:	6808      	ldr	r0, [r1, #0]
}
 800481e:	e739      	b.n	8004694 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 8004820:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004824:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8004828:	432a      	orrs	r2, r5
 800482a:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800482e:	2d00      	cmp	r5, #0
 8004830:	d051      	beq.n	80048d6 <HAL_ADC_ConfigChannel+0x29e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004832:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004836:	2a00      	cmp	r2, #0
 8004838:	f000 80f7 	beq.w	8004a2a <HAL_ADC_ConfigChannel+0x3f2>
  return __builtin_clz(value);
 800483c:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004840:	3201      	adds	r2, #1
 8004842:	f002 021f 	and.w	r2, r2, #31
 8004846:	2a09      	cmp	r2, #9
 8004848:	f240 80ef 	bls.w	8004a2a <HAL_ADC_ConfigChannel+0x3f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004850:	2d00      	cmp	r5, #0
 8004852:	f000 814e 	beq.w	8004af2 <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 8004856:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800485a:	3501      	adds	r5, #1
 800485c:	06ad      	lsls	r5, r5, #26
 800485e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004866:	2a00      	cmp	r2, #0
 8004868:	f000 8148 	beq.w	8004afc <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 800486c:	fab2 f282 	clz	r2, r2
 8004870:	3201      	adds	r2, #1
 8004872:	f002 021f 	and.w	r2, r2, #31
 8004876:	2601      	movs	r6, #1
 8004878:	fa06 f202 	lsl.w	r2, r6, r2
 800487c:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004882:	2800      	cmp	r0, #0
 8004884:	f000 8138 	beq.w	8004af8 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8004888:	fab0 f080 	clz	r0, r0
 800488c:	3001      	adds	r0, #1
 800488e:	f000 001f 	and.w	r0, r0, #31
 8004892:	2203      	movs	r2, #3
 8004894:	f06f 061d 	mvn.w	r6, #29
 8004898:	fb12 6200 	smlabb	r2, r2, r0, r6
 800489c:	0512      	lsls	r2, r2, #20
 800489e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048a2:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80048a4:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 80048a6:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80048a8:	f005 0504 	and.w	r5, r5, #4
 80048ac:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 80048b0:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80048b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80048b8:	f04f 0e07 	mov.w	lr, #7
 80048bc:	5970      	ldr	r0, [r6, r5]
 80048be:	fa0e f202 	lsl.w	r2, lr, r2
 80048c2:	ea20 0202 	bic.w	r2, r0, r2
 80048c6:	ea42 020c 	orr.w	r2, r2, ip
 80048ca:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048cc:	680a      	ldr	r2, [r1, #0]
}
 80048ce:	e6f3      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 80048d0:	2002      	movs	r0, #2
}
 80048d2:	b003      	add	sp, #12
 80048d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048d6:	0e82      	lsrs	r2, r0, #26
 80048d8:	3201      	adds	r2, #1
 80048da:	f002 001f 	and.w	r0, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048de:	2809      	cmp	r0, #9
 80048e0:	d84e      	bhi.n	8004980 <HAL_ADC_ConfigChannel+0x348>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048e2:	0695      	lsls	r5, r2, #26
 80048e4:	2201      	movs	r2, #1
 80048e6:	4082      	lsls	r2, r0
 80048e8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80048ec:	4315      	orrs	r5, r2
 80048ee:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80048f2:	0512      	lsls	r2, r2, #20
 80048f4:	e7d5      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80048f6:	492b      	ldr	r1, [pc, #172]	; (80049a4 <HAL_ADC_ConfigChannel+0x36c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048f8:	4830      	ldr	r0, [pc, #192]	; (80049bc <HAL_ADC_ConfigChannel+0x384>)
 80048fa:	688a      	ldr	r2, [r1, #8]
 80048fc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004900:	4332      	orrs	r2, r6
 8004902:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004906:	608a      	str	r2, [r1, #8]
 8004908:	6802      	ldr	r2, [r0, #0]
 800490a:	492d      	ldr	r1, [pc, #180]	; (80049c0 <HAL_ADC_ConfigChannel+0x388>)
 800490c:	0992      	lsrs	r2, r2, #6
 800490e:	fba1 1202 	umull	r1, r2, r1, r2
 8004912:	0992      	lsrs	r2, r2, #6
 8004914:	3201      	adds	r2, #1
 8004916:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800491a:	0092      	lsls	r2, r2, #2
 800491c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800491e:	9a01      	ldr	r2, [sp, #4]
 8004920:	2a00      	cmp	r2, #0
 8004922:	f43f aef7 	beq.w	8004714 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 8004926:	9a01      	ldr	r2, [sp, #4]
 8004928:	3a01      	subs	r2, #1
 800492a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800492c:	9a01      	ldr	r2, [sp, #4]
 800492e:	2a00      	cmp	r2, #0
 8004930:	d1f9      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x2ee>
 8004932:	e6ef      	b.n	8004714 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004934:	4d23      	ldr	r5, [pc, #140]	; (80049c4 <HAL_ADC_ConfigChannel+0x38c>)
 8004936:	42aa      	cmp	r2, r5
 8004938:	f47f aeec 	bne.w	8004714 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800493c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004940:	f47f aee8 	bne.w	8004714 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004944:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <HAL_ADC_ConfigChannel+0x37c>)
 8004946:	4294      	cmp	r4, r2
 8004948:	f43f aee4 	beq.w	8004714 <HAL_ADC_ConfigChannel+0xdc>
 800494c:	688a      	ldr	r2, [r1, #8]
 800494e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004952:	4332      	orrs	r2, r6
 8004954:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004958:	608a      	str	r2, [r1, #8]
}
 800495a:	e6d0      	b.n	80046fe <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800495c:	0dea      	lsrs	r2, r5, #23
 800495e:	f002 0204 	and.w	r2, r2, #4
 8004962:	f104 0014 	add.w	r0, r4, #20
  MODIFY_REG(*preg,
 8004966:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800496a:	2607      	movs	r6, #7
 800496c:	40ae      	lsls	r6, r5
 800496e:	5885      	ldr	r5, [r0, r2]
 8004970:	ea25 0506 	bic.w	r5, r5, r6
 8004974:	5085      	str	r5, [r0, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004976:	6962      	ldr	r2, [r4, #20]
 8004978:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800497c:	6162      	str	r2, [r4, #20]
}
 800497e:	e6ea      	b.n	8004756 <HAL_ADC_ConfigChannel+0x11e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004980:	0695      	lsls	r5, r2, #26
 8004982:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8004986:	3a1e      	subs	r2, #30
 8004988:	2601      	movs	r6, #1
 800498a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800498e:	0512      	lsls	r2, r2, #20
 8004990:	fa06 f000 	lsl.w	r0, r6, r0
 8004994:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004998:	4305      	orrs	r5, r0
 800499a:	e782      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x26a>
 800499c:	407f0000 	.word	0x407f0000
 80049a0:	80080000 	.word	0x80080000
 80049a4:	50000300 	.word	0x50000300
 80049a8:	c3210000 	.word	0xc3210000
 80049ac:	90c00010 	.word	0x90c00010
 80049b0:	c7520000 	.word	0xc7520000
 80049b4:	50000100 	.word	0x50000100
 80049b8:	03fff000 	.word	0x03fff000
 80049bc:	2000058c 	.word	0x2000058c
 80049c0:	053e2d63 	.word	0x053e2d63
 80049c4:	cb840000 	.word	0xcb840000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80049cc:	b11d      	cbz	r5, 80049d6 <HAL_ADC_ConfigChannel+0x39e>
  return __builtin_clz(value);
 80049ce:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049d2:	42aa      	cmp	r2, r5
 80049d4:	d071      	beq.n	8004aba <HAL_ADC_ConfigChannel+0x482>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049da:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049de:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80049e2:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80049ea:	b11d      	cbz	r5, 80049f4 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80049ec:	fab5 f585 	clz	r5, r5
 80049f0:	42ae      	cmp	r6, r5
 80049f2:	d050      	beq.n	8004a96 <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049f4:	6895      	ldr	r5, [r2, #8]
 80049f6:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049f8:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049fc:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a04:	b11d      	cbz	r5, 8004a0e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004a06:	fab5 f585 	clz	r5, r5
 8004a0a:	42ae      	cmp	r6, r5
 8004a0c:	d031      	beq.n	8004a72 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a0e:	68d5      	ldr	r5, [r2, #12]
 8004a10:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a12:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a16:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	f43f ae38 	beq.w	8004694 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8004a24:	fab5 f585 	clz	r5, r5
 8004a28:	e6f1      	b.n	800480e <HAL_ADC_ConfigChannel+0x1d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	d059      	beq.n	8004ae6 <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8004a32:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a36:	3501      	adds	r5, #1
 8004a38:	06ad      	lsls	r5, r5, #26
 8004a3a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004a42:	2a00      	cmp	r2, #0
 8004a44:	d04d      	beq.n	8004ae2 <HAL_ADC_ConfigChannel+0x4aa>
  return __builtin_clz(value);
 8004a46:	fab2 f282 	clz	r2, r2
 8004a4a:	3201      	adds	r2, #1
 8004a4c:	f002 021f 	and.w	r2, r2, #31
 8004a50:	2601      	movs	r6, #1
 8004a52:	fa06 f202 	lsl.w	r2, r6, r2
 8004a56:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d045      	beq.n	8004aec <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004a60:	fab0 f280 	clz	r2, r0
 8004a64:	3201      	adds	r2, #1
 8004a66:	f002 021f 	and.w	r2, r2, #31
 8004a6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004a6e:	0512      	lsls	r2, r2, #20
 8004a70:	e717      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(*preg,
 8004a72:	6838      	ldr	r0, [r7, #0]
 8004a74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a78:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a7a:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a7c:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a7e:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a82:	68d2      	ldr	r2, [r2, #12]
 8004a84:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a88:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a8c:	2d00      	cmp	r5, #0
 8004a8e:	d1c4      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x3e2>
 8004a90:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004a94:	e6bb      	b.n	800480e <HAL_ADC_ConfigChannel+0x1d6>
  MODIFY_REG(*preg,
 8004a96:	6838      	ldr	r0, [r7, #0]
 8004a98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a9c:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a9e:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004aa0:	6808      	ldr	r0, [r1, #0]
 8004aa2:	6896      	ldr	r6, [r2, #8]
 8004aa4:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004aa8:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aac:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ab0:	2d00      	cmp	r5, #0
 8004ab2:	d1a5      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x3c8>
 8004ab4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004ab8:	e6a0      	b.n	80047fc <HAL_ADC_ConfigChannel+0x1c4>
  MODIFY_REG(*preg,
 8004aba:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004abc:	4622      	mov	r2, r4
 8004abe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ac2:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ac6:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ac8:	6808      	ldr	r0, [r1, #0]
 8004aca:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8004acc:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ad0:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ad4:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ad8:	2d00      	cmp	r5, #0
 8004ada:	d184      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x3ae>
 8004adc:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004ae0:	e683      	b.n	80047ea <HAL_ADC_ConfigChannel+0x1b2>
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	e7b7      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x41e>
 8004ae6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004aea:	e7a8      	b.n	8004a3e <HAL_ADC_ConfigChannel+0x406>
 8004aec:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004af0:	e6d7      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x26a>
 8004af2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004af6:	e6b4      	b.n	8004862 <HAL_ADC_ConfigChannel+0x22a>
 8004af8:	4a01      	ldr	r2, [pc, #4]	; (8004b00 <HAL_ADC_ConfigChannel+0x4c8>)
 8004afa:	e6d2      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x26a>
 8004afc:	2202      	movs	r2, #2
 8004afe:	e6bd      	b.n	800487c <HAL_ADC_ConfigChannel+0x244>
 8004b00:	fe500000 	.word	0xfe500000

08004b04 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004b04:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b06:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8004b0e:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8004b10:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8004b12:	9001      	str	r0, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b14:	6950      	ldr	r0, [r2, #20]
  __HAL_LOCK(hadc);
 8004b16:	f000 8162 	beq.w	8004dde <HAL_ADCEx_InjectedConfigChannel+0x2da>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004b20:	b1e8      	cbz	r0, 8004b5e <HAL_ADCEx_InjectedConfigChannel+0x5a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004b22:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d01a      	beq.n	8004b5e <HAL_ADCEx_InjectedConfigChannel+0x5a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004b28:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	f040 8115 	bne.w	8004d5a <HAL_ADCEx_InjectedConfigChannel+0x256>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004b30:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8004b32:	2800      	cmp	r0, #0
 8004b34:	f000 821e 	beq.w	8004f74 <HAL_ADCEx_InjectedConfigChannel+0x470>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004b38:	1e5e      	subs	r6, r3, #1
 8004b3a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004b3c:	f000 007c 	and.w	r0, r0, #124	; 0x7c
 8004b40:	4330      	orrs	r0, r6
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004b42:	ea40 0304 	orr.w	r3, r0, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004b46:	e9d1 4500 	ldrd	r4, r5, [r1]
 8004b4a:	f005 051f 	and.w	r5, r5, #31
 8004b4e:	f3c4 6084 	ubfx	r0, r4, #26, #5
 8004b52:	40a8      	lsls	r0, r5
    hadc->InjectionConfig.ChannelCount--;

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004b54:	4318      	orrs	r0, r3
    hadc->InjectionConfig.ChannelCount--;
 8004b56:	6696      	str	r6, [r2, #104]	; 0x68

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004b58:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004b5a:	6650      	str	r0, [r2, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004b5c:	e005      	b.n	8004b6a <HAL_ADCEx_InjectedConfigChannel+0x66>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004b5e:	684b      	ldr	r3, [r1, #4]
 8004b60:	2b09      	cmp	r3, #9
 8004b62:	f000 80e6 	beq.w	8004d32 <HAL_ADCEx_InjectedConfigChannel+0x22e>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004b66:	680c      	ldr	r4, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004b68:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b6a:	6898      	ldr	r0, [r3, #8]
 8004b6c:	0707      	lsls	r7, r0, #28
 8004b6e:	d410      	bmi.n	8004b92 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004b70:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004b74:	2800      	cmp	r0, #0
 8004b76:	f040 80d3 	bne.w	8004d20 <HAL_ADCEx_InjectedConfigChannel+0x21c>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004b7a:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 8004b7e:	68dd      	ldr	r5, [r3, #12]
 8004b80:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8004b84:	0500      	lsls	r0, r0, #20
 8004b86:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004b8a:	ea40 5046 	orr.w	r0, r0, r6, lsl #21
 8004b8e:	4328      	orrs	r0, r5
 8004b90:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b92:	6898      	ldr	r0, [r3, #8]
 8004b94:	f010 0004 	ands.w	r0, r0, #4
 8004b98:	d056      	beq.n	8004c48 <HAL_ADCEx_InjectedConfigChannel+0x144>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b9a:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b9c:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b9e:	689d      	ldr	r5, [r3, #8]
 8004ba0:	07ee      	lsls	r6, r5, #31
 8004ba2:	d40c      	bmi.n	8004bbe <HAL_ADCEx_InjectedConfigChannel+0xba>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004ba4:	4da9      	ldr	r5, [pc, #676]	; (8004e4c <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8004ba6:	68ce      	ldr	r6, [r1, #12]
 8004ba8:	42ae      	cmp	r6, r5
 8004baa:	f000 80fb 	beq.w	8004da4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    CLEAR_BIT(ADCx->DIFSEL,
 8004bae:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004bb2:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8004bb6:	ea21 0105 	bic.w	r1, r1, r5
 8004bba:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004bbe:	49a4      	ldr	r1, [pc, #656]	; (8004e50 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8004bc0:	420c      	tst	r4, r1
 8004bc2:	d019      	beq.n	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004bc4:	4ea3      	ldr	r6, [pc, #652]	; (8004e54 <HAL_ADCEx_InjectedConfigChannel+0x350>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004bc6:	4da4      	ldr	r5, [pc, #656]	; (8004e58 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004bc8:	68b1      	ldr	r1, [r6, #8]
 8004bca:	42ac      	cmp	r4, r5
 8004bcc:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8004bd0:	d017      	beq.n	8004c02 <HAL_ADCEx_InjectedConfigChannel+0xfe>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004bd2:	4da2      	ldr	r5, [pc, #648]	; (8004e5c <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004bd4:	42ac      	cmp	r4, r5
 8004bd6:	d014      	beq.n	8004c02 <HAL_ADCEx_InjectedConfigChannel+0xfe>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004bd8:	4da1      	ldr	r5, [pc, #644]	; (8004e60 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8004bda:	42ac      	cmp	r4, r5
 8004bdc:	f040 8106 	bne.w	8004dec <HAL_ADCEx_InjectedConfigChannel+0x2e8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004be0:	01cd      	lsls	r5, r1, #7
 8004be2:	d409      	bmi.n	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004be4:	499f      	ldr	r1, [pc, #636]	; (8004e64 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8004be6:	428b      	cmp	r3, r1
 8004be8:	d006      	beq.n	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004bea:	68b3      	ldr	r3, [r6, #8]
 8004bec:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004bf0:	433b      	orrs	r3, r7
 8004bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf6:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004bfe:	b003      	add	sp, #12
 8004c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c02:	0209      	lsls	r1, r1, #8
 8004c04:	d4f8      	bmi.n	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c0a:	d1f5      	bne.n	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
 8004c0c:	4991      	ldr	r1, [pc, #580]	; (8004e54 <HAL_ADCEx_InjectedConfigChannel+0x350>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004c0e:	4c96      	ldr	r4, [pc, #600]	; (8004e68 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8004c10:	688b      	ldr	r3, [r1, #8]
 8004c12:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004c16:	433b      	orrs	r3, r7
 8004c18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c1c:	608b      	str	r3, [r1, #8]
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	4992      	ldr	r1, [pc, #584]	; (8004e6c <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004c22:	099b      	lsrs	r3, r3, #6
 8004c24:	fba1 1303 	umull	r1, r3, r1, r3
 8004c28:	099b      	lsrs	r3, r3, #6
 8004c2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	3318      	adds	r3, #24
 8004c32:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0de      	beq.n	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
          wait_loop_index--;
 8004c3a:	9b01      	ldr	r3, [sp, #4]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004c40:	9b01      	ldr	r3, [sp, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f9      	bne.n	8004c3a <HAL_ADCEx_InjectedConfigChannel+0x136>
 8004c46:	e7d7      	b.n	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c48:	689d      	ldr	r5, [r3, #8]
 8004c4a:	f015 0508 	ands.w	r5, r5, #8
 8004c4e:	d1a6      	bne.n	8004b9e <HAL_ADCEx_InjectedConfigChannel+0x9a>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004c50:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8004c52:	2800      	cmp	r0, #0
 8004c54:	f040 8097 	bne.w	8004d86 <HAL_ADCEx_InjectedConfigChannel+0x282>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004c58:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004c5c:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004c5e:	68d8      	ldr	r0, [r3, #12]
 8004c60:	bf0c      	ite	eq
 8004c62:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004c66:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 8004c6a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c6c:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004c6e:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004c72:	2d01      	cmp	r5, #1
 8004c74:	f000 80df 	beq.w	8004e36 <HAL_ADCEx_InjectedConfigChannel+0x332>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004c78:	691d      	ldr	r5, [r3, #16]
 8004c7a:	f025 0502 	bic.w	r5, r5, #2
 8004c7e:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c80:	688d      	ldr	r5, [r1, #8]
 8004c82:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8004c86:	f000 80c4 	beq.w	8004e12 <HAL_ADCEx_InjectedConfigChannel+0x30e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c8a:	0de6      	lsrs	r6, r4, #23
 8004c8c:	f006 0604 	and.w	r6, r6, #4
 8004c90:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004c94:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8004c98:	2707      	movs	r7, #7
 8004c9a:	40a5      	lsls	r5, r4
 8004c9c:	40a7      	lsls	r7, r4
 8004c9e:	f85c 4006 	ldr.w	r4, [ip, r6]
 8004ca2:	ea24 0407 	bic.w	r4, r4, r7
 8004ca6:	432c      	orrs	r4, r5
 8004ca8:	f84c 4006 	str.w	r4, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004cac:	695c      	ldr	r4, [r3, #20]
 8004cae:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004cb2:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004cb4:	e9d1 6504 	ldrd	r6, r5, [r1, #16]
 8004cb8:	2e04      	cmp	r6, #4
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004cba:	68dc      	ldr	r4, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004cbc:	f000 80de 	beq.w	8004e7c <HAL_ADCEx_InjectedConfigChannel+0x378>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004cc0:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8004cc4:	0064      	lsls	r4, r4, #1
 8004cc6:	fa05 fc04 	lsl.w	ip, r5, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cca:	f103 0560 	add.w	r5, r3, #96	; 0x60
  MODIFY_REG(*preg,
 8004cce:	680c      	ldr	r4, [r1, #0]
 8004cd0:	f855 e026 	ldr.w	lr, [r5, r6, lsl #2]
 8004cd4:	4f66      	ldr	r7, [pc, #408]	; (8004e70 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8004cd6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004cda:	ea0e 0707 	and.w	r7, lr, r7
 8004cde:	433c      	orrs	r4, r7
 8004ce0:	ea44 040c 	orr.w	r4, r4, ip
 8004ce4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004ce8:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cec:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004cee:	698e      	ldr	r6, [r1, #24]
 8004cf0:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004cf4:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8004cf8:	4334      	orrs	r4, r6
 8004cfa:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cfe:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004d00:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8004d02:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004d06:	f1a6 0601 	sub.w	r6, r6, #1
 8004d0a:	fab6 f686 	clz	r6, r6
 8004d0e:	0976      	lsrs	r6, r6, #5
 8004d10:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8004d14:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8004d18:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004d1c:	680c      	ldr	r4, [r1, #0]
}
 8004d1e:	e73e      	b.n	8004b9e <HAL_ADCEx_InjectedConfigChannel+0x9a>
      MODIFY_REG(hadc->Instance->CFGR,
 8004d20:	68d8      	ldr	r0, [r3, #12]
 8004d22:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8004d26:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8004d2a:	ea40 5045 	orr.w	r0, r0, r5, lsl #21
 8004d2e:	60d8      	str	r0, [r3, #12]
 8004d30:	e72f      	b.n	8004b92 <HAL_ADCEx_InjectedConfigChannel+0x8e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004d32:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d34:	680c      	ldr	r4, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d054      	beq.n	8004de4 <HAL_ADCEx_InjectedConfigChannel+0x2e0>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d3a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004d3c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d40:	0c65      	lsrs	r5, r4, #17
 8004d42:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004d46:	4303      	orrs	r3, r0
 8004d48:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	4e49      	ldr	r6, [pc, #292]	; (8004e74 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8004d4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004d50:	4030      	ands	r0, r6
 8004d52:	4328      	orrs	r0, r5
 8004d54:	64d8      	str	r0, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004d56:	6655      	str	r5, [r2, #100]	; 0x64
 8004d58:	e707      	b.n	8004b6a <HAL_ADCEx_InjectedConfigChannel+0x66>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004d5a:	680c      	ldr	r4, [r1, #0]
 8004d5c:	684b      	ldr	r3, [r1, #4]
 8004d5e:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004d68:	6e53      	ldr	r3, [r2, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 8004d6a:	3801      	subs	r0, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004d6c:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8004d6e:	6690      	str	r0, [r2, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004d70:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004d72:	6655      	str	r5, [r2, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004d74:	2800      	cmp	r0, #0
 8004d76:	f47f aef8 	bne.w	8004b6a <HAL_ADCEx_InjectedConfigChannel+0x66>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004d7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004d7c:	4e3d      	ldr	r6, [pc, #244]	; (8004e74 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8004d7e:	4030      	ands	r0, r6
 8004d80:	4328      	orrs	r0, r5
 8004d82:	64d8      	str	r0, [r3, #76]	; 0x4c
 8004d84:	e6f1      	b.n	8004b6a <HAL_ADCEx_InjectedConfigChannel+0x66>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004d86:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	f43f af65 	beq.w	8004c58 <HAL_ADCEx_InjectedConfigChannel+0x154>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004d8e:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004d92:	2801      	cmp	r0, #1
 8004d94:	f000 8156 	beq.w	8005044 <HAL_ADCEx_InjectedConfigChannel+0x540>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d98:	4628      	mov	r0, r5
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004d9a:	68dd      	ldr	r5, [r3, #12]
 8004d9c:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8004da0:	60dd      	str	r5, [r3, #12]
 8004da2:	e764      	b.n	8004c6e <HAL_ADCEx_InjectedConfigChannel+0x16a>
    SET_BIT(ADCx->DIFSEL,
 8004da4:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8004da8:	f3c4 0612 	ubfx	r6, r4, #0, #19
 8004dac:	4335      	orrs	r5, r6
 8004dae:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004db2:	2e00      	cmp	r6, #0
 8004db4:	f040 80a7 	bne.w	8004f06 <HAL_ADCEx_InjectedConfigChannel+0x402>
 8004db8:	0ea4      	lsrs	r4, r4, #26
 8004dba:	3401      	adds	r4, #1
 8004dbc:	f004 0c1f 	and.w	ip, r4, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc0:	f1bc 0f09 	cmp.w	ip, #9
 8004dc4:	f200 80d9 	bhi.w	8004f7a <HAL_ADCEx_InjectedConfigChannel+0x476>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004dc8:	06a5      	lsls	r5, r4, #26
 8004dca:	2401      	movs	r4, #1
 8004dcc:	fa04 f40c 	lsl.w	r4, r4, ip
 8004dd0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004dd4:	4325      	orrs	r5, r4
 8004dd6:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004dda:	0524      	lsls	r4, r4, #20
 8004ddc:	e0da      	b.n	8004f94 <HAL_ADCEx_InjectedConfigChannel+0x490>
  __HAL_LOCK(hadc);
 8004dde:	2002      	movs	r0, #2
}
 8004de0:	b003      	add	sp, #12
 8004de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004de4:	0c65      	lsrs	r5, r4, #17
 8004de6:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004dea:	e7ae      	b.n	8004d4a <HAL_ADCEx_InjectedConfigChannel+0x246>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004dec:	4d22      	ldr	r5, [pc, #136]	; (8004e78 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8004dee:	42ac      	cmp	r4, r5
 8004df0:	f47f af02 	bne.w	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004df4:	024c      	lsls	r4, r1, #9
 8004df6:	f53f aeff 	bmi.w	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004dfa:	491a      	ldr	r1, [pc, #104]	; (8004e64 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8004dfc:	428b      	cmp	r3, r1
 8004dfe:	f43f aefb 	beq.w	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004e02:	68b3      	ldr	r3, [r6, #8]
 8004e04:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004e08:	433b      	orrs	r3, r7
 8004e0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e0e:	60b3      	str	r3, [r6, #8]
}
 8004e10:	e6f2      	b.n	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e12:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8004e14:	f3c4 5604 	ubfx	r6, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e18:	f005 0504 	and.w	r5, r5, #4
 8004e1c:	f103 0414 	add.w	r4, r3, #20
  MODIFY_REG(*preg,
 8004e20:	2707      	movs	r7, #7
 8004e22:	40b7      	lsls	r7, r6
 8004e24:	5966      	ldr	r6, [r4, r5]
 8004e26:	ea26 0607 	bic.w	r6, r6, r7
 8004e2a:	5166      	str	r6, [r4, r5]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004e2c:	695c      	ldr	r4, [r3, #20]
 8004e2e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004e32:	615c      	str	r4, [r3, #20]
}
 8004e34:	e73e      	b.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x1b0>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004e36:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	; 0x34
 8004e3a:	691e      	ldr	r6, [r3, #16]
 8004e3c:	433d      	orrs	r5, r7
 8004e3e:	f426 76ff 	bic.w	r6, r6, #510	; 0x1fe
 8004e42:	4335      	orrs	r5, r6
 8004e44:	f045 0502 	orr.w	r5, r5, #2
 8004e48:	611d      	str	r5, [r3, #16]
 8004e4a:	e719      	b.n	8004c80 <HAL_ADCEx_InjectedConfigChannel+0x17c>
 8004e4c:	407f0000 	.word	0x407f0000
 8004e50:	80080000 	.word	0x80080000
 8004e54:	50000300 	.word	0x50000300
 8004e58:	c3210000 	.word	0xc3210000
 8004e5c:	90c00010 	.word	0x90c00010
 8004e60:	c7520000 	.word	0xc7520000
 8004e64:	50000100 	.word	0x50000100
 8004e68:	2000058c 	.word	0x2000058c
 8004e6c:	053e2d63 	.word	0x053e2d63
 8004e70:	03fff000 	.word	0x03fff000
 8004e74:	04104000 	.word	0x04104000
 8004e78:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e7c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e7e:	680c      	ldr	r4, [r1, #0]
 8004e80:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004e82:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e86:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e8a:	2e00      	cmp	r6, #0
 8004e8c:	f000 809a 	beq.w	8004fc4 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004e94:	b126      	cbz	r6, 8004ea0 <HAL_ADCEx_InjectedConfigChannel+0x39c>
  return __builtin_clz(value);
 8004e96:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e9a:	42b5      	cmp	r5, r6
 8004e9c:	f000 80d7 	beq.w	800504e <HAL_ADCEx_InjectedConfigChannel+0x54a>
 8004ea0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004ea2:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ea4:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ea8:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004eac:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004eb4:	b126      	cbz	r6, 8004ec0 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004eb6:	fab6 f686 	clz	r6, r6
 8004eba:	42b7      	cmp	r7, r6
 8004ebc:	f000 80dc 	beq.w	8005078 <HAL_ADCEx_InjectedConfigChannel+0x574>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ec0:	68ae      	ldr	r6, [r5, #8]
 8004ec2:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ec4:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ec8:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ecc:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004ed0:	b126      	cbz	r6, 8004edc <HAL_ADCEx_InjectedConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004ed2:	fab6 f686 	clz	r6, r6
 8004ed6:	42b7      	cmp	r7, r6
 8004ed8:	f000 80e3 	beq.w	80050a2 <HAL_ADCEx_InjectedConfigChannel+0x59e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004edc:	68ee      	ldr	r6, [r5, #12]
 8004ede:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ee0:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ee2:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004eea:	2e00      	cmp	r6, #0
 8004eec:	f43f ae57 	beq.w	8004b9e <HAL_ADCEx_InjectedConfigChannel+0x9a>
  return __builtin_clz(value);
 8004ef0:	fab6 f686 	clz	r6, r6
 8004ef4:	42be      	cmp	r6, r7
 8004ef6:	f47f ae52 	bne.w	8004b9e <HAL_ADCEx_InjectedConfigChannel+0x9a>
  MODIFY_REG(*preg,
 8004efa:	682c      	ldr	r4, [r5, #0]
 8004efc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004f00:	602c      	str	r4, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004f02:	680c      	ldr	r4, [r1, #0]
}
 8004f04:	e64b      	b.n	8004b9e <HAL_ADCEx_InjectedConfigChannel+0x9a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f06:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	d076      	beq.n	8004ffc <HAL_ADCEx_InjectedConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004f0e:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f12:	3501      	adds	r5, #1
 8004f14:	f005 051f 	and.w	r5, r5, #31
 8004f18:	2d09      	cmp	r5, #9
 8004f1a:	d96f      	bls.n	8004ffc <HAL_ADCEx_InjectedConfigChannel+0x4f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	f000 80de 	beq.w	80050e2 <HAL_ADCEx_InjectedConfigChannel+0x5de>
  return __builtin_clz(value);
 8004f26:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004f2a:	3501      	adds	r5, #1
 8004f2c:	06ad      	lsls	r5, r5, #26
 8004f2e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	f000 80d1 	beq.w	80050de <HAL_ADCEx_InjectedConfigChannel+0x5da>
  return __builtin_clz(value);
 8004f3c:	fab6 f686 	clz	r6, r6
 8004f40:	3601      	adds	r6, #1
 8004f42:	f006 061f 	and.w	r6, r6, #31
 8004f46:	2701      	movs	r7, #1
 8004f48:	fa07 f606 	lsl.w	r6, r7, r6
 8004f4c:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004f52:	2c00      	cmp	r4, #0
 8004f54:	f000 80c1 	beq.w	80050da <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8004f58:	fab4 f484 	clz	r4, r4
 8004f5c:	1c66      	adds	r6, r4, #1
 8004f5e:	f006 061f 	and.w	r6, r6, #31
 8004f62:	2403      	movs	r4, #3
 8004f64:	f06f 071d 	mvn.w	r7, #29
 8004f68:	fb14 7406 	smlabb	r4, r4, r6, r7
 8004f6c:	0524      	lsls	r4, r4, #20
 8004f6e:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8004f72:	e00f      	b.n	8004f94 <HAL_ADCEx_InjectedConfigChannel+0x490>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004f74:	3b01      	subs	r3, #1
 8004f76:	461e      	mov	r6, r3
 8004f78:	e5e5      	b.n	8004b46 <HAL_ADCEx_InjectedConfigChannel+0x42>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004f7a:	06a5      	lsls	r5, r4, #26
 8004f7c:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004f80:	3c1e      	subs	r4, #30
 8004f82:	2601      	movs	r6, #1
 8004f84:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004f88:	0524      	lsls	r4, r4, #20
 8004f8a:	fa06 f60c 	lsl.w	r6, r6, ip
 8004f8e:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8004f92:	4335      	orrs	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f94:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f96:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8004f9a:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f9c:	f00c 0c04 	and.w	ip, ip, #4
 8004fa0:	f103 0e14 	add.w	lr, r3, #20
  MODIFY_REG(*preg,
 8004fa4:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8004fa8:	fa05 f604 	lsl.w	r6, r5, r4
 8004fac:	2707      	movs	r7, #7
 8004fae:	f85e 500c 	ldr.w	r5, [lr, ip]
 8004fb2:	fa07 f404 	lsl.w	r4, r7, r4
 8004fb6:	ea25 0404 	bic.w	r4, r5, r4
 8004fba:	4334      	orrs	r4, r6
 8004fbc:	f84e 400c 	str.w	r4, [lr, ip]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004fc0:	680c      	ldr	r4, [r1, #0]
}
 8004fc2:	e5fc      	b.n	8004bbe <HAL_ADCEx_InjectedConfigChannel+0xba>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004fc4:	f3c4 6684 	ubfx	r6, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fc8:	42b5      	cmp	r5, r6
 8004fca:	d040      	beq.n	800504e <HAL_ADCEx_InjectedConfigChannel+0x54a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fcc:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004fce:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fd0:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fd4:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004fd8:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004fdc:	42b7      	cmp	r7, r6
 8004fde:	d04b      	beq.n	8005078 <HAL_ADCEx_InjectedConfigChannel+0x574>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fe0:	68af      	ldr	r7, [r5, #8]
 8004fe2:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fe4:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fe8:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004fec:	42b7      	cmp	r7, r6
 8004fee:	d058      	beq.n	80050a2 <HAL_ADCEx_InjectedConfigChannel+0x59e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ff0:	68ef      	ldr	r7, [r5, #12]
 8004ff2:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ff4:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ff6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004ffa:	e77b      	b.n	8004ef4 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffc:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005000:	2d00      	cmp	r5, #0
 8005002:	d064      	beq.n	80050ce <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8005004:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005008:	3501      	adds	r5, #1
 800500a:	06ad      	lsls	r5, r5, #26
 800500c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8005014:	2e00      	cmp	r6, #0
 8005016:	d058      	beq.n	80050ca <HAL_ADCEx_InjectedConfigChannel+0x5c6>
  return __builtin_clz(value);
 8005018:	fab6 f686 	clz	r6, r6
 800501c:	3601      	adds	r6, #1
 800501e:	f006 061f 	and.w	r6, r6, #31
 8005022:	2701      	movs	r7, #1
 8005024:	fa07 f606 	lsl.w	r6, r7, r6
 8005028:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800502e:	2c00      	cmp	r4, #0
 8005030:	d050      	beq.n	80050d4 <HAL_ADCEx_InjectedConfigChannel+0x5d0>
  return __builtin_clz(value);
 8005032:	fab4 f484 	clz	r4, r4
 8005036:	3401      	adds	r4, #1
 8005038:	f004 041f 	and.w	r4, r4, #31
 800503c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005040:	0524      	lsls	r4, r4, #20
 8005042:	e7a7      	b.n	8004f94 <HAL_ADCEx_InjectedConfigChannel+0x490>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005044:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
 8005046:	f045 0520 	orr.w	r5, r5, #32
 800504a:	65d5      	str	r5, [r2, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 800504c:	e60f      	b.n	8004c6e <HAL_ADCEx_InjectedConfigChannel+0x16a>
  MODIFY_REG(*preg,
 800504e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8005050:	461d      	mov	r5, r3
 8005052:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005056:	f845 4f60 	str.w	r4, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800505a:	6e5c      	ldr	r4, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800505c:	680c      	ldr	r4, [r1, #0]
 800505e:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8005060:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005064:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005068:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800506c:	2e00      	cmp	r6, #0
 800506e:	f47f af1f 	bne.w	8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x3ac>
 8005072:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8005076:	e7b1      	b.n	8004fdc <HAL_ADCEx_InjectedConfigChannel+0x4d8>
  MODIFY_REG(*preg,
 8005078:	f8dc 4000 	ldr.w	r4, [ip]
 800507c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005080:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005084:	68ac      	ldr	r4, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005086:	680c      	ldr	r4, [r1, #0]
 8005088:	68af      	ldr	r7, [r5, #8]
 800508a:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800508e:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005092:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005096:	2e00      	cmp	r6, #0
 8005098:	f47f af18 	bne.w	8004ecc <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 800509c:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80050a0:	e7a4      	b.n	8004fec <HAL_ADCEx_InjectedConfigChannel+0x4e8>
  MODIFY_REG(*preg,
 80050a2:	f8dc 4000 	ldr.w	r4, [ip]
 80050a6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80050aa:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050ae:	68ec      	ldr	r4, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80050b0:	680c      	ldr	r4, [r1, #0]
 80050b2:	68ef      	ldr	r7, [r5, #12]
 80050b4:	f3c4 0612 	ubfx	r6, r4, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050b8:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050ba:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80050be:	2e00      	cmp	r6, #0
 80050c0:	f47f af11 	bne.w	8004ee6 <HAL_ADCEx_InjectedConfigChannel+0x3e2>
 80050c4:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80050c8:	e714      	b.n	8004ef4 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
 80050ca:	2602      	movs	r6, #2
 80050cc:	e7ac      	b.n	8005028 <HAL_ADCEx_InjectedConfigChannel+0x524>
 80050ce:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80050d2:	e79d      	b.n	8005010 <HAL_ADCEx_InjectedConfigChannel+0x50c>
 80050d4:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 80050d8:	e75c      	b.n	8004f94 <HAL_ADCEx_InjectedConfigChannel+0x490>
 80050da:	4c03      	ldr	r4, [pc, #12]	; (80050e8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>)
 80050dc:	e75a      	b.n	8004f94 <HAL_ADCEx_InjectedConfigChannel+0x490>
 80050de:	2602      	movs	r6, #2
 80050e0:	e734      	b.n	8004f4c <HAL_ADCEx_InjectedConfigChannel+0x448>
 80050e2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80050e6:	e724      	b.n	8004f32 <HAL_ADCEx_InjectedConfigChannel+0x42e>
 80050e8:	fe500000 	.word	0xfe500000

080050ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80050ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050ee:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050f2:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80050f4:	2a01      	cmp	r2, #1
{
 80050f6:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 80050f8:	d047      	beq.n	800518a <HAL_ADCEx_MultiModeConfigChannel+0x9e>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80050fa:	6804      	ldr	r4, [r0, #0]
 80050fc:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80050fe:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005100:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005102:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005106:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005108:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800510c:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800510e:	d007      	beq.n	8005120 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005110:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005112:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005116:	f041 0120 	orr.w	r1, r1, #32
 800511a:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800511c:	b01d      	add	sp, #116	; 0x74
 800511e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005120:	4d26      	ldr	r5, [pc, #152]	; (80051bc <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8005122:	68aa      	ldr	r2, [r5, #8]
 8005124:	0752      	lsls	r2, r2, #29
 8005126:	d50a      	bpl.n	800513e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005128:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800512a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800512c:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8005130:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005132:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800513a:	b01d      	add	sp, #116	; 0x74
 800513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800513e:	68a0      	ldr	r0, [r4, #8]
 8005140:	f010 0004 	ands.w	r0, r0, #4
 8005144:	d1f1      	bne.n	800512a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005146:	b31e      	cbz	r6, 8005190 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005148:	f8df e074 	ldr.w	lr, [pc, #116]	; 80051c0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800514c:	684f      	ldr	r7, [r1, #4]
 800514e:	f8de 2008 	ldr.w	r2, [lr, #8]
 8005152:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8005156:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800515a:	433a      	orrs	r2, r7
 800515c:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8005160:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005164:	68a2      	ldr	r2, [r4, #8]
 8005166:	07d4      	lsls	r4, r2, #31
 8005168:	d426      	bmi.n	80051b8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800516a:	68a8      	ldr	r0, [r5, #8]
 800516c:	f010 0001 	ands.w	r0, r0, #1
 8005170:	d119      	bne.n	80051a6 <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 8005172:	688a      	ldr	r2, [r1, #8]
 8005174:	f8de 1008 	ldr.w	r1, [lr, #8]
 8005178:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 800517c:	4332      	orrs	r2, r6
 800517e:	f021 010f 	bic.w	r1, r1, #15
 8005182:	430a      	orrs	r2, r1
 8005184:	f8ce 2008 	str.w	r2, [lr, #8]
 8005188:	e7d4      	b.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 800518a:	2002      	movs	r0, #2
}
 800518c:	b01d      	add	sp, #116	; 0x74
 800518e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005190:	490b      	ldr	r1, [pc, #44]	; (80051c0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8005192:	688a      	ldr	r2, [r1, #8]
 8005194:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005198:	608a      	str	r2, [r1, #8]
 800519a:	68a2      	ldr	r2, [r4, #8]
 800519c:	68a8      	ldr	r0, [r5, #8]
 800519e:	4310      	orrs	r0, r2
 80051a0:	f010 0001 	ands.w	r0, r0, #1
 80051a4:	d001      	beq.n	80051aa <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051a6:	2000      	movs	r0, #0
 80051a8:	e7c4      	b.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x48>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051aa:	688a      	ldr	r2, [r1, #8]
 80051ac:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80051b0:	f022 020f 	bic.w	r2, r2, #15
 80051b4:	608a      	str	r2, [r1, #8]
 80051b6:	e7bd      	b.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 80051b8:	68aa      	ldr	r2, [r5, #8]
 80051ba:	e7bb      	b.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 80051bc:	50000100 	.word	0x50000100
 80051c0:	50000300 	.word	0x50000300

080051c4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80051c4:	b530      	push	{r4, r5, lr}
 80051c6:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d057      	beq.n	8005280 <HAL_COMP_Init+0xbc>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80051d0:	6802      	ldr	r2, [r0, #0]
 80051d2:	6813      	ldr	r3, [r2, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	4604      	mov	r4, r0
 80051d8:	db52      	blt.n	8005280 <HAL_COMP_Init+0xbc>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80051da:	7f43      	ldrb	r3, [r0, #29]
 80051dc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d07b      	beq.n	80052dc <HAL_COMP_Init+0x118>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 80051e4:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 80051e8:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80051ea:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 80051ec:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 80051ee:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 80051f0:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80051f2:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 80051f4:	430b      	orrs	r3, r1
    tmp_csr = (  hcomp->Init.InputMinus
 80051f6:	6921      	ldr	r1, [r4, #16]
 80051f8:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 80051fa:	4940      	ldr	r1, [pc, #256]	; (80052fc <HAL_COMP_Init+0x138>)
 80051fc:	4001      	ands	r1, r0
 80051fe:	430b      	orrs	r3, r1
 8005200:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005202:	6813      	ldr	r3, [r2, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	d501      	bpl.n	800520c <HAL_COMP_Init+0x48>
 8005208:	022d      	lsls	r5, r5, #8
 800520a:	d551      	bpl.n	80052b0 <HAL_COMP_Init+0xec>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800520c:	4b3c      	ldr	r3, [pc, #240]	; (8005300 <HAL_COMP_Init+0x13c>)
 800520e:	429a      	cmp	r2, r3
 8005210:	d06a      	beq.n	80052e8 <HAL_COMP_Init+0x124>
 8005212:	4b3c      	ldr	r3, [pc, #240]	; (8005304 <HAL_COMP_Init+0x140>)
 8005214:	429a      	cmp	r2, r3
 8005216:	d06c      	beq.n	80052f2 <HAL_COMP_Init+0x12e>
 8005218:	3304      	adds	r3, #4
 800521a:	429a      	cmp	r2, r3
 800521c:	bf0b      	itete	eq
 800521e:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 8005222:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 8005226:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 800522a:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800522e:	69a3      	ldr	r3, [r4, #24]
 8005230:	0798      	lsls	r0, r3, #30
 8005232:	d028      	beq.n	8005286 <HAL_COMP_Init+0xc2>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005234:	4d34      	ldr	r5, [pc, #208]	; (8005308 <HAL_COMP_Init+0x144>)
 8005236:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005238:	f013 0f10 	tst.w	r3, #16
 800523c:	bf14      	ite	ne
 800523e:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005240:	4010      	andeq	r0, r2
 8005242:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005244:	4d30      	ldr	r5, [pc, #192]	; (8005308 <HAL_COMP_Init+0x144>)
 8005246:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005248:	f013 0f20 	tst.w	r3, #32
 800524c:	bf14      	ite	ne
 800524e:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005250:	4010      	andeq	r0, r2
 8005252:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005254:	482c      	ldr	r0, [pc, #176]	; (8005308 <HAL_COMP_Init+0x144>)
 8005256:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005258:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800525a:	f013 0f02 	tst.w	r3, #2
 800525e:	bf14      	ite	ne
 8005260:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005262:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005264:	07db      	lsls	r3, r3, #31
 8005266:	6045      	str	r5, [r0, #4]
 8005268:	d51d      	bpl.n	80052a6 <HAL_COMP_Init+0xe2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800526a:	4b27      	ldr	r3, [pc, #156]	; (8005308 <HAL_COMP_Init+0x144>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4311      	orrs	r1, r2
 8005270:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005272:	7f63      	ldrb	r3, [r4, #29]
 8005274:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005278:	b18b      	cbz	r3, 800529e <HAL_COMP_Init+0xda>
  HAL_StatusTypeDef status = HAL_OK;
 800527a:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800527c:	b003      	add	sp, #12
 800527e:	bd30      	pop	{r4, r5, pc}
    status = HAL_ERROR;
 8005280:	2001      	movs	r0, #1
}
 8005282:	b003      	add	sp, #12
 8005284:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005286:	4b20      	ldr	r3, [pc, #128]	; (8005308 <HAL_COMP_Init+0x144>)
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	4011      	ands	r1, r2
 800528c:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800528e:	6819      	ldr	r1, [r3, #0]
 8005290:	400a      	ands	r2, r1
 8005292:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005294:	7f63      	ldrb	r3, [r4, #29]
 8005296:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1ed      	bne.n	800527a <HAL_COMP_Init+0xb6>
      hcomp->State = HAL_COMP_STATE_READY;
 800529e:	2301      	movs	r3, #1
 80052a0:	7763      	strb	r3, [r4, #29]
}
 80052a2:	b003      	add	sp, #12
 80052a4:	bd30      	pop	{r4, r5, pc}
 80052a6:	4918      	ldr	r1, [pc, #96]	; (8005308 <HAL_COMP_Init+0x144>)
 80052a8:	680b      	ldr	r3, [r1, #0]
 80052aa:	4013      	ands	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]
}
 80052ae:	e7f1      	b.n	8005294 <HAL_COMP_Init+0xd0>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052b0:	4b16      	ldr	r3, [pc, #88]	; (800530c <HAL_COMP_Init+0x148>)
 80052b2:	4917      	ldr	r1, [pc, #92]	; (8005310 <HAL_COMP_Init+0x14c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	fba1 1303 	umull	r1, r3, r1, r3
 80052bc:	099b      	lsrs	r3, r3, #6
 80052be:	3301      	adds	r3, #1
 80052c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80052c8:	9b01      	ldr	r3, [sp, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d09e      	beq.n	800520c <HAL_COMP_Init+0x48>
        wait_loop_index--;
 80052ce:	9b01      	ldr	r3, [sp, #4]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80052d4:	9b01      	ldr	r3, [sp, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f9      	bne.n	80052ce <HAL_COMP_Init+0x10a>
 80052da:	e797      	b.n	800520c <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 80052dc:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 80052de:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 80052e0:	f7fe fc86 	bl	8003bf0 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80052e4:	6822      	ldr	r2, [r4, #0]
 80052e6:	e77d      	b.n	80051e4 <HAL_COMP_Init+0x20>
 80052e8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80052ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052f0:	e79d      	b.n	800522e <HAL_COMP_Init+0x6a>
 80052f2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80052f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052fa:	e798      	b.n	800522e <HAL_COMP_Init+0x6a>
 80052fc:	ff007e0f 	.word	0xff007e0f
 8005300:	40010200 	.word	0x40010200
 8005304:	40010204 	.word	0x40010204
 8005308:	40010400 	.word	0x40010400
 800530c:	2000058c 	.word	0x2000058c
 8005310:	053e2d63 	.word	0x053e2d63

08005314 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005314:	b1b0      	cbz	r0, 8005344 <HAL_CORDIC_Init+0x30>
{
 8005316:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005318:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800531c:	4604      	mov	r4, r0
 800531e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005322:	b153      	cbz	r3, 800533a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005324:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005326:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005328:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800532a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 800532e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8005332:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005336:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8005338:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800533a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800533e:	f7fe fccb 	bl	8003cd8 <HAL_CORDIC_MspInit>
 8005342:	e7ef      	b.n	8005324 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8005344:	2001      	movs	r0, #1
}
 8005346:	4770      	bx	lr

08005348 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005348:	4907      	ldr	r1, [pc, #28]	; (8005368 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800534a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800534c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800534e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005356:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005358:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800535a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800535e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005362:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e000ed00 	.word	0xe000ed00

0800536c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800536c:	4b1c      	ldr	r3, [pc, #112]	; (80053e0 <HAL_NVIC_SetPriority+0x74>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005374:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005376:	f1c3 0e07 	rsb	lr, r3, #7
 800537a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800537e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005382:	bf28      	it	cs
 8005384:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005388:	f1bc 0f06 	cmp.w	ip, #6
 800538c:	d91b      	bls.n	80053c6 <HAL_NVIC_SetPriority+0x5a>
 800538e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005390:	f04f 3cff 	mov.w	ip, #4294967295
 8005394:	fa0c fc03 	lsl.w	ip, ip, r3
 8005398:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800539c:	f04f 3cff 	mov.w	ip, #4294967295
 80053a0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80053a4:	ea21 010c 	bic.w	r1, r1, ip
 80053a8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80053aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053ac:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80053b0:	db0c      	blt.n	80053cc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80053b6:	0109      	lsls	r1, r1, #4
 80053b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80053bc:	b2c9      	uxtb	r1, r1
 80053be:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80053c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80053c6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c8:	4613      	mov	r3, r2
 80053ca:	e7e7      	b.n	800539c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <HAL_NVIC_SetPriority+0x78>)
 80053ce:	f000 000f 	and.w	r0, r0, #15
 80053d2:	0109      	lsls	r1, r1, #4
 80053d4:	4403      	add	r3, r0
 80053d6:	b2c9      	uxtb	r1, r1
 80053d8:	7619      	strb	r1, [r3, #24]
 80053da:	f85d fb04 	ldr.w	pc, [sp], #4
 80053de:	bf00      	nop
 80053e0:	e000ed00 	.word	0xe000ed00
 80053e4:	e000ecfc 	.word	0xe000ecfc

080053e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80053e8:	2800      	cmp	r0, #0
 80053ea:	db07      	blt.n	80053fc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ec:	4a04      	ldr	r2, [pc, #16]	; (8005400 <HAL_NVIC_EnableIRQ+0x18>)
 80053ee:	0941      	lsrs	r1, r0, #5
 80053f0:	2301      	movs	r3, #1
 80053f2:	f000 001f 	and.w	r0, r0, #31
 80053f6:	4083      	lsls	r3, r0
 80053f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	e000e100 	.word	0xe000e100

08005404 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005404:	3801      	subs	r0, #1
 8005406:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800540a:	d210      	bcs.n	800542e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800540c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800540e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005412:	4c08      	ldr	r4, [pc, #32]	; (8005434 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005414:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005416:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800541a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800541e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005420:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005422:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005424:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8005426:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800542a:	6119      	str	r1, [r3, #16]
 800542c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800542e:	2001      	movs	r0, #1
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	e000ed00 	.word	0xe000ed00

08005438 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop

0800543c <HAL_SYSTICK_IRQHandler>:
{
 800543c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800543e:	f7ff fffb 	bl	8005438 <HAL_SYSTICK_Callback>
}
 8005442:	bd08      	pop	{r3, pc}

08005444 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005444:	b188      	cbz	r0, 800546a <HAL_DAC_Init+0x26>
{
 8005446:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005448:	7903      	ldrb	r3, [r0, #4]
 800544a:	4604      	mov	r4, r0
 800544c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005450:	b13b      	cbz	r3, 8005462 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005452:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005454:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005456:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005458:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800545a:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800545c:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800545e:	4618      	mov	r0, r3
}
 8005460:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005462:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005464:	f7fe fc50 	bl	8003d08 <HAL_DAC_MspInit>
 8005468:	e7f3      	b.n	8005452 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800546a:	2001      	movs	r0, #1
}
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop

08005470 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005470:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005472:	f8d1 c008 	ldr.w	ip, [r1, #8]
  __HAL_LOCK(hdac);
 8005476:	2b01      	cmp	r3, #1
 8005478:	f000 80d0 	beq.w	800561c <HAL_DAC_ConfigChannel+0x1ac>
 800547c:	2301      	movs	r3, #1
{
 800547e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005482:	f1bc 0f04 	cmp.w	ip, #4
  __HAL_LOCK(hdac);
 8005486:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005488:	f04f 0302 	mov.w	r3, #2
 800548c:	4605      	mov	r5, r0
 800548e:	460f      	mov	r7, r1
 8005490:	4616      	mov	r6, r2
 8005492:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005494:	d07d      	beq.n	8005592 <HAL_DAC_ConfigChannel+0x122>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005496:	6800      	ldr	r0, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005498:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d108      	bne.n	80054b4 <HAL_DAC_ConfigChannel+0x44>
    tmpreg1 = hdac->Instance->CCR;
 80054a2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054a4:	6a3b      	ldr	r3, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80054a6:	211f      	movs	r1, #31
 80054a8:	40b1      	lsls	r1, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054aa:	40b3      	lsls	r3, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80054ac:	ea22 0201 	bic.w	r2, r2, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054b0:	4313      	orrs	r3, r2
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80054b2:	6383      	str	r3, [r0, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80054b4:	69ba      	ldr	r2, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 80054b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80054b8:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80054ba:	2a01      	cmp	r2, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80054bc:	fa01 f106 	lsl.w	r1, r1, r6
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80054c0:	d063      	beq.n	800558a <HAL_DAC_ConfigChannel+0x11a>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80054c2:	2a02      	cmp	r2, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	bf16      	itet	ne
 80054c8:	fab2 fe82 	clzne	lr, r2
    connectOnChip = DAC_MCR_MODE1_0;
 80054cc:	f04f 0e01 	moveq.w	lr, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80054d0:	ea4f 1e5e 	movne.w	lr, lr, lsr #5
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80054d4:	797c      	ldrb	r4, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80054d6:	f897 8004 	ldrb.w	r8, [r7, #4]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80054da:	f1a4 0401 	sub.w	r4, r4, #1
 80054de:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80054e2:	f1a8 0801 	sub.w	r8, r8, #1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80054e6:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80054e8:	fab8 f888 	clz	r8, r8
 80054ec:	ea4f 1858 	mov.w	r8, r8, lsr #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80054f0:	0264      	lsls	r4, r4, #9
 80054f2:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
 80054f6:	ea44 040c 	orr.w	r4, r4, ip
 80054fa:	ea44 040e 	orr.w	r4, r4, lr
 80054fe:	4314      	orrs	r4, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005504:	40b2      	lsls	r2, r6
 8005506:	430a      	orrs	r2, r1
 8005508:	ea23 0802 	bic.w	r8, r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800550c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005510:	40b3      	lsls	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005512:	ea28 0803 	bic.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b02      	cmp	r3, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800551a:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800551e:	d074      	beq.n	800560a <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005520:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005524:	40b4      	lsls	r4, r6
 8005526:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800552a:	63c4      	str	r4, [r0, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800552c:	6803      	ldr	r3, [r0, #0]
 800552e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005532:	40b2      	lsls	r2, r6
 8005534:	ea23 0302 	bic.w	r3, r3, r2
 8005538:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800553a:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 800553e:	6804      	ldr	r4, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005540:	f640 71fe 	movw	r1, #4094	; 0xffe
 8005544:	40b1      	lsls	r1, r6
 8005546:	ea24 0401 	bic.w	r4, r4, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800554a:	fa02 f106 	lsl.w	r1, r2, r6
 800554e:	4321      	orrs	r1, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005550:	019b      	lsls	r3, r3, #6
  hdac->Instance->CR = tmpreg1;
 8005552:	6001      	str	r1, [r0, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005554:	f3c2 0283 	ubfx	r2, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005558:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800555c:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800555e:	24c0      	movs	r4, #192	; 0xc0
 8005560:	6802      	ldr	r2, [r0, #0]
 8005562:	40b4      	lsls	r4, r6
 8005564:	ea22 0204 	bic.w	r2, r2, r4
 8005568:	6002      	str	r2, [r0, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800556a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800556c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005570:	40b1      	lsls	r1, r6
 8005572:	ea22 0201 	bic.w	r2, r2, r1
 8005576:	40b3      	lsls	r3, r6
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005578:	2100      	movs	r1, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800557a:	4313      	orrs	r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 800557c:	2201      	movs	r2, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800557e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8005580:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8005582:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 8005584:	7169      	strb	r1, [r5, #5]
}
 8005586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800558a:	697a      	ldr	r2, [r7, #20]
    connectOnChip = 0x00000000UL;
 800558c:	f04f 0e00 	mov.w	lr, #0
 8005590:	e7a0      	b.n	80054d4 <HAL_DAC_ConfigChannel+0x64>
    tickstart = HAL_GetTick();
 8005592:	f7fe ff35 	bl	8004400 <HAL_GetTick>
 8005596:	4604      	mov	r4, r0
    if (Channel == DAC_CHANNEL_1)
 8005598:	b12e      	cbz	r6, 80055a6 <HAL_DAC_ConfigChannel+0x136>
 800559a:	e014      	b.n	80055c6 <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800559c:	f7fe ff30 	bl	8004400 <HAL_GetTick>
 80055a0:	1b03      	subs	r3, r0, r4
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d83c      	bhi.n	8005620 <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	d4f6      	bmi.n	800559c <HAL_DAC_ConfigChannel+0x12c>
      HAL_Delay(1);
 80055ae:	2001      	movs	r0, #1
 80055b0:	f7fe ff2c 	bl	800440c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055b4:	6828      	ldr	r0, [r5, #0]
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	6403      	str	r3, [r0, #64]	; 0x40
 80055ba:	e00e      	b.n	80055da <HAL_DAC_ConfigChannel+0x16a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80055bc:	f7fe ff20 	bl	8004400 <HAL_GetTick>
 80055c0:	1b03      	subs	r3, r0, r4
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d82c      	bhi.n	8005620 <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80055c6:	682b      	ldr	r3, [r5, #0]
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	dbf6      	blt.n	80055bc <HAL_DAC_ConfigChannel+0x14c>
      HAL_Delay(1U);
 80055ce:	2001      	movs	r0, #1
 80055d0:	f7fe ff1c 	bl	800440c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055d4:	6828      	ldr	r0, [r5, #0]
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80055da:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80055dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80055de:	f8d7 c008 	ldr.w	ip, [r7, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80055e2:	f006 0610 	and.w	r6, r6, #16
 80055e6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80055ea:	40b1      	lsls	r1, r6
 80055ec:	40b2      	lsls	r2, r6
 80055ee:	ea23 0301 	bic.w	r3, r3, r1
 80055f2:	4313      	orrs	r3, r2
 80055f4:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80055f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80055f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fa:	21ff      	movs	r1, #255	; 0xff
 80055fc:	40b1      	lsls	r1, r6
 80055fe:	40b2      	lsls	r2, r6
 8005600:	ea23 0301 	bic.w	r3, r3, r1
 8005604:	4313      	orrs	r3, r2
 8005606:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005608:	e748      	b.n	800549c <HAL_DAC_ConfigChannel+0x2c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800560a:	f000 fe2f 	bl	800626c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800560e:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <HAL_DAC_ConfigChannel+0x1d0>)
 8005610:	4298      	cmp	r0, r3
 8005612:	d90d      	bls.n	8005630 <HAL_DAC_ConfigChannel+0x1c0>
  hdac->Instance->MCR = tmpreg1;
 8005614:	6828      	ldr	r0, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005616:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 800561a:	e783      	b.n	8005524 <HAL_DAC_ConfigChannel+0xb4>
  __HAL_LOCK(hdac);
 800561c:	2002      	movs	r0, #2
}
 800561e:	4770      	bx	lr
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005620:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005622:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005624:	f043 0308 	orr.w	r3, r3, #8
 8005628:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 800562a:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800562c:	712a      	strb	r2, [r5, #4]
          return HAL_TIMEOUT;
 800562e:	e7aa      	b.n	8005586 <HAL_DAC_ConfigChannel+0x116>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005630:	4b04      	ldr	r3, [pc, #16]	; (8005644 <HAL_DAC_ConfigChannel+0x1d4>)
 8005632:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005634:	bf88      	it	hi
 8005636:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 800563a:	6828      	ldr	r0, [r5, #0]
 800563c:	e772      	b.n	8005524 <HAL_DAC_ConfigChannel+0xb4>
 800563e:	bf00      	nop
 8005640:	09896800 	.word	0x09896800
 8005644:	04c4b400 	.word	0x04c4b400

08005648 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005648:	2800      	cmp	r0, #0
 800564a:	d078      	beq.n	800573e <HAL_DMA_Init+0xf6>
{
 800564c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800564e:	4b3d      	ldr	r3, [pc, #244]	; (8005744 <HAL_DMA_Init+0xfc>)
 8005650:	6804      	ldr	r4, [r0, #0]
 8005652:	429c      	cmp	r4, r3
 8005654:	d95f      	bls.n	8005716 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005656:	4a3c      	ldr	r2, [pc, #240]	; (8005748 <HAL_DMA_Init+0x100>)
 8005658:	4b3c      	ldr	r3, [pc, #240]	; (800574c <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 800565a:	493d      	ldr	r1, [pc, #244]	; (8005750 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800565c:	4422      	add	r2, r4
 800565e:	fba3 3202 	umull	r3, r2, r3, r2
 8005662:	0912      	lsrs	r2, r2, #4
 8005664:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005666:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005668:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800566a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800566e:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005670:	4e36      	ldr	r6, [pc, #216]	; (800574c <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005672:	4f34      	ldr	r7, [pc, #208]	; (8005744 <HAL_DMA_Init+0xfc>)
 8005674:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005678:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 800567a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800567c:	430b      	orrs	r3, r1
 800567e:	6941      	ldr	r1, [r0, #20]
 8005680:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005682:	6981      	ldr	r1, [r0, #24]
 8005684:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 8005686:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005688:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800568c:	69c1      	ldr	r1, [r0, #28]
 800568e:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005690:	b2e1      	uxtb	r1, r4
 8005692:	3908      	subs	r1, #8
 8005694:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005698:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800569a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800569e:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 80056a0:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 80056a4:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80056a6:	4e2b      	ldr	r6, [pc, #172]	; (8005754 <HAL_DMA_Init+0x10c>)
 80056a8:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056aa:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80056ae:	42bc      	cmp	r4, r7
 80056b0:	bf98      	it	ls
 80056b2:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056b4:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056b8:	4c28      	ldr	r4, [pc, #160]	; (800575c <HAL_DMA_Init+0x114>)
 80056ba:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056bc:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056c0:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056c2:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056c6:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056c8:	6484      	str	r4, [r0, #72]	; 0x48
 80056ca:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056ce:	d02b      	beq.n	8005728 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056d0:	6845      	ldr	r5, [r0, #4]
 80056d2:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80056d4:	3d01      	subs	r5, #1
 80056d6:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056d8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056dc:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80056e0:	d828      	bhi.n	8005734 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056e2:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056e4:	4d1f      	ldr	r5, [pc, #124]	; (8005764 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056e6:	4a20      	ldr	r2, [pc, #128]	; (8005768 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056e8:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80056ea:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056ec:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80056ee:	f004 041f 	and.w	r4, r4, #31
 80056f2:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056f6:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056f8:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80056fc:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056fe:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005700:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005702:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005704:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005706:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005708:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800570c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8005710:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8005712:	4618      	mov	r0, r3
}
 8005714:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005716:	4a15      	ldr	r2, [pc, #84]	; (800576c <HAL_DMA_Init+0x124>)
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 800571a:	4915      	ldr	r1, [pc, #84]	; (8005770 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800571c:	4422      	add	r2, r4
 800571e:	fba3 3202 	umull	r3, r2, r3, r2
 8005722:	0912      	lsrs	r2, r2, #4
 8005724:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8005726:	e79e      	b.n	8005666 <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005728:	2400      	movs	r4, #0
 800572a:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800572c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005730:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8005734:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8005736:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800573a:	65c3      	str	r3, [r0, #92]	; 0x5c
 800573c:	e7e1      	b.n	8005702 <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 800573e:	2001      	movs	r0, #1
}
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40020407 	.word	0x40020407
 8005748:	bffdfbf8 	.word	0xbffdfbf8
 800574c:	cccccccd 	.word	0xcccccccd
 8005750:	40020400 	.word	0x40020400
 8005754:	40020800 	.word	0x40020800
 8005758:	40020820 	.word	0x40020820
 800575c:	40020880 	.word	0x40020880
 8005760:	1000823f 	.word	0x1000823f
 8005764:	40020940 	.word	0x40020940
 8005768:	40020900 	.word	0x40020900
 800576c:	bffdfff8 	.word	0xbffdfff8
 8005770:	40020000 	.word	0x40020000

08005774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005778:	680c      	ldr	r4, [r1, #0]
{
 800577a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 800577c:	2c00      	cmp	r4, #0
 800577e:	d07d      	beq.n	800587c <HAL_GPIO_Init+0x108>
 8005780:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005784:	4e71      	ldr	r6, [pc, #452]	; (800594c <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8005786:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005788:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800578c:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800578e:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8005792:	ea17 0a04 	ands.w	sl, r7, r4
 8005796:	d06b      	beq.n	8005870 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005798:	f8de 1004 	ldr.w	r1, [lr, #4]
 800579c:	f001 0203 	and.w	r2, r1, #3
 80057a0:	1e55      	subs	r5, r2, #1
 80057a2:	2d01      	cmp	r5, #1
 80057a4:	d96d      	bls.n	8005882 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057a6:	2a03      	cmp	r2, #3
 80057a8:	f040 80b1 	bne.w	800590e <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057ac:	fa02 f20c 	lsl.w	r2, r2, ip
 80057b0:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 80057b2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057b4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057b6:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057b8:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 80057bc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057be:	d057      	beq.n	8005870 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c0:	4d63      	ldr	r5, [pc, #396]	; (8005950 <HAL_GPIO_Init+0x1dc>)
 80057c2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	662a      	str	r2, [r5, #96]	; 0x60
 80057ca:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80057cc:	f002 0201 	and.w	r2, r2, #1
 80057d0:	9203      	str	r2, [sp, #12]
 80057d2:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80057d4:	f023 0203 	bic.w	r2, r3, #3
 80057d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80057dc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057e0:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80057e4:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057e6:	00bf      	lsls	r7, r7, #2
 80057e8:	f04f 080f 	mov.w	r8, #15
 80057ec:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057f0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057f4:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057f8:	d01a      	beq.n	8005830 <HAL_GPIO_Init+0xbc>
 80057fa:	4d56      	ldr	r5, [pc, #344]	; (8005954 <HAL_GPIO_Init+0x1e0>)
 80057fc:	42a8      	cmp	r0, r5
 80057fe:	f000 8092 	beq.w	8005926 <HAL_GPIO_Init+0x1b2>
 8005802:	4d55      	ldr	r5, [pc, #340]	; (8005958 <HAL_GPIO_Init+0x1e4>)
 8005804:	42a8      	cmp	r0, r5
 8005806:	f000 8093 	beq.w	8005930 <HAL_GPIO_Init+0x1bc>
 800580a:	4d54      	ldr	r5, [pc, #336]	; (800595c <HAL_GPIO_Init+0x1e8>)
 800580c:	42a8      	cmp	r0, r5
 800580e:	f000 8083 	beq.w	8005918 <HAL_GPIO_Init+0x1a4>
 8005812:	4d53      	ldr	r5, [pc, #332]	; (8005960 <HAL_GPIO_Init+0x1ec>)
 8005814:	42a8      	cmp	r0, r5
 8005816:	f000 8092 	beq.w	800593e <HAL_GPIO_Init+0x1ca>
 800581a:	4d52      	ldr	r5, [pc, #328]	; (8005964 <HAL_GPIO_Init+0x1f0>)
 800581c:	42a8      	cmp	r0, r5
 800581e:	bf0c      	ite	eq
 8005820:	f04f 0805 	moveq.w	r8, #5
 8005824:	f04f 0806 	movne.w	r8, #6
 8005828:	fa08 f707 	lsl.w	r7, r8, r7
 800582c:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005830:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8005834:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8005836:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800583a:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 800583c:	bf54      	ite	pl
 800583e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8005840:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8005844:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8005846:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005848:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 800584a:	bf54      	ite	pl
 800584c:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800584e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8005852:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8005854:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005856:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8005858:	bf54      	ite	pl
 800585a:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800585c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8005860:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005862:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005864:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8005866:	bf54      	ite	pl
 8005868:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800586a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 800586e:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8005870:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005872:	fa34 f203 	lsrs.w	r2, r4, r3
 8005876:	f10c 0c02 	add.w	ip, ip, #2
 800587a:	d188      	bne.n	800578e <HAL_GPIO_Init+0x1a>
  }
}
 800587c:	b005      	add	sp, #20
 800587e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005882:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005886:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800588a:	f04f 0803 	mov.w	r8, #3
 800588e:	fa08 f80c 	lsl.w	r8, r8, ip
 8005892:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005896:	fa05 f50c 	lsl.w	r5, r5, ip
 800589a:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 800589e:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058a0:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 80058a4:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058a8:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058ac:	f3c1 1700 	ubfx	r7, r1, #4, #1
 80058b0:	409f      	lsls	r7, r3
 80058b2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80058b6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80058b8:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058ba:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058be:	f8de 7008 	ldr.w	r7, [lr, #8]
 80058c2:	fa07 f70c 	lsl.w	r7, r7, ip
 80058c6:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ca:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80058cc:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ce:	fa02 f20c 	lsl.w	r2, r2, ip
 80058d2:	f47f af6e 	bne.w	80057b2 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 80058d6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80058da:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058de:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80058e2:	f8d9 7020 	ldr.w	r7, [r9, #32]
 80058e6:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058e8:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058ec:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058f0:	fa07 f708 	lsl.w	r7, r7, r8
 80058f4:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058f6:	270f      	movs	r7, #15
 80058f8:	fa07 f808 	lsl.w	r8, r7, r8
 80058fc:	9f00      	ldr	r7, [sp, #0]
 80058fe:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005902:	9f01      	ldr	r7, [sp, #4]
 8005904:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8005908:	f8c9 7020 	str.w	r7, [r9, #32]
 800590c:	e751      	b.n	80057b2 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800590e:	2503      	movs	r5, #3
 8005910:	fa05 f50c 	lsl.w	r5, r5, ip
 8005914:	43ed      	mvns	r5, r5
 8005916:	e7cf      	b.n	80058b8 <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005918:	f04f 0803 	mov.w	r8, #3
 800591c:	fa08 f707 	lsl.w	r7, r8, r7
 8005920:	ea49 0907 	orr.w	r9, r9, r7
 8005924:	e784      	b.n	8005830 <HAL_GPIO_Init+0xbc>
 8005926:	fa0b f707 	lsl.w	r7, fp, r7
 800592a:	ea49 0907 	orr.w	r9, r9, r7
 800592e:	e77f      	b.n	8005830 <HAL_GPIO_Init+0xbc>
 8005930:	f04f 0802 	mov.w	r8, #2
 8005934:	fa08 f707 	lsl.w	r7, r8, r7
 8005938:	ea49 0907 	orr.w	r9, r9, r7
 800593c:	e778      	b.n	8005830 <HAL_GPIO_Init+0xbc>
 800593e:	f04f 0804 	mov.w	r8, #4
 8005942:	fa08 f707 	lsl.w	r7, r8, r7
 8005946:	ea49 0907 	orr.w	r9, r9, r7
 800594a:	e771      	b.n	8005830 <HAL_GPIO_Init+0xbc>
 800594c:	40010400 	.word	0x40010400
 8005950:	40021000 	.word	0x40021000
 8005954:	48000400 	.word	0x48000400
 8005958:	48000800 	.word	0x48000800
 800595c:	48000c00 	.word	0x48000c00
 8005960:	48001000 	.word	0x48001000
 8005964:	48001400 	.word	0x48001400

08005968 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005968:	2800      	cmp	r0, #0
 800596a:	d073      	beq.n	8005a54 <HAL_OPAMP_Init+0xec>
{
 800596c:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800596e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005972:	2b05      	cmp	r3, #5
{
 8005974:	b083      	sub	sp, #12
 8005976:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005978:	d057      	beq.n	8005a2a <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800597a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800597e:	2b02      	cmp	r3, #2
 8005980:	d053      	beq.n	8005a2a <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005982:	4b35      	ldr	r3, [pc, #212]	; (8005a58 <HAL_OPAMP_Init+0xf0>)
 8005984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	661a      	str	r2, [r3, #96]	; 0x60
 800598c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005996:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800599a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800599e:	b90b      	cbnz	r3, 80059a4 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80059a0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80059a4:	4620      	mov	r0, r4
 80059a6:	f7fe f9c7 	bl	8003d38 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80059aa:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80059ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80059ae:	f023 0220 	bic.w	r2, r3, #32
 80059b2:	2a40      	cmp	r2, #64	; 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 80059b4:	6822      	ldr	r2, [r4, #0]
 80059b6:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80059b8:	d03a      	beq.n	8005a30 <HAL_OPAMP_Init+0xc8>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80059ba:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 80059bc:	f021 0110 	bic.w	r1, r1, #16
 80059c0:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 80059c2:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 80059c4:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80059c6:	432b      	orrs	r3, r5
 80059c8:	4303      	orrs	r3, r0
 80059ca:	6920      	ldr	r0, [r4, #16]
 80059cc:	6811      	ldr	r1, [r2, #0]
 80059ce:	4303      	orrs	r3, r0
 80059d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80059d2:	4303      	orrs	r3, r0
 80059d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80059d6:	4303      	orrs	r3, r0
 80059d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80059da:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 80059de:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80059e0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80059e4:	481d      	ldr	r0, [pc, #116]	; (8005a5c <HAL_OPAMP_Init+0xf4>)
 80059e6:	4008      	ands	r0, r1
 80059e8:	7d21      	ldrb	r1, [r4, #20]
 80059ea:	f1a1 0101 	sub.w	r1, r1, #1
 80059ee:	fab1 f181 	clz	r1, r1
 80059f2:	4303      	orrs	r3, r0
 80059f4:	0949      	lsrs	r1, r1, #5
 80059f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80059fa:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80059fc:	6993      	ldr	r3, [r2, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	db09      	blt.n	8005a16 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005a02:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8005a06:	6991      	ldr	r1, [r2, #24]
 8005a08:	4303      	orrs	r3, r0
 8005a0a:	6a20      	ldr	r0, [r4, #32]
 8005a0c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005a10:	4303      	orrs	r3, r0
 8005a12:	430b      	orrs	r3, r1
 8005a14:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005a16:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8005a1a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005a1e:	b9b3      	cbnz	r3, 8005a4e <HAL_OPAMP_Init+0xe6>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005a20:	2301      	movs	r3, #1
 8005a22:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8005a26:	b003      	add	sp, #12
 8005a28:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005a2a:	2001      	movs	r0, #1
}
 8005a2c:	b003      	add	sp, #12
 8005a2e:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8005a30:	f021 0110 	bic.w	r1, r1, #16
 8005a34:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8005a36:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8005a38:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8005a3a:	4303      	orrs	r3, r0
 8005a3c:	6920      	ldr	r0, [r4, #16]
 8005a3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a40:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005a42:	4303      	orrs	r3, r0
 8005a44:	430b      	orrs	r3, r1
 8005a46:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005a48:	6811      	ldr	r1, [r2, #0]
 8005a4a:	432b      	orrs	r3, r5
 8005a4c:	e7c5      	b.n	80059da <HAL_OPAMP_Init+0x72>
    return status;
 8005a4e:	2000      	movs	r0, #0
}
 8005a50:	b003      	add	sp, #12
 8005a52:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005a54:	2001      	movs	r0, #1
}
 8005a56:	4770      	bx	lr
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	e0003e11 	.word	0xe0003e11

08005a60 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a60:	4a37      	ldr	r2, [pc, #220]	; (8005b40 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a62:	b960      	cbnz	r0, 8005a7e <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a64:	6813      	ldr	r3, [r2, #0]
 8005a66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a6e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a72:	d01d      	beq.n	8005ab0 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a7c:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a7e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005a82:	d007      	beq.n	8005a94 <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a84:	6813      	ldr	r3, [r2, #0]
 8005a86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a8e:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a90:	6013      	str	r3, [r2, #0]
}
 8005a92:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a94:	6813      	ldr	r3, [r2, #0]
 8005a96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a9e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005aa2:	d02b      	beq.n	8005afc <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8005aa8:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005aaa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005aae:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ab8:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aba:	4822      	ldr	r0, [pc, #136]	; (8005b44 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8005abc:	4922      	ldr	r1, [pc, #136]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005abe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ac6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ac8:	6803      	ldr	r3, [r0, #0]
 8005aca:	2032      	movs	r0, #50	; 0x32
 8005acc:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ad0:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ad2:	fba1 1303 	umull	r1, r3, r1, r3
 8005ad6:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ad8:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ada:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ade:	d506      	bpl.n	8005aee <HAL_PWREx_ControlVoltageScaling+0x8e>
 8005ae0:	e000      	b.n	8005ae4 <HAL_PWREx_ControlVoltageScaling+0x84>
 8005ae2:	b123      	cbz	r3, 8005aee <HAL_PWREx_ControlVoltageScaling+0x8e>
 8005ae4:	6951      	ldr	r1, [r2, #20]
 8005ae6:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005ae8:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aec:	d4f9      	bmi.n	8005ae2 <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8005af4:	bf54      	ite	pl
 8005af6:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8005af8:	2003      	movmi	r0, #3
 8005afa:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b04:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b06:	480f      	ldr	r0, [pc, #60]	; (8005b44 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8005b08:	490f      	ldr	r1, [pc, #60]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b12:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b14:	6803      	ldr	r3, [r0, #0]
 8005b16:	2032      	movs	r0, #50	; 0x32
 8005b18:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b1c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b1e:	fba1 1303 	umull	r1, r3, r1, r3
 8005b22:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b24:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b26:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b2a:	d5e0      	bpl.n	8005aee <HAL_PWREx_ControlVoltageScaling+0x8e>
 8005b2c:	e001      	b.n	8005b32 <HAL_PWREx_ControlVoltageScaling+0xd2>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0dd      	beq.n	8005aee <HAL_PWREx_ControlVoltageScaling+0x8e>
 8005b32:	6951      	ldr	r1, [r2, #20]
 8005b34:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005b36:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b3a:	d5d8      	bpl.n	8005aee <HAL_PWREx_ControlVoltageScaling+0x8e>
 8005b3c:	e7f7      	b.n	8005b2e <HAL_PWREx_ControlVoltageScaling+0xce>
 8005b3e:	bf00      	nop
 8005b40:	40007000 	.word	0x40007000
 8005b44:	2000058c 	.word	0x2000058c
 8005b48:	431bde83 	.word	0x431bde83

08005b4c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005b4c:	4a02      	ldr	r2, [pc, #8]	; (8005b58 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005b4e:	6893      	ldr	r3, [r2, #8]
 8005b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b54:	6093      	str	r3, [r2, #8]
}
 8005b56:	4770      	bx	lr
 8005b58:	40007000 	.word	0x40007000

08005b5c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f000 81c3 	beq.w	8005ee8 <HAL_RCC_OscConfig+0x38c>
{
 8005b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b66:	6803      	ldr	r3, [r0, #0]
 8005b68:	07d9      	lsls	r1, r3, #31
{
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b6e:	d52d      	bpl.n	8005bcc <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b70:	49a6      	ldr	r1, [pc, #664]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005b72:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b74:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b76:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b7a:	2a0c      	cmp	r2, #12
 8005b7c:	f000 810a 	beq.w	8005d94 <HAL_RCC_OscConfig+0x238>
 8005b80:	2a08      	cmp	r2, #8
 8005b82:	f000 810c 	beq.w	8005d9e <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b86:	6863      	ldr	r3, [r4, #4]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	f000 8133 	beq.w	8005df6 <HAL_RCC_OscConfig+0x29a>
 8005b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b94:	f000 819b 	beq.w	8005ece <HAL_RCC_OscConfig+0x372>
 8005b98:	4d9c      	ldr	r5, [pc, #624]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005b9a:	682a      	ldr	r2, [r5, #0]
 8005b9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ba0:	602a      	str	r2, [r5, #0]
 8005ba2:	682a      	ldr	r2, [r5, #0]
 8005ba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ba8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 8128 	bne.w	8005e00 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb0:	f7fe fc26 	bl	8004400 <HAL_GetTick>
 8005bb4:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bb6:	e005      	b.n	8005bc4 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb8:	f7fe fc22 	bl	8004400 <HAL_GetTick>
 8005bbc:	1b80      	subs	r0, r0, r6
 8005bbe:	2864      	cmp	r0, #100	; 0x64
 8005bc0:	f200 8142 	bhi.w	8005e48 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	039f      	lsls	r7, r3, #14
 8005bc8:	d4f6      	bmi.n	8005bb8 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	079e      	lsls	r6, r3, #30
 8005bce:	d528      	bpl.n	8005c22 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bd0:	4a8e      	ldr	r2, [pc, #568]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005bd2:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bd4:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bd6:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	f000 80ec 	beq.w	8005db8 <HAL_RCC_OscConfig+0x25c>
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	f000 80ee 	beq.w	8005dc2 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005be6:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005be8:	4d88      	ldr	r5, [pc, #544]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 811d 	beq.w	8005e2a <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf6:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fe fc02 	bl	8004400 <HAL_GetTick>
 8005bfc:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bfe:	e005      	b.n	8005c0c <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c00:	f7fe fbfe 	bl	8004400 <HAL_GetTick>
 8005c04:	1b80      	subs	r0, r0, r6
 8005c06:	2802      	cmp	r0, #2
 8005c08:	f200 811e 	bhi.w	8005e48 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	0558      	lsls	r0, r3, #21
 8005c10:	d5f6      	bpl.n	8005c00 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c12:	686b      	ldr	r3, [r5, #4]
 8005c14:	6922      	ldr	r2, [r4, #16]
 8005c16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005c1e:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	071a      	lsls	r2, r3, #28
 8005c24:	d519      	bpl.n	8005c5a <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c26:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c28:	4d78      	ldr	r5, [pc, #480]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 809e 	beq.w	8005d6c <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8005c30:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3c:	f7fe fbe0 	bl	8004400 <HAL_GetTick>
 8005c40:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c42:	e005      	b.n	8005c50 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c44:	f7fe fbdc 	bl	8004400 <HAL_GetTick>
 8005c48:	1b80      	subs	r0, r0, r6
 8005c4a:	2802      	cmp	r0, #2
 8005c4c:	f200 80fc 	bhi.w	8005e48 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c50:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005c54:	079f      	lsls	r7, r3, #30
 8005c56:	d5f5      	bpl.n	8005c44 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	0759      	lsls	r1, r3, #29
 8005c5c:	d541      	bpl.n	8005ce2 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c5e:	4b6b      	ldr	r3, [pc, #428]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005c60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c62:	00d2      	lsls	r2, r2, #3
 8005c64:	f100 80f4 	bmi.w	8005e50 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c6e:	659a      	str	r2, [r3, #88]	; 0x58
 8005c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005c7a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c7c:	4e64      	ldr	r6, [pc, #400]	; (8005e10 <HAL_RCC_OscConfig+0x2b4>)
 8005c7e:	6833      	ldr	r3, [r6, #0]
 8005c80:	05df      	lsls	r7, r3, #23
 8005c82:	f140 8113 	bpl.w	8005eac <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c86:	68a3      	ldr	r3, [r4, #8]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	f000 80e3 	beq.w	8005e54 <HAL_RCC_OscConfig+0x2f8>
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	f000 8169 	beq.w	8005f66 <HAL_RCC_OscConfig+0x40a>
 8005c94:	4e5d      	ldr	r6, [pc, #372]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005c96:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8005ca2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005ca6:	f022 0204 	bic.w	r2, r2, #4
 8005caa:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 80d7 	bne.w	8005e62 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb4:	f7fe fba4 	bl	8004400 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005cbc:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cbe:	e005      	b.n	8005ccc <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc0:	f7fe fb9e 	bl	8004400 <HAL_GetTick>
 8005cc4:	1bc0      	subs	r0, r0, r7
 8005cc6:	4540      	cmp	r0, r8
 8005cc8:	f200 80be 	bhi.w	8005e48 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ccc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005cd0:	079a      	lsls	r2, r3, #30
 8005cd2:	d4f5      	bmi.n	8005cc0 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cd4:	b125      	cbz	r5, 8005ce0 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd6:	4a4d      	ldr	r2, [pc, #308]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005cd8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	069b      	lsls	r3, r3, #26
 8005ce4:	d518      	bpl.n	8005d18 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ce6:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ce8:	4d48      	ldr	r5, [pc, #288]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 80ca 	beq.w	8005e84 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8005cf0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7fe fb80 	bl	8004400 <HAL_GetTick>
 8005d00:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d02:	e005      	b.n	8005d10 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d04:	f7fe fb7c 	bl	8004400 <HAL_GetTick>
 8005d08:	1b80      	subs	r0, r0, r6
 8005d0a:	2802      	cmp	r0, #2
 8005d0c:	f200 809c 	bhi.w	8005e48 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d10:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005d14:	079f      	lsls	r7, r3, #30
 8005d16:	d5f5      	bpl.n	8005d04 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d18:	69e0      	ldr	r0, [r4, #28]
 8005d1a:	b318      	cbz	r0, 8005d64 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d1c:	4d3b      	ldr	r5, [pc, #236]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005d1e:	68ab      	ldr	r3, [r5, #8]
 8005d20:	f003 030c 	and.w	r3, r3, #12
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	f000 812c 	beq.w	8005f82 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2a:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d2c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d32:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d34:	f000 80da 	beq.w	8005eec <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005d38:	68eb      	ldr	r3, [r5, #12]
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d40:	68eb      	ldr	r3, [r5, #12]
 8005d42:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d4a:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4c:	f7fe fb58 	bl	8004400 <HAL_GetTick>
 8005d50:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d52:	e004      	b.n	8005d5e <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d54:	f7fe fb54 	bl	8004400 <HAL_GetTick>
 8005d58:	1b00      	subs	r0, r0, r4
 8005d5a:	2802      	cmp	r0, #2
 8005d5c:	d874      	bhi.n	8005e48 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	019b      	lsls	r3, r3, #6
 8005d62:	d4f7      	bmi.n	8005d54 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8005d64:	2000      	movs	r0, #0
}
 8005d66:	b002      	add	sp, #8
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005d6c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005d70:	f023 0301 	bic.w	r3, r3, #1
 8005d74:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005d78:	f7fe fb42 	bl	8004400 <HAL_GetTick>
 8005d7c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d7e:	e004      	b.n	8005d8a <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d80:	f7fe fb3e 	bl	8004400 <HAL_GetTick>
 8005d84:	1b80      	subs	r0, r0, r6
 8005d86:	2802      	cmp	r0, #2
 8005d88:	d85e      	bhi.n	8005e48 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d8a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005d8e:	0798      	lsls	r0, r3, #30
 8005d90:	d4f6      	bmi.n	8005d80 <HAL_RCC_OscConfig+0x224>
 8005d92:	e761      	b.n	8005c58 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d94:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d98:	2903      	cmp	r1, #3
 8005d9a:	f47f aef4 	bne.w	8005b86 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d9e:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	0392      	lsls	r2, r2, #14
 8005da4:	f57f af12 	bpl.w	8005bcc <HAL_RCC_OscConfig+0x70>
 8005da8:	6862      	ldr	r2, [r4, #4]
 8005daa:	2a00      	cmp	r2, #0
 8005dac:	f47f af0e 	bne.w	8005bcc <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8005db0:	2001      	movs	r0, #1
}
 8005db2:	b002      	add	sp, #8
 8005db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005db8:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005dbc:	2a02      	cmp	r2, #2
 8005dbe:	f47f af12 	bne.w	8005be6 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dc2:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	055d      	lsls	r5, r3, #21
 8005dc8:	d502      	bpl.n	8005dd0 <HAL_RCC_OscConfig+0x274>
 8005dca:	68e3      	ldr	r3, [r4, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0ef      	beq.n	8005db0 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd0:	4a0e      	ldr	r2, [pc, #56]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005dd2:	6920      	ldr	r0, [r4, #16]
 8005dd4:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005dd6:	490f      	ldr	r1, [pc, #60]	; (8005e14 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ddc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005de0:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005de2:	6808      	ldr	r0, [r1, #0]
 8005de4:	f7fe faca 	bl	800437c <HAL_InitTick>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d1e1      	bne.n	8005db0 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	071a      	lsls	r2, r3, #28
 8005df0:	f57f af33 	bpl.w	8005c5a <HAL_RCC_OscConfig+0xfe>
 8005df4:	e717      	b.n	8005c26 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df6:	4a05      	ldr	r2, [pc, #20]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
 8005df8:	6813      	ldr	r3, [r2, #0]
 8005dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e00:	f7fe fafe 	bl	8004400 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e04:	4e01      	ldr	r6, [pc, #4]	; (8005e0c <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005e06:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e08:	e00b      	b.n	8005e22 <HAL_RCC_OscConfig+0x2c6>
 8005e0a:	bf00      	nop
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	40007000 	.word	0x40007000
 8005e14:	20000594 	.word	0x20000594
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e18:	f7fe faf2 	bl	8004400 <HAL_GetTick>
 8005e1c:	1b40      	subs	r0, r0, r5
 8005e1e:	2864      	cmp	r0, #100	; 0x64
 8005e20:	d812      	bhi.n	8005e48 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e22:	6833      	ldr	r3, [r6, #0]
 8005e24:	039b      	lsls	r3, r3, #14
 8005e26:	d5f7      	bpl.n	8005e18 <HAL_RCC_OscConfig+0x2bc>
 8005e28:	e6cf      	b.n	8005bca <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e30:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005e32:	f7fe fae5 	bl	8004400 <HAL_GetTick>
 8005e36:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	0559      	lsls	r1, r3, #21
 8005e3c:	d5d6      	bpl.n	8005dec <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e3e:	f7fe fadf 	bl	8004400 <HAL_GetTick>
 8005e42:	1b80      	subs	r0, r0, r6
 8005e44:	2802      	cmp	r0, #2
 8005e46:	d9f7      	bls.n	8005e38 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8005e48:	2003      	movs	r0, #3
}
 8005e4a:	b002      	add	sp, #8
 8005e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005e50:	2500      	movs	r5, #0
 8005e52:	e713      	b.n	8005c7c <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e54:	4a65      	ldr	r2, [pc, #404]	; (8005fec <HAL_RCC_OscConfig+0x490>)
 8005e56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005e62:	f7fe facd 	bl	8004400 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e66:	4f61      	ldr	r7, [pc, #388]	; (8005fec <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8005e68:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e6e:	e004      	b.n	8005e7a <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e70:	f7fe fac6 	bl	8004400 <HAL_GetTick>
 8005e74:	1b80      	subs	r0, r0, r6
 8005e76:	4540      	cmp	r0, r8
 8005e78:	d8e6      	bhi.n	8005e48 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e7e:	0799      	lsls	r1, r3, #30
 8005e80:	d5f6      	bpl.n	8005e70 <HAL_RCC_OscConfig+0x314>
 8005e82:	e727      	b.n	8005cd4 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8005e84:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005e90:	f7fe fab6 	bl	8004400 <HAL_GetTick>
 8005e94:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e96:	e004      	b.n	8005ea2 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e98:	f7fe fab2 	bl	8004400 <HAL_GetTick>
 8005e9c:	1b80      	subs	r0, r0, r6
 8005e9e:	2802      	cmp	r0, #2
 8005ea0:	d8d2      	bhi.n	8005e48 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ea2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005ea6:	0798      	lsls	r0, r3, #30
 8005ea8:	d4f6      	bmi.n	8005e98 <HAL_RCC_OscConfig+0x33c>
 8005eaa:	e735      	b.n	8005d18 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eac:	6833      	ldr	r3, [r6, #0]
 8005eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005eb4:	f7fe faa4 	bl	8004400 <HAL_GetTick>
 8005eb8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eba:	6833      	ldr	r3, [r6, #0]
 8005ebc:	05d8      	lsls	r0, r3, #23
 8005ebe:	f53f aee2 	bmi.w	8005c86 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec2:	f7fe fa9d 	bl	8004400 <HAL_GetTick>
 8005ec6:	1bc0      	subs	r0, r0, r7
 8005ec8:	2802      	cmp	r0, #2
 8005eca:	d9f6      	bls.n	8005eba <HAL_RCC_OscConfig+0x35e>
 8005ecc:	e7bc      	b.n	8005e48 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ece:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ed2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ee4:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ee6:	e78b      	b.n	8005e00 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8005ee8:	2001      	movs	r0, #1
}
 8005eea:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005eec:	f7fe fa88 	bl	8004400 <HAL_GetTick>
 8005ef0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ef2:	e004      	b.n	8005efe <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef4:	f7fe fa84 	bl	8004400 <HAL_GetTick>
 8005ef8:	1b80      	subs	r0, r0, r6
 8005efa:	2802      	cmp	r0, #2
 8005efc:	d8a4      	bhi.n	8005e48 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005efe:	682b      	ldr	r3, [r5, #0]
 8005f00:	0199      	lsls	r1, r3, #6
 8005f02:	d4f7      	bmi.n	8005ef4 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f04:	68e9      	ldr	r1, [r5, #12]
 8005f06:	4b3a      	ldr	r3, [pc, #232]	; (8005ff0 <HAL_RCC_OscConfig+0x494>)
 8005f08:	6a22      	ldr	r2, [r4, #32]
 8005f0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f0c:	4e37      	ldr	r6, [pc, #220]	; (8005fec <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f0e:	400b      	ands	r3, r1
 8005f10:	4313      	orrs	r3, r2
 8005f12:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8005f16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005f1a:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005f1e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8005f22:	3801      	subs	r0, #1
 8005f24:	0849      	lsrs	r1, r1, #1
 8005f26:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005f2a:	3901      	subs	r1, #1
 8005f2c:	0852      	lsrs	r2, r2, #1
 8005f2e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005f32:	3a01      	subs	r2, #1
 8005f34:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005f38:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005f3a:	682b      	ldr	r3, [r5, #0]
 8005f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f40:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f42:	68eb      	ldr	r3, [r5, #12]
 8005f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f48:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005f4a:	f7fe fa59 	bl	8004400 <HAL_GetTick>
 8005f4e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f50:	e005      	b.n	8005f5e <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f52:	f7fe fa55 	bl	8004400 <HAL_GetTick>
 8005f56:	1b00      	subs	r0, r0, r4
 8005f58:	2802      	cmp	r0, #2
 8005f5a:	f63f af75 	bhi.w	8005e48 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f5e:	6833      	ldr	r3, [r6, #0]
 8005f60:	019a      	lsls	r2, r3, #6
 8005f62:	d5f6      	bpl.n	8005f52 <HAL_RCC_OscConfig+0x3f6>
 8005f64:	e6fe      	b.n	8005d64 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f66:	4b21      	ldr	r3, [pc, #132]	; (8005fec <HAL_RCC_OscConfig+0x490>)
 8005f68:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f6c:	f042 0204 	orr.w	r2, r2, #4
 8005f70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005f74:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f78:	f042 0201 	orr.w	r2, r2, #1
 8005f7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f80:	e76f      	b.n	8005e62 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f82:	2801      	cmp	r0, #1
 8005f84:	f43f aeef 	beq.w	8005d66 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8005f88:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f8a:	6a22      	ldr	r2, [r4, #32]
 8005f8c:	f003 0103 	and.w	r1, r3, #3
 8005f90:	4291      	cmp	r1, r2
 8005f92:	f47f af0d 	bne.w	8005db0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f9c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f9e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005fa2:	f47f af05 	bne.w	8005db0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fa6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005fa8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fac:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005fb0:	f47f aefe 	bne.w	8005db0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fb4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005fb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fba:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005fbe:	f47f aef7 	bne.w	8005db0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fc2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005fc4:	0852      	lsrs	r2, r2, #1
 8005fc6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005fca:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fcc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005fd0:	f47f aeee 	bne.w	8005db0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fd4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005fd6:	0852      	lsrs	r2, r2, #1
 8005fd8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005fdc:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fde:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8005fe2:	bf14      	ite	ne
 8005fe4:	2001      	movne	r0, #1
 8005fe6:	2000      	moveq	r0, #0
 8005fe8:	e6bd      	b.n	8005d66 <HAL_RCC_OscConfig+0x20a>
 8005fea:	bf00      	nop
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	019f800c 	.word	0x019f800c

08005ff4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ff4:	4b18      	ldr	r3, [pc, #96]	; (8006058 <HAL_RCC_GetSysClockFreq+0x64>)
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	f002 020c 	and.w	r2, r2, #12
 8005ffc:	2a04      	cmp	r2, #4
 8005ffe:	d026      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	f002 020c 	and.w	r2, r2, #12
 8006006:	2a08      	cmp	r2, #8
 8006008:	d023      	beq.n	8006052 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	f002 020c 	and.w	r2, r2, #12
 8006010:	2a0c      	cmp	r2, #12
 8006012:	d001      	beq.n	8006018 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8006014:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8006016:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006018:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800601a:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800601c:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800601e:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8006022:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006024:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006028:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800602c:	bf0c      	ite	eq
 800602e:	4b0b      	ldreq	r3, [pc, #44]	; (800605c <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006030:	4b0b      	ldrne	r3, [pc, #44]	; (8006060 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006032:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006034:	fbb3 f3f2 	udiv	r3, r3, r2
 8006038:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <HAL_RCC_GetSysClockFreq+0x64>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006044:	3301      	adds	r3, #1
 8006046:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006048:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800604c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800604e:	4804      	ldr	r0, [pc, #16]	; (8006060 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006050:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006052:	4802      	ldr	r0, [pc, #8]	; (800605c <HAL_RCC_GetSysClockFreq+0x68>)
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40021000 	.word	0x40021000
 800605c:	007a1200 	.word	0x007a1200
 8006060:	00f42400 	.word	0x00f42400

08006064 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006064:	2800      	cmp	r0, #0
 8006066:	f000 80ee 	beq.w	8006246 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800606a:	4a78      	ldr	r2, [pc, #480]	; (800624c <HAL_RCC_ClockConfig+0x1e8>)
{
 800606c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006070:	6813      	ldr	r3, [r2, #0]
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	428b      	cmp	r3, r1
 8006078:	460d      	mov	r5, r1
 800607a:	4604      	mov	r4, r0
 800607c:	d20c      	bcs.n	8006098 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607e:	6813      	ldr	r3, [r2, #0]
 8006080:	f023 030f 	bic.w	r3, r3, #15
 8006084:	430b      	orrs	r3, r1
 8006086:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006088:	6813      	ldr	r3, [r2, #0]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	428b      	cmp	r3, r1
 8006090:	d002      	beq.n	8006098 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006092:	2001      	movs	r0, #1
}
 8006094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	07df      	lsls	r7, r3, #31
 800609c:	d569      	bpl.n	8006172 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800609e:	6867      	ldr	r7, [r4, #4]
 80060a0:	2f03      	cmp	r7, #3
 80060a2:	f000 80a0 	beq.w	80061e6 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060a6:	4b6a      	ldr	r3, [pc, #424]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060a8:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060aa:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ac:	f000 8097 	beq.w	80061de <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060b0:	055b      	lsls	r3, r3, #21
 80060b2:	d5ee      	bpl.n	8006092 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80060b4:	f7ff ff9e 	bl	8005ff4 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80060b8:	4b66      	ldr	r3, [pc, #408]	; (8006254 <HAL_RCC_ClockConfig+0x1f0>)
 80060ba:	4298      	cmp	r0, r3
 80060bc:	f240 80c0 	bls.w	8006240 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060c0:	4a63      	ldr	r2, [pc, #396]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
 80060c2:	6893      	ldr	r3, [r2, #8]
 80060c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80060ce:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060d2:	4e5f      	ldr	r6, [pc, #380]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
 80060d4:	68b3      	ldr	r3, [r6, #8]
 80060d6:	f023 0303 	bic.w	r3, r3, #3
 80060da:	433b      	orrs	r3, r7
 80060dc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80060de:	f7fe f98f 	bl	8004400 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80060e6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060e8:	e004      	b.n	80060f4 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ea:	f7fe f989 	bl	8004400 <HAL_GetTick>
 80060ee:	1bc0      	subs	r0, r0, r7
 80060f0:	4540      	cmp	r0, r8
 80060f2:	d871      	bhi.n	80061d8 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f4:	68b3      	ldr	r3, [r6, #8]
 80060f6:	6862      	ldr	r2, [r4, #4]
 80060f8:	f003 030c 	and.w	r3, r3, #12
 80060fc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006100:	d1f3      	bne.n	80060ea <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	079f      	lsls	r7, r3, #30
 8006106:	d436      	bmi.n	8006176 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8006108:	f1b9 0f00 	cmp.w	r9, #0
 800610c:	d003      	beq.n	8006116 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800610e:	68b3      	ldr	r3, [r6, #8]
 8006110:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006114:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006116:	4e4d      	ldr	r6, [pc, #308]	; (800624c <HAL_RCC_ClockConfig+0x1e8>)
 8006118:	6833      	ldr	r3, [r6, #0]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	42ab      	cmp	r3, r5
 8006120:	d846      	bhi.n	80061b0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	075a      	lsls	r2, r3, #29
 8006126:	d506      	bpl.n	8006136 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006128:	4949      	ldr	r1, [pc, #292]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
 800612a:	68e0      	ldr	r0, [r4, #12]
 800612c:	688a      	ldr	r2, [r1, #8]
 800612e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006132:	4302      	orrs	r2, r0
 8006134:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006136:	071b      	lsls	r3, r3, #28
 8006138:	d507      	bpl.n	800614a <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800613a:	4a45      	ldr	r2, [pc, #276]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
 800613c:	6921      	ldr	r1, [r4, #16]
 800613e:	6893      	ldr	r3, [r2, #8]
 8006140:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006144:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006148:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800614a:	f7ff ff53 	bl	8005ff4 <HAL_RCC_GetSysClockFreq>
 800614e:	4a40      	ldr	r2, [pc, #256]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
 8006150:	4c41      	ldr	r4, [pc, #260]	; (8006258 <HAL_RCC_ClockConfig+0x1f4>)
 8006152:	6892      	ldr	r2, [r2, #8]
 8006154:	4941      	ldr	r1, [pc, #260]	; (800625c <HAL_RCC_ClockConfig+0x1f8>)
 8006156:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800615a:	4603      	mov	r3, r0
 800615c:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800615e:	4840      	ldr	r0, [pc, #256]	; (8006260 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006160:	f002 021f 	and.w	r2, r2, #31
 8006164:	40d3      	lsrs	r3, r2
 8006166:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006168:	6800      	ldr	r0, [r0, #0]
}
 800616a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800616e:	f7fe b905 	b.w	800437c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006172:	079e      	lsls	r6, r3, #30
 8006174:	d5cf      	bpl.n	8006116 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006176:	0758      	lsls	r0, r3, #29
 8006178:	d504      	bpl.n	8006184 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800617a:	4935      	ldr	r1, [pc, #212]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
 800617c:	688a      	ldr	r2, [r1, #8]
 800617e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006182:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006184:	0719      	lsls	r1, r3, #28
 8006186:	d506      	bpl.n	8006196 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006188:	4a31      	ldr	r2, [pc, #196]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
 800618a:	6893      	ldr	r3, [r2, #8]
 800618c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006190:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006194:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006196:	4a2e      	ldr	r2, [pc, #184]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
 8006198:	68a1      	ldr	r1, [r4, #8]
 800619a:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800619c:	4e2b      	ldr	r6, [pc, #172]	; (800624c <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800619e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061a2:	430b      	orrs	r3, r1
 80061a4:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061a6:	6833      	ldr	r3, [r6, #0]
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	42ab      	cmp	r3, r5
 80061ae:	d9b8      	bls.n	8006122 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b0:	6833      	ldr	r3, [r6, #0]
 80061b2:	f023 030f 	bic.w	r3, r3, #15
 80061b6:	432b      	orrs	r3, r5
 80061b8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80061ba:	f7fe f921 	bl	8004400 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061be:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80061c2:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c4:	6833      	ldr	r3, [r6, #0]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	42ab      	cmp	r3, r5
 80061cc:	d0a9      	beq.n	8006122 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ce:	f7fe f917 	bl	8004400 <HAL_GetTick>
 80061d2:	1bc0      	subs	r0, r0, r7
 80061d4:	4540      	cmp	r0, r8
 80061d6:	d9f5      	bls.n	80061c4 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 80061d8:	2003      	movs	r0, #3
}
 80061da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061de:	039a      	lsls	r2, r3, #14
 80061e0:	f53f af68 	bmi.w	80060b4 <HAL_RCC_ClockConfig+0x50>
 80061e4:	e755      	b.n	8006092 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061e6:	4a1a      	ldr	r2, [pc, #104]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
 80061e8:	6811      	ldr	r1, [r2, #0]
 80061ea:	0188      	lsls	r0, r1, #6
 80061ec:	f57f af51 	bpl.w	8006092 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061f0:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061f2:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061f4:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 80061f6:	4e17      	ldr	r6, [pc, #92]	; (8006254 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061f8:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80061fc:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061fe:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006202:	bf0c      	ite	eq
 8006204:	4817      	ldreq	r0, [pc, #92]	; (8006264 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006206:	4818      	ldrne	r0, [pc, #96]	; (8006268 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006208:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800620a:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800620e:	4810      	ldr	r0, [pc, #64]	; (8006250 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006210:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8006214:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006218:	68c1      	ldr	r1, [r0, #12]
 800621a:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800621e:	3101      	adds	r1, #1
 8006220:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8006222:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8006226:	42b2      	cmp	r2, r6
 8006228:	d90a      	bls.n	8006240 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800622a:	6882      	ldr	r2, [r0, #8]
 800622c:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8006230:	f43f af46 	beq.w	80060c0 <HAL_RCC_ClockConfig+0x5c>
 8006234:	0799      	lsls	r1, r3, #30
 8006236:	d503      	bpl.n	8006240 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006238:	68a3      	ldr	r3, [r4, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f43f af40 	beq.w	80060c0 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006240:	f04f 0900 	mov.w	r9, #0
 8006244:	e745      	b.n	80060d2 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8006246:	2001      	movs	r0, #1
}
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40022000 	.word	0x40022000
 8006250:	40021000 	.word	0x40021000
 8006254:	04c4b400 	.word	0x04c4b400
 8006258:	0800a5a4 	.word	0x0800a5a4
 800625c:	2000058c 	.word	0x2000058c
 8006260:	20000594 	.word	0x20000594
 8006264:	007a1200 	.word	0x007a1200
 8006268:	00f42400 	.word	0x00f42400

0800626c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800626c:	4b01      	ldr	r3, [pc, #4]	; (8006274 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	2000058c 	.word	0x2000058c

08006278 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_RCC_GetPCLK1Freq+0x18>)
 800627a:	4a06      	ldr	r2, [pc, #24]	; (8006294 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800627c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800627e:	4906      	ldr	r1, [pc, #24]	; (8006298 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006280:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006284:	6808      	ldr	r0, [r1, #0]
 8006286:	5cd3      	ldrb	r3, [r2, r3]
 8006288:	f003 031f 	and.w	r3, r3, #31
}
 800628c:	40d8      	lsrs	r0, r3
 800628e:	4770      	bx	lr
 8006290:	40021000 	.word	0x40021000
 8006294:	0800a5b4 	.word	0x0800a5b4
 8006298:	2000058c 	.word	0x2000058c

0800629c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800629c:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800629e:	4a06      	ldr	r2, [pc, #24]	; (80062b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80062a0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80062a2:	4906      	ldr	r1, [pc, #24]	; (80062bc <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062a4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80062a8:	6808      	ldr	r0, [r1, #0]
 80062aa:	5cd3      	ldrb	r3, [r2, r3]
 80062ac:	f003 031f 	and.w	r3, r3, #31
}
 80062b0:	40d8      	lsrs	r0, r3
 80062b2:	4770      	bx	lr
 80062b4:	40021000 	.word	0x40021000
 80062b8:	0800a5b4 	.word	0x0800a5b4
 80062bc:	2000058c 	.word	0x2000058c

080062c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062c4:	6803      	ldr	r3, [r0, #0]
{
 80062c6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062c8:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80062cc:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062ce:	d056      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062d0:	4b9f      	ldr	r3, [pc, #636]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80062d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80062d4:	00d5      	lsls	r5, r2, #3
 80062d6:	f140 810c 	bpl.w	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 80062da:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062dc:	4d9d      	ldr	r5, [pc, #628]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e4:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062e6:	f7fe f88b 	bl	8004400 <HAL_GetTick>
 80062ea:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ec:	e005      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ee:	f7fe f887 	bl	8004400 <HAL_GetTick>
 80062f2:	1b83      	subs	r3, r0, r6
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	f200 8107 	bhi.w	8006508 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062fa:	682b      	ldr	r3, [r5, #0]
 80062fc:	05d8      	lsls	r0, r3, #23
 80062fe:	d5f6      	bpl.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006300:	4d93      	ldr	r5, [pc, #588]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006302:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006306:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800630a:	d027      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800630c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800630e:	429a      	cmp	r2, r3
 8006310:	d025      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006312:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006316:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800631a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006322:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800632e:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006332:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8006334:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006338:	f140 8108 	bpl.w	800654c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fe f860 	bl	8004400 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006340:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006344:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006346:	e005      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006348:	f7fe f85a 	bl	8004400 <HAL_GetTick>
 800634c:	1b80      	subs	r0, r0, r6
 800634e:	4540      	cmp	r0, r8
 8006350:	f200 80da 	bhi.w	8006508 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006354:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006358:	079b      	lsls	r3, r3, #30
 800635a:	d5f5      	bpl.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800635c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800635e:	497c      	ldr	r1, [pc, #496]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006360:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006364:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006368:	4313      	orrs	r3, r2
 800636a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800636e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006370:	b127      	cbz	r7, 800637c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006372:	4a77      	ldr	r2, [pc, #476]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006374:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800637a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	07de      	lsls	r6, r3, #31
 8006380:	d508      	bpl.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006382:	4973      	ldr	r1, [pc, #460]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006384:	6865      	ldr	r5, [r4, #4]
 8006386:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800638a:	f022 0203 	bic.w	r2, r2, #3
 800638e:	432a      	orrs	r2, r5
 8006390:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006394:	079d      	lsls	r5, r3, #30
 8006396:	d508      	bpl.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006398:	496d      	ldr	r1, [pc, #436]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800639a:	68a5      	ldr	r5, [r4, #8]
 800639c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063a0:	f022 020c 	bic.w	r2, r2, #12
 80063a4:	432a      	orrs	r2, r5
 80063a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063aa:	0759      	lsls	r1, r3, #29
 80063ac:	d508      	bpl.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063ae:	4968      	ldr	r1, [pc, #416]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063b0:	68e5      	ldr	r5, [r4, #12]
 80063b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80063ba:	432a      	orrs	r2, r5
 80063bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063c0:	071a      	lsls	r2, r3, #28
 80063c2:	d508      	bpl.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063c4:	4962      	ldr	r1, [pc, #392]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063c6:	6925      	ldr	r5, [r4, #16]
 80063c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80063d0:	432a      	orrs	r2, r5
 80063d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063d6:	069f      	lsls	r7, r3, #26
 80063d8:	d508      	bpl.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063da:	495d      	ldr	r1, [pc, #372]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063dc:	6965      	ldr	r5, [r4, #20]
 80063de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063e6:	432a      	orrs	r2, r5
 80063e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063ec:	065e      	lsls	r6, r3, #25
 80063ee:	d508      	bpl.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063f0:	4957      	ldr	r1, [pc, #348]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063f2:	69a5      	ldr	r5, [r4, #24]
 80063f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80063fc:	432a      	orrs	r2, r5
 80063fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006402:	061d      	lsls	r5, r3, #24
 8006404:	d508      	bpl.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006406:	4952      	ldr	r1, [pc, #328]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006408:	69e5      	ldr	r5, [r4, #28]
 800640a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800640e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006412:	432a      	orrs	r2, r5
 8006414:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006418:	05d9      	lsls	r1, r3, #23
 800641a:	d508      	bpl.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800641c:	494c      	ldr	r1, [pc, #304]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800641e:	6a25      	ldr	r5, [r4, #32]
 8006420:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006424:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006428:	432a      	orrs	r2, r5
 800642a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800642e:	059a      	lsls	r2, r3, #22
 8006430:	d508      	bpl.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006432:	4947      	ldr	r1, [pc, #284]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006434:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006436:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800643a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800643e:	432a      	orrs	r2, r5
 8006440:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006444:	055f      	lsls	r7, r3, #21
 8006446:	d50b      	bpl.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006448:	4941      	ldr	r1, [pc, #260]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800644a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800644c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006450:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006454:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006456:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800645a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800645e:	d055      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006460:	051e      	lsls	r6, r3, #20
 8006462:	d50b      	bpl.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006464:	493a      	ldr	r1, [pc, #232]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006466:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006468:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800646c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006470:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006472:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006476:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800647a:	d04c      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800647c:	04dd      	lsls	r5, r3, #19
 800647e:	d50b      	bpl.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006480:	4933      	ldr	r1, [pc, #204]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006482:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006484:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006488:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800648c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800648e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006492:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006496:	d043      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006498:	0499      	lsls	r1, r3, #18
 800649a:	d50b      	bpl.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800649c:	492c      	ldr	r1, [pc, #176]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800649e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80064a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80064a4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80064a8:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064aa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064b2:	d03a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064b4:	045a      	lsls	r2, r3, #17
 80064b6:	d50b      	bpl.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064b8:	4925      	ldr	r1, [pc, #148]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80064ba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80064bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80064c0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80064c4:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064c6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064ce:	d031      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064d0:	041b      	lsls	r3, r3, #16
 80064d2:	d50b      	bpl.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064d4:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80064d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80064d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80064dc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80064e0:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064ea:	d028      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 80064ec:	b002      	add	sp, #8
 80064ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80064f8:	659a      	str	r2, [r3, #88]	; 0x58
 80064fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006504:	2701      	movs	r7, #1
 8006506:	e6e9      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 8006508:	2003      	movs	r0, #3
 800650a:	e731      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800650c:	68ca      	ldr	r2, [r1, #12]
 800650e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006512:	60ca      	str	r2, [r1, #12]
 8006514:	e7a4      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006516:	68ca      	ldr	r2, [r1, #12]
 8006518:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800651c:	60ca      	str	r2, [r1, #12]
 800651e:	e7ad      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006520:	68ca      	ldr	r2, [r1, #12]
 8006522:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006526:	60ca      	str	r2, [r1, #12]
 8006528:	e7b6      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800652a:	68ca      	ldr	r2, [r1, #12]
 800652c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006530:	60ca      	str	r2, [r1, #12]
 8006532:	e7bf      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006534:	68ca      	ldr	r2, [r1, #12]
 8006536:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800653a:	60ca      	str	r2, [r1, #12]
 800653c:	e7c8      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800653e:	68d3      	ldr	r3, [r2, #12]
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	60d3      	str	r3, [r2, #12]
}
 8006546:	b002      	add	sp, #8
 8006548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800654c:	4613      	mov	r3, r2
 800654e:	e706      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006550:	40021000 	.word	0x40021000
 8006554:	40007000 	.word	0x40007000

08006558 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006558:	6a03      	ldr	r3, [r0, #32]
 800655a:	f023 0301 	bic.w	r3, r3, #1
 800655e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006560:	6a03      	ldr	r3, [r0, #32]
{
 8006562:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006564:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006568:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800656a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800656e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006572:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006574:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006576:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800657a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800657c:	4d13      	ldr	r5, [pc, #76]	; (80065cc <TIM_OC1_SetConfig+0x74>)
 800657e:	42a8      	cmp	r0, r5
 8006580:	d00f      	beq.n	80065a2 <TIM_OC1_SetConfig+0x4a>
 8006582:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006586:	42a8      	cmp	r0, r5
 8006588:	d00b      	beq.n	80065a2 <TIM_OC1_SetConfig+0x4a>
 800658a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800658e:	42a8      	cmp	r0, r5
 8006590:	d007      	beq.n	80065a2 <TIM_OC1_SetConfig+0x4a>
 8006592:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006596:	42a8      	cmp	r0, r5
 8006598:	d003      	beq.n	80065a2 <TIM_OC1_SetConfig+0x4a>
 800659a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800659e:	42a8      	cmp	r0, r5
 80065a0:	d10d      	bne.n	80065be <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80065a4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80065a8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065aa:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ae:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b2:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80065b6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80065ba:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065be:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80065c0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80065c2:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80065c4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80065c6:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80065c8:	6203      	str	r3, [r0, #32]
}
 80065ca:	4770      	bx	lr
 80065cc:	40012c00 	.word	0x40012c00

080065d0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065d0:	6a03      	ldr	r3, [r0, #32]
 80065d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d8:	6a03      	ldr	r3, [r0, #32]
{
 80065da:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065de:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80065e6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80065ea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80065ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065f6:	4d15      	ldr	r5, [pc, #84]	; (800664c <TIM_OC3_SetConfig+0x7c>)
 80065f8:	42a8      	cmp	r0, r5
 80065fa:	d010      	beq.n	800661e <TIM_OC3_SetConfig+0x4e>
 80065fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006600:	42a8      	cmp	r0, r5
 8006602:	d00c      	beq.n	800661e <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006604:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006608:	42a8      	cmp	r0, r5
 800660a:	d00f      	beq.n	800662c <TIM_OC3_SetConfig+0x5c>
 800660c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006610:	42a8      	cmp	r0, r5
 8006612:	d00b      	beq.n	800662c <TIM_OC3_SetConfig+0x5c>
 8006614:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006618:	42a8      	cmp	r0, r5
 800661a:	d10f      	bne.n	800663c <TIM_OC3_SetConfig+0x6c>
 800661c:	e006      	b.n	800662c <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800661e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006624:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800662c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006630:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006634:	ea46 0c05 	orr.w	ip, r6, r5
 8006638:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800663c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800663e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006640:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006642:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8006644:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006646:	6203      	str	r3, [r0, #32]
}
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40012c00 	.word	0x40012c00

08006650 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006650:	6a03      	ldr	r3, [r0, #32]
 8006652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006656:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006658:	6a03      	ldr	r3, [r0, #32]
{
 800665a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006660:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006662:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006666:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800666a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800666e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006674:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006678:	4d14      	ldr	r5, [pc, #80]	; (80066cc <TIM_OC4_SetConfig+0x7c>)
 800667a:	42a8      	cmp	r0, r5
 800667c:	d010      	beq.n	80066a0 <TIM_OC4_SetConfig+0x50>
 800667e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006682:	42a8      	cmp	r0, r5
 8006684:	d00c      	beq.n	80066a0 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006686:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800668a:	42a8      	cmp	r0, r5
 800668c:	d00f      	beq.n	80066ae <TIM_OC4_SetConfig+0x5e>
 800668e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006692:	42a8      	cmp	r0, r5
 8006694:	d00b      	beq.n	80066ae <TIM_OC4_SetConfig+0x5e>
 8006696:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800669a:	42a8      	cmp	r0, r5
 800669c:	d10f      	bne.n	80066be <TIM_OC4_SetConfig+0x6e>
 800669e:	e006      	b.n	80066ae <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066a0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80066a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066a6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80066aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066ae:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80066b2:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066b6:	ea46 0c05 	orr.w	ip, r6, r5
 80066ba:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066be:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80066c0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80066c2:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80066c4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80066c6:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80066c8:	6203      	str	r3, [r0, #32]
}
 80066ca:	4770      	bx	lr
 80066cc:	40012c00 	.word	0x40012c00

080066d0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f000 8081 	beq.w	80067d8 <HAL_TIM_Base_Init+0x108>
{
 80066d6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80066d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80066dc:	4604      	mov	r4, r0
 80066de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d06d      	beq.n	80067c2 <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e8:	493c      	ldr	r1, [pc, #240]	; (80067dc <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80066ea:	2302      	movs	r3, #2
 80066ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80066f2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f4:	d051      	beq.n	800679a <HAL_TIM_Base_Init+0xca>
 80066f6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80066fa:	d021      	beq.n	8006740 <HAL_TIM_Base_Init+0x70>
 80066fc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006700:	428a      	cmp	r2, r1
 8006702:	d01d      	beq.n	8006740 <HAL_TIM_Base_Init+0x70>
 8006704:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006708:	428a      	cmp	r2, r1
 800670a:	d019      	beq.n	8006740 <HAL_TIM_Base_Init+0x70>
 800670c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006710:	428a      	cmp	r2, r1
 8006712:	d042      	beq.n	800679a <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006714:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8006718:	428a      	cmp	r2, r1
 800671a:	d057      	beq.n	80067cc <HAL_TIM_Base_Init+0xfc>
 800671c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006720:	428a      	cmp	r2, r1
 8006722:	d053      	beq.n	80067cc <HAL_TIM_Base_Init+0xfc>
 8006724:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006728:	428a      	cmp	r2, r1
 800672a:	d04f      	beq.n	80067cc <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800672c:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800672e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006734:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006736:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8006738:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800673a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800673c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800673e:	e010      	b.n	8006762 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8006740:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006742:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006748:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800674e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006750:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006756:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006758:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800675a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800675c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800675e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006760:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006762:	2301      	movs	r3, #1
 8006764:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006766:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800676e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006772:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006776:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800677a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800677e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006782:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800678a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800678e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006792:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006796:	2000      	movs	r0, #0
}
 8006798:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800679a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800679e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80067a2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067aa:	69a1      	ldr	r1, [r4, #24]
 80067ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80067b2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b4:	68e3      	ldr	r3, [r4, #12]
 80067b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80067b8:	6863      	ldr	r3, [r4, #4]
 80067ba:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80067bc:	6963      	ldr	r3, [r4, #20]
 80067be:	6313      	str	r3, [r2, #48]	; 0x30
 80067c0:	e7cf      	b.n	8006762 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80067c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80067c6:	f7fd fb2b 	bl	8003e20 <HAL_TIM_Base_MspInit>
 80067ca:	e78c      	b.n	80066e6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067cc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ce:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80067d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067d4:	4303      	orrs	r3, r0
 80067d6:	e7e9      	b.n	80067ac <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 80067d8:	2001      	movs	r0, #1
}
 80067da:	4770      	bx	lr
 80067dc:	40012c00 	.word	0x40012c00

080067e0 <HAL_TIM_PWM_MspInit>:
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80067e4:	2800      	cmp	r0, #0
 80067e6:	f000 8081 	beq.w	80068ec <HAL_TIM_PWM_Init+0x108>
{
 80067ea:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80067ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80067f0:	4604      	mov	r4, r0
 80067f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d06d      	beq.n	80068d6 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fa:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067fc:	493c      	ldr	r1, [pc, #240]	; (80068f0 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80067fe:	2302      	movs	r3, #2
 8006800:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006804:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006806:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006808:	d051      	beq.n	80068ae <HAL_TIM_PWM_Init+0xca>
 800680a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800680e:	d021      	beq.n	8006854 <HAL_TIM_PWM_Init+0x70>
 8006810:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006814:	428a      	cmp	r2, r1
 8006816:	d01d      	beq.n	8006854 <HAL_TIM_PWM_Init+0x70>
 8006818:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800681c:	428a      	cmp	r2, r1
 800681e:	d019      	beq.n	8006854 <HAL_TIM_PWM_Init+0x70>
 8006820:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006824:	428a      	cmp	r2, r1
 8006826:	d042      	beq.n	80068ae <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006828:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800682c:	428a      	cmp	r2, r1
 800682e:	d057      	beq.n	80068e0 <HAL_TIM_PWM_Init+0xfc>
 8006830:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006834:	428a      	cmp	r2, r1
 8006836:	d053      	beq.n	80068e0 <HAL_TIM_PWM_Init+0xfc>
 8006838:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800683c:	428a      	cmp	r2, r1
 800683e:	d04f      	beq.n	80068e0 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006840:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006842:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006848:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800684a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800684c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800684e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006850:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006852:	e010      	b.n	8006876 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8006854:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006856:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800685c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800685e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006862:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006864:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800686a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800686c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800686e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006870:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006872:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006874:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006876:	2301      	movs	r3, #1
 8006878:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006882:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006886:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800688a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800688e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800689a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800689e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80068a2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80068a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80068aa:	2000      	movs	r0, #0
}
 80068ac:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80068ae:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068b0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80068b6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80068b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068bc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068be:	69a1      	ldr	r1, [r4, #24]
 80068c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80068c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068c8:	68e3      	ldr	r3, [r4, #12]
 80068ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80068cc:	6863      	ldr	r3, [r4, #4]
 80068ce:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80068d0:	6963      	ldr	r3, [r4, #20]
 80068d2:	6313      	str	r3, [r2, #48]	; 0x30
 80068d4:	e7cf      	b.n	8006876 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80068d6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80068da:	f7ff ff81 	bl	80067e0 <HAL_TIM_PWM_MspInit>
 80068de:	e78c      	b.n	80067fa <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068e0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80068e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068e8:	4303      	orrs	r3, r0
 80068ea:	e7e9      	b.n	80068c0 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 80068ec:	2001      	movs	r0, #1
}
 80068ee:	4770      	bx	lr
 80068f0:	40012c00 	.word	0x40012c00

080068f4 <HAL_TIM_IC_MspInit>:
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop

080068f8 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80068f8:	2800      	cmp	r0, #0
 80068fa:	f000 8081 	beq.w	8006a00 <HAL_TIM_IC_Init+0x108>
{
 80068fe:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006900:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006904:	4604      	mov	r4, r0
 8006906:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800690a:	2b00      	cmp	r3, #0
 800690c:	d06d      	beq.n	80069ea <HAL_TIM_IC_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800690e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006910:	493c      	ldr	r1, [pc, #240]	; (8006a04 <HAL_TIM_IC_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006912:	2302      	movs	r3, #2
 8006914:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006918:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800691a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800691c:	d051      	beq.n	80069c2 <HAL_TIM_IC_Init+0xca>
 800691e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006922:	d021      	beq.n	8006968 <HAL_TIM_IC_Init+0x70>
 8006924:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006928:	428a      	cmp	r2, r1
 800692a:	d01d      	beq.n	8006968 <HAL_TIM_IC_Init+0x70>
 800692c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006930:	428a      	cmp	r2, r1
 8006932:	d019      	beq.n	8006968 <HAL_TIM_IC_Init+0x70>
 8006934:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006938:	428a      	cmp	r2, r1
 800693a:	d042      	beq.n	80069c2 <HAL_TIM_IC_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800693c:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8006940:	428a      	cmp	r2, r1
 8006942:	d057      	beq.n	80069f4 <HAL_TIM_IC_Init+0xfc>
 8006944:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006948:	428a      	cmp	r2, r1
 800694a:	d053      	beq.n	80069f4 <HAL_TIM_IC_Init+0xfc>
 800694c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006950:	428a      	cmp	r2, r1
 8006952:	d04f      	beq.n	80069f4 <HAL_TIM_IC_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006954:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006956:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800695c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800695e:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8006960:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006962:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006964:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006966:	e010      	b.n	800698a <HAL_TIM_IC_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8006968:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800696a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800696c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006970:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006976:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006978:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800697a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800697e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006980:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006982:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006984:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006986:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006988:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800698a:	2301      	movs	r3, #1
 800698c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800698e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006992:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006996:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800699a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800699e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80069a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80069ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80069b6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80069ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80069be:	2000      	movs	r0, #0
}
 80069c0:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80069c2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069c4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80069ca:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80069cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069d0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069d2:	69a1      	ldr	r1, [r4, #24]
 80069d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80069da:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069dc:	68e3      	ldr	r3, [r4, #12]
 80069de:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80069e0:	6863      	ldr	r3, [r4, #4]
 80069e2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80069e4:	6963      	ldr	r3, [r4, #20]
 80069e6:	6313      	str	r3, [r2, #48]	; 0x30
 80069e8:	e7cf      	b.n	800698a <HAL_TIM_IC_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80069ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80069ee:	f7ff ff81 	bl	80068f4 <HAL_TIM_IC_MspInit>
 80069f2:	e78c      	b.n	800690e <HAL_TIM_IC_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069f4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80069f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069fc:	4303      	orrs	r3, r0
 80069fe:	e7e9      	b.n	80069d4 <HAL_TIM_IC_Init+0xdc>
    return HAL_ERROR;
 8006a00:	2001      	movs	r0, #1
}
 8006a02:	4770      	bx	lr
 8006a04:	40012c00 	.word	0x40012c00

08006a08 <HAL_TIM_IC_ConfigChannel>:
{
 8006a08:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006a0a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8006a0e:	2801      	cmp	r0, #1
 8006a10:	f000 80cc 	beq.w	8006bac <HAL_TIM_IC_ConfigChannel+0x1a4>
 8006a14:	2001      	movs	r0, #1
{
 8006a16:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8006a18:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8006a1c:	b15a      	cbz	r2, 8006a36 <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 8006a1e:	2a04      	cmp	r2, #4
 8006a20:	d04c      	beq.n	8006abc <HAL_TIM_IC_ConfigChannel+0xb4>
  else if (Channel == TIM_CHANNEL_3)
 8006a22:	2a08      	cmp	r2, #8
 8006a24:	f000 809a 	beq.w	8006b5c <HAL_TIM_IC_ConfigChannel+0x154>
  else if (Channel == TIM_CHANNEL_4)
 8006a28:	2a0c      	cmp	r2, #12
 8006a2a:	d071      	beq.n	8006b10 <HAL_TIM_IC_ConfigChannel+0x108>
  __HAL_UNLOCK(htim);
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006a32:	bcf0      	pop	{r4, r5, r6, r7}
 8006a34:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 8006a36:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a38:	f8df c174 	ldr.w	ip, [pc, #372]	; 8006bb0 <HAL_TIM_IC_ConfigChannel+0x1a8>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a3c:	6a16      	ldr	r6, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 8006a3e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a40:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 8006a44:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a48:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a4a:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4c:	6997      	ldr	r7, [r2, #24]
  tmpccer = TIMx->CCER;
 8006a4e:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a50:	d015      	beq.n	8006a7e <HAL_TIM_IC_ConfigChannel+0x76>
 8006a52:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006a56:	d012      	beq.n	8006a7e <HAL_TIM_IC_ConfigChannel+0x76>
 8006a58:	f5ac 3c94 	sub.w	ip, ip, #75776	; 0x12800
 8006a5c:	4562      	cmp	r2, ip
 8006a5e:	d00e      	beq.n	8006a7e <HAL_TIM_IC_ConfigChannel+0x76>
 8006a60:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8006a64:	4562      	cmp	r2, ip
 8006a66:	d00a      	beq.n	8006a7e <HAL_TIM_IC_ConfigChannel+0x76>
 8006a68:	f50c 3c96 	add.w	ip, ip, #76800	; 0x12c00
 8006a6c:	4562      	cmp	r2, ip
 8006a6e:	d006      	beq.n	8006a7e <HAL_TIM_IC_ConfigChannel+0x76>
 8006a70:	f50c 6c40 	add.w	ip, ip, #3072	; 0xc00
 8006a74:	4562      	cmp	r2, ip
 8006a76:	d002      	beq.n	8006a7e <HAL_TIM_IC_ConfigChannel+0x76>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a78:	f047 0c01 	orr.w	ip, r7, #1
 8006a7c:	e003      	b.n	8006a86 <HAL_TIM_IC_ConfigChannel+0x7e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a7e:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 8006a82:	ea45 0c07 	orr.w	ip, r5, r7
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a86:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a88:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a8c:	b2c0      	uxtb	r0, r0
 8006a8e:	ea40 000c 	orr.w	r0, r0, ip
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a92:	6190      	str	r0, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a94:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a98:	f004 000a 	and.w	r0, r4, #10
 8006a9c:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8006a9e:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006aa0:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006aa2:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006aa4:	f020 000c 	bic.w	r0, r0, #12
 8006aa8:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006aaa:	6991      	ldr	r1, [r2, #24]
 8006aac:	4321      	orrs	r1, r4
 8006aae:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006ab6:	2000      	movs	r0, #0
}
 8006ab8:	bcf0      	pop	{r4, r5, r6, r7}
 8006aba:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac0:	6a14      	ldr	r4, [r2, #32]
 8006ac2:	f024 0410 	bic.w	r4, r4, #16
    TIM_TI2_SetConfig(htim->Instance,
 8006ac6:	e9d1 5600 	ldrd	r5, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aca:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006acc:	688c      	ldr	r4, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 8006ace:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ad0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ad4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ad8:	0300      	lsls	r0, r0, #12
 8006ada:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006adc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ae0:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8006ae2:	6a10      	ldr	r0, [r2, #32]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ae4:	6191      	str	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ae6:	012d      	lsls	r5, r5, #4
 8006ae8:	f005 05a0 	and.w	r5, r5, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aec:	f020 01a0 	bic.w	r1, r0, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006af0:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 8006af2:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006af4:	6991      	ldr	r1, [r2, #24]
 8006af6:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8006afa:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006afc:	6991      	ldr	r1, [r2, #24]
 8006afe:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8006b02:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006b0a:	2000      	movs	r0, #0
}
 8006b0c:	bcf0      	pop	{r4, r5, r6, r7}
 8006b0e:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b14:	6a14      	ldr	r4, [r2, #32]
 8006b16:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 8006b1a:	e9d1 5600 	ldrd	r5, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b1e:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b20:	688c      	ldr	r4, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8006b22:	69d1      	ldr	r1, [r2, #28]
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b24:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b28:	0300      	lsls	r0, r0, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b2a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b2e:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b30:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b34:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8006b36:	6a10      	ldr	r0, [r2, #32]
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b38:	61d1      	str	r1, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b3a:	032d      	lsls	r5, r5, #12
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b3c:	f420 4120 	bic.w	r1, r0, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b40:	f405 4520 	and.w	r5, r5, #40960	; 0xa000
 8006b44:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer ;
 8006b46:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b48:	69d1      	ldr	r1, [r2, #28]
 8006b4a:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8006b4e:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b50:	69d1      	ldr	r1, [r2, #28]
 8006b52:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8006b56:	2000      	movs	r0, #0
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b58:	61d1      	str	r1, [r2, #28]
 8006b5a:	e767      	b.n	8006a2c <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b60:	6a16      	ldr	r6, [r2, #32]
 8006b62:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 8006b66:	e9d1 5400 	ldrd	r5, r4, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b6a:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b6c:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8006b6e:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b70:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= TIM_ICSelection;
 8006b74:	4321      	orrs	r1, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b76:	0100      	lsls	r0, r0, #4
 8006b78:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b7a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b7e:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 8006b80:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 8006b82:	61d1      	str	r1, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b84:	022d      	lsls	r5, r5, #8
 8006b86:	f405 6520 	and.w	r5, r5, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b8a:	f420 6120 	bic.w	r1, r0, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b8e:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 8006b90:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b92:	69d1      	ldr	r1, [r2, #28]
 8006b94:	f021 010c 	bic.w	r1, r1, #12
 8006b98:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b9a:	69d1      	ldr	r1, [r2, #28]
 8006b9c:	4331      	orrs	r1, r6
 8006b9e:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006ba6:	2000      	movs	r0, #0
}
 8006ba8:	bcf0      	pop	{r4, r5, r6, r7}
 8006baa:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006bac:	2002      	movs	r0, #2
}
 8006bae:	4770      	bx	lr
 8006bb0:	40012c00 	.word	0x40012c00

08006bb4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006bb4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d069      	beq.n	8006c90 <HAL_TIM_SlaveConfigSynchro+0xdc>
 8006bbc:	4684      	mov	ip, r0
 8006bbe:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8006bc0:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc2:	2302      	movs	r3, #2
{
 8006bc4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006bc6:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006bca:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006bce:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006bd0:	684b      	ldr	r3, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006bd2:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bd4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006bd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006bdc:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006bde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006be2:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006be6:	4322      	orrs	r2, r4
  switch (sSlaveConfig->InputTrigger)
 8006be8:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8006bea:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8006bec:	d05e      	beq.n	8006cac <HAL_TIM_SlaveConfigSynchro+0xf8>
 8006bee:	d816      	bhi.n	8006c1e <HAL_TIM_SlaveConfigSynchro+0x6a>
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	d06e      	beq.n	8006cd2 <HAL_TIM_SlaveConfigSynchro+0x11e>
 8006bf4:	d933      	bls.n	8006c5e <HAL_TIM_SlaveConfigSynchro+0xaa>
 8006bf6:	2b50      	cmp	r3, #80	; 0x50
 8006bf8:	d141      	bne.n	8006c7e <HAL_TIM_SlaveConfigSynchro+0xca>
  tmpccer = TIMx->CCER;
 8006bfa:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfc:	688a      	ldr	r2, [r1, #8]
 8006bfe:	6909      	ldr	r1, [r1, #16]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c00:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006c04:	431a      	orrs	r2, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c06:	6a03      	ldr	r3, [r0, #32]
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c14:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006c18:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006c1a:	6202      	str	r2, [r0, #32]
 8006c1c:	e00d      	b.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 8006c1e:	2b70      	cmp	r3, #112	; 0x70
 8006c20:	d038      	beq.n	8006c94 <HAL_TIM_SlaveConfigSynchro+0xe0>
 8006c22:	2b6f      	cmp	r3, #111	; 0x6f
 8006c24:	d92b      	bls.n	8006c7e <HAL_TIM_SlaveConfigSynchro+0xca>
 8006c26:	4a2f      	ldr	r2, [pc, #188]	; (8006ce4 <HAL_TIM_SlaveConfigSynchro+0x130>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d006      	beq.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0x86>
 8006c2c:	d91d      	bls.n	8006c6a <HAL_TIM_SlaveConfigSynchro+0xb6>
 8006c2e:	4a2e      	ldr	r2, [pc, #184]	; (8006ce8 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d002      	beq.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0x86>
 8006c34:	3230      	adds	r2, #48	; 0x30
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d121      	bne.n	8006c7e <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006c3a:	68c3      	ldr	r3, [r0, #12]
 8006c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c40:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006c42:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8006c44:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8006c46:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c4c:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006c4e:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006c52:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 8006c56:	4610      	mov	r0, r2
}
 8006c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c5c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d0eb      	beq.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0x86>
 8006c62:	d909      	bls.n	8006c78 <HAL_TIM_SlaveConfigSynchro+0xc4>
 8006c64:	2b30      	cmp	r3, #48	; 0x30
 8006c66:	d10a      	bne.n	8006c7e <HAL_TIM_SlaveConfigSynchro+0xca>
 8006c68:	e7e7      	b.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0x86>
 8006c6a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c6e:	d0e4      	beq.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0x86>
 8006c70:	3a10      	subs	r2, #16
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d0e1      	beq.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0x86>
 8006c76:	e002      	b.n	8006c7e <HAL_TIM_SlaveConfigSynchro+0xca>
 8006c78:	f033 0310 	bics.w	r3, r3, #16
 8006c7c:	d0dd      	beq.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8006c7e:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8006c80:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8006c82:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006c86:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8006c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c8e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006c90:	2002      	movs	r0, #2
}
 8006c92:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c94:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8006c98:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c9a:	6909      	ldr	r1, [r1, #16]
 8006c9c:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c9e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006ca6:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca8:	6083      	str	r3, [r0, #8]
 8006caa:	e7c6      	b.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0x86>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cac:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cae:	688c      	ldr	r4, [r1, #8]
 8006cb0:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb2:	f023 0310 	bic.w	r3, r3, #16
 8006cb6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006cba:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cbc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cc4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cc8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006ccc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006cce:	6203      	str	r3, [r0, #32]
 8006cd0:	e7b3      	b.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006cd2:	2c05      	cmp	r4, #5
 8006cd4:	d0d3      	beq.n	8006c7e <HAL_TIM_SlaveConfigSynchro+0xca>
 8006cd6:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 8006cda:	d0d0      	beq.n	8006c7e <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 8006cdc:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006cde:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006ce0:	6a03      	ldr	r3, [r0, #32]
 8006ce2:	e791      	b.n	8006c08 <HAL_TIM_SlaveConfigSynchro+0x54>
 8006ce4:	00100030 	.word	0x00100030
 8006ce8:	00100040 	.word	0x00100040

08006cec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cec:	6a03      	ldr	r3, [r0, #32]
 8006cee:	f023 0310 	bic.w	r3, r3, #16
 8006cf2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006cf4:	6a03      	ldr	r3, [r0, #32]
{
 8006cf6:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8006cf8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006cfa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cfc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cfe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006d02:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d0a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006d0c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d14:	4d14      	ldr	r5, [pc, #80]	; (8006d68 <TIM_OC2_SetConfig+0x7c>)
 8006d16:	42a8      	cmp	r0, r5
 8006d18:	d010      	beq.n	8006d3c <TIM_OC2_SetConfig+0x50>
 8006d1a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006d1e:	42a8      	cmp	r0, r5
 8006d20:	d00c      	beq.n	8006d3c <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d22:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006d26:	42a8      	cmp	r0, r5
 8006d28:	d00f      	beq.n	8006d4a <TIM_OC2_SetConfig+0x5e>
 8006d2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006d2e:	42a8      	cmp	r0, r5
 8006d30:	d00b      	beq.n	8006d4a <TIM_OC2_SetConfig+0x5e>
 8006d32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006d36:	42a8      	cmp	r0, r5
 8006d38:	d10f      	bne.n	8006d5a <TIM_OC2_SetConfig+0x6e>
 8006d3a:	e006      	b.n	8006d4a <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d3c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d4a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d4e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d52:	ea46 0c05 	orr.w	ip, r6, r5
 8006d56:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006d5a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006d5c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006d5e:	6182      	str	r2, [r0, #24]
}
 8006d60:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8006d62:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006d64:	6203      	str	r3, [r0, #32]
}
 8006d66:	4770      	bx	lr
 8006d68:	40012c00 	.word	0x40012c00

08006d6c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006d6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	f000 80f7 	beq.w	8006f64 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8006d76:	2301      	movs	r3, #1
{
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8006d7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006d82:	2a14      	cmp	r2, #20
 8006d84:	d80c      	bhi.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006d86:	e8df f002 	tbb	[pc, r2]
 8006d8a:	0b55      	.short	0x0b55
 8006d8c:	0b6a0b0b 	.word	0x0b6a0b0b
 8006d90:	0b800b0b 	.word	0x0b800b0b
 8006d94:	0b950b0b 	.word	0x0b950b0b
 8006d98:	0bab0b0b 	.word	0x0bab0b0b
 8006d9c:	0b0b      	.short	0x0b0b
 8006d9e:	11          	.byte	0x11
 8006d9f:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006da0:	2200      	movs	r2, #0
  switch (Channel)
 8006da2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006da4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006dac:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dae:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006db0:	6a13      	ldr	r3, [r2, #32]
 8006db2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006db6:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8006db8:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006dba:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8006dbc:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dbe:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006dc2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dca:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dd0:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd4:	4e65      	ldr	r6, [pc, #404]	; (8006f6c <HAL_TIM_PWM_ConfigChannel+0x200>)
 8006dd6:	42b2      	cmp	r2, r6
 8006dd8:	d00f      	beq.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x8e>
 8006dda:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006dde:	42b2      	cmp	r2, r6
 8006de0:	d00b      	beq.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x8e>
 8006de2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006de6:	42b2      	cmp	r2, r6
 8006de8:	d007      	beq.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x8e>
 8006dea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006dee:	42b2      	cmp	r2, r6
 8006df0:	d003      	beq.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x8e>
 8006df2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006df6:	42b2      	cmp	r2, r6
 8006df8:	d104      	bne.n	8006e04 <HAL_TIM_PWM_ConfigChannel+0x98>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006dfa:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006dfc:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e00:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8006e04:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006e06:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8006e08:	6869      	ldr	r1, [r5, #4]
 8006e0a:	64d1      	str	r1, [r2, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8006e0c:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e0e:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e10:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e16:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e18:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8006e1a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006e1e:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e20:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8006e22:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006e26:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006e28:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006e2a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006e2c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e34:	6800      	ldr	r0, [r0, #0]
 8006e36:	f7ff fb8f 	bl	8006558 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e3a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e3c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e3e:	f043 0308 	orr.w	r3, r3, #8
 8006e42:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e44:	6982      	ldr	r2, [r0, #24]
 8006e46:	f022 0204 	bic.w	r2, r2, #4
 8006e4a:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e4c:	6982      	ldr	r2, [r0, #24]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8006e52:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006e54:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006e56:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e5e:	6800      	ldr	r0, [r0, #0]
 8006e60:	f7ff ff44 	bl	8006cec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e64:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e66:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e6c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e6e:	6982      	ldr	r2, [r0, #24]
 8006e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e74:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e76:	6982      	ldr	r2, [r0, #24]
 8006e78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006e7c:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8006e7e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006e80:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006e82:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e8a:	6800      	ldr	r0, [r0, #0]
 8006e8c:	f7ff fba0 	bl	80065d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e90:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e92:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e94:	f043 0308 	orr.w	r3, r3, #8
 8006e98:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e9a:	69c2      	ldr	r2, [r0, #28]
 8006e9c:	f022 0204 	bic.w	r2, r2, #4
 8006ea0:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ea2:	69c2      	ldr	r2, [r0, #28]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 8006ea8:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006eaa:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006eac:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eb4:	6800      	ldr	r0, [r0, #0]
 8006eb6:	f7ff fbcb 	bl	8006650 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eba:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ebc:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ebe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ec2:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ec4:	69c2      	ldr	r2, [r0, #28]
 8006ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eca:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ecc:	69c2      	ldr	r2, [r0, #28]
 8006ece:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006ed2:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 8006ed4:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006ed6:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006ed8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ee0:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006ee2:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ee4:	6a13      	ldr	r3, [r2, #32]
 8006ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eea:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8006eec:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006eee:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8006ef0:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ef2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006ef6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8006efa:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006efc:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8006efe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f06:	4e19      	ldr	r6, [pc, #100]	; (8006f6c <HAL_TIM_PWM_ConfigChannel+0x200>)
 8006f08:	42b2      	cmp	r2, r6
 8006f0a:	d00f      	beq.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8006f0c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006f10:	42b2      	cmp	r2, r6
 8006f12:	d00b      	beq.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8006f14:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006f18:	42b2      	cmp	r2, r6
 8006f1a:	d007      	beq.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8006f1c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006f20:	42b2      	cmp	r2, r6
 8006f22:	d003      	beq.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8006f24:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006f28:	42b2      	cmp	r2, r6
 8006f2a:	d104      	bne.n	8006f36 <HAL_TIM_PWM_ConfigChannel+0x1ca>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f2c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f2e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f32:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006f36:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006f38:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006f3a:	6869      	ldr	r1, [r5, #4]
 8006f3c:	6491      	str	r1, [r2, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8006f3e:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f40:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f42:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f44:	f043 0308 	orr.w	r3, r3, #8
 8006f48:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f4a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8006f4c:	f021 0104 	bic.w	r1, r1, #4
 8006f50:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f52:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8006f54:	4301      	orrs	r1, r0
 8006f56:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006f58:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006f5c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8006f64:	2302      	movs	r3, #2
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40012c00 	.word	0x40012c00

08006f70 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d03e      	beq.n	8006ff6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8006f78:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f7a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f7c:	4d1f      	ldr	r5, [pc, #124]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f84:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006f86:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006f88:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f8a:	d028      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006f8c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006f90:	42aa      	cmp	r2, r5
 8006f92:	d024      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f94:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f96:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f9e:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006fa4:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa6:	d00c      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006fa8:	4b15      	ldr	r3, [pc, #84]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d009      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d005      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006fb6:	42aa      	cmp	r2, r5
 8006fb8:	d003      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006fba:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d104      	bne.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fc2:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fc8:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fca:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006fcc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006fd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006fd8:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8006fda:	4618      	mov	r0, r3
}
 8006fdc:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fde:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fe0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fe4:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fe6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fea:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff0:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006ff2:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff4:	e7e5      	b.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8006ff6:	2002      	movs	r0, #2
}
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	40012c00 	.word	0x40012c00
 8007000:	40000400 	.word	0x40000400

08007004 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007004:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d045      	beq.n	8007098 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 800700c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800700e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8007012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007016:	4602      	mov	r2, r0
 8007018:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800701a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800701c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800701e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007022:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007028:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800702a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800702c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007030:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007032:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007038:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800703a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800703c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007040:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007042:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007044:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007048:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800704a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800704e:	4c13      	ldr	r4, [pc, #76]	; (800709c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007050:	42a0      	cmp	r0, r4
 8007052:	d00b      	beq.n	800706c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8007054:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007058:	42a0      	cmp	r0, r4
 800705a:	d007      	beq.n	800706c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800705c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800705e:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007060:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8007064:	4608      	mov	r0, r1
}
 8007066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800706a:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800706c:	69cc      	ldr	r4, [r1, #28]
 800706e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007072:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007074:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007076:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800707a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800707e:	6a0c      	ldr	r4, [r1, #32]
 8007080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007084:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007086:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007088:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800708a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800708e:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007090:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007094:	430b      	orrs	r3, r1
 8007096:	e7e1      	b.n	800705c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007098:	2002      	movs	r0, #2
}
 800709a:	4770      	bx	lr
 800709c:	40012c00 	.word	0x40012c00

080070a0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80070a0:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80070a2:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80070a6:	2801      	cmp	r0, #1
 80070a8:	d04c      	beq.n	8007144 <HAL_TIMEx_ConfigBreakInput+0xa4>

  switch (sBreakInputConfig->Source)
 80070aa:	6810      	ldr	r0, [r2, #0]
 80070ac:	3801      	subs	r0, #1
 80070ae:	280f      	cmp	r0, #15
{
 80070b0:	b4f0      	push	{r4, r5, r6, r7}
 80070b2:	d825      	bhi.n	8007100 <HAL_TIMEx_ConfigBreakInput+0x60>
 80070b4:	4c24      	ldr	r4, [pc, #144]	; (8007148 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 80070b6:	4e25      	ldr	r6, [pc, #148]	; (800714c <HAL_TIMEx_ConfigBreakInput+0xac>)
 80070b8:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 80070bc:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 80070c0:	4c23      	ldr	r4, [pc, #140]	; (8007150 <HAL_TIMEx_ConfigBreakInput+0xb0>)
 80070c2:	4e24      	ldr	r6, [pc, #144]	; (8007154 <HAL_TIMEx_ConfigBreakInput+0xb4>)
 80070c4:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80070c8:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 80070cc:	2901      	cmp	r1, #1
 80070ce:	d01d      	beq.n	800710c <HAL_TIMEx_ConfigBreakInput+0x6c>
 80070d0:	2902      	cmp	r1, #2
 80070d2:	d131      	bne.n	8007138 <HAL_TIMEx_ConfigBreakInput+0x98>
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80070d4:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 80070d6:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80070d8:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80070da:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 80070dc:	6e77      	ldr	r7, [r6, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80070de:	fa01 f10c 	lsl.w	r1, r1, ip
 80070e2:	ea81 0207 	eor.w	r2, r1, r7
 80070e6:	402a      	ands	r2, r5
 80070e8:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80070ea:	ea80 0102 	eor.w	r1, r0, r2
 80070ee:	4021      	ands	r1, r4
 80070f0:	404a      	eors	r2, r1

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80070f2:	6672      	str	r2, [r6, #100]	; 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80070fa:	2000      	movs	r0, #0

  return status;
}
 80070fc:	bcf0      	pop	{r4, r5, r6, r7}
 80070fe:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8007100:	2700      	movs	r7, #0
  switch (BreakInput)
 8007102:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8007104:	46bc      	mov	ip, r7
 8007106:	463c      	mov	r4, r7
 8007108:	463d      	mov	r5, r7
  switch (BreakInput)
 800710a:	d1e1      	bne.n	80070d0 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800710c:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 800710e:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007110:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007112:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8007114:	6e37      	ldr	r7, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007116:	fa01 f10c 	lsl.w	r1, r1, ip
 800711a:	ea81 0207 	eor.w	r2, r1, r7
 800711e:	402a      	ands	r2, r5
 8007120:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007122:	ea80 0102 	eor.w	r1, r0, r2
 8007126:	4021      	ands	r1, r4
 8007128:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 800712a:	6632      	str	r2, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007132:	2000      	movs	r0, #0
}
 8007134:	bcf0      	pop	{r4, r5, r6, r7}
 8007136:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  switch (BreakInput)
 800713e:	2001      	movs	r0, #1
}
 8007140:	bcf0      	pop	{r4, r5, r6, r7}
 8007142:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007144:	2002      	movs	r0, #2
}
 8007146:	4770      	bx	lr
 8007148:	0800a5bc 	.word	0x0800a5bc
 800714c:	0800a63c 	.word	0x0800a63c
 8007150:	0800a5fc 	.word	0x0800a5fc
 8007154:	0800a67c 	.word	0x0800a67c

08007158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800715c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800715e:	6882      	ldr	r2, [r0, #8]
 8007160:	6900      	ldr	r0, [r0, #16]
 8007162:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007164:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007166:	4302      	orrs	r2, r0
 8007168:	430a      	orrs	r2, r1
 800716a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800716c:	49a5      	ldr	r1, [pc, #660]	; (8007404 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800716e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007170:	4029      	ands	r1, r5
 8007172:	430a      	orrs	r2, r1
 8007174:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68e1      	ldr	r1, [r4, #12]
 800717a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800717e:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007180:	49a1      	ldr	r1, [pc, #644]	; (8007408 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007182:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007184:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007186:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007188:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800718a:	d06b      	beq.n	8007264 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 800718c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800718e:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8007192:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8007196:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007198:	430a      	orrs	r2, r1
 800719a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800719c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80071a0:	f022 020f 	bic.w	r2, r2, #15
 80071a4:	430a      	orrs	r2, r1
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071a8:	4a98      	ldr	r2, [pc, #608]	; (800740c <UART_SetConfig+0x2b4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d012      	beq.n	80071d4 <UART_SetConfig+0x7c>
 80071ae:	4a98      	ldr	r2, [pc, #608]	; (8007410 <UART_SetConfig+0x2b8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d036      	beq.n	8007222 <UART_SetConfig+0xca>
 80071b4:	4a97      	ldr	r2, [pc, #604]	; (8007414 <UART_SetConfig+0x2bc>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	f000 80f8 	beq.w	80073ac <UART_SetConfig+0x254>
 80071bc:	4a96      	ldr	r2, [pc, #600]	; (8007418 <UART_SetConfig+0x2c0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	f000 80a4 	beq.w	800730c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 80071c4:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071c6:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80071c8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80071cc:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80071d0:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071d4:	4b91      	ldr	r3, [pc, #580]	; (800741c <UART_SetConfig+0x2c4>)
 80071d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	3b01      	subs	r3, #1
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	f240 808d 	bls.w	8007300 <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80071ea:	f000 80fc 	beq.w	80073e6 <UART_SetConfig+0x28e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ee:	f7ff f855 	bl	800629c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80071f2:	2800      	cmp	r0, #0
 80071f4:	f000 80d8 	beq.w	80073a8 <UART_SetConfig+0x250>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80071fa:	6862      	ldr	r2, [r4, #4]
 80071fc:	4b88      	ldr	r3, [pc, #544]	; (8007420 <UART_SetConfig+0x2c8>)
 80071fe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007202:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007206:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800720a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800720e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007212:	f1a3 0210 	sub.w	r2, r3, #16
 8007216:	428a      	cmp	r2, r1
 8007218:	d8d4      	bhi.n	80071c4 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	2000      	movs	r0, #0
 800721e:	60d3      	str	r3, [r2, #12]
 8007220:	e7d1      	b.n	80071c6 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007222:	4b7e      	ldr	r3, [pc, #504]	; (800741c <UART_SetConfig+0x2c4>)
 8007224:	4a7f      	ldr	r2, [pc, #508]	; (8007424 <UART_SetConfig+0x2cc>)
 8007226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722a:	f003 030c 	and.w	r3, r3, #12
 800722e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007230:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007234:	d07c      	beq.n	8007330 <UART_SetConfig+0x1d8>
    switch (clocksource)
 8007236:	2b08      	cmp	r3, #8
 8007238:	d8c4      	bhi.n	80071c4 <UART_SetConfig+0x6c>
 800723a:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <UART_SetConfig+0xe8>)
 800723c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007240:	08007367 	.word	0x08007367
 8007244:	080071ef 	.word	0x080071ef
 8007248:	080073e3 	.word	0x080073e3
 800724c:	080071c5 	.word	0x080071c5
 8007250:	0800732b 	.word	0x0800732b
 8007254:	080071c5 	.word	0x080071c5
 8007258:	080071c5 	.word	0x080071c5
 800725c:	080071c5 	.word	0x080071c5
 8007260:	080073d3 	.word	0x080073d3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007264:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8007268:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800726c:	4311      	orrs	r1, r2
 800726e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007274:	4869      	ldr	r0, [pc, #420]	; (800741c <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007276:	f022 020f 	bic.w	r2, r2, #15
 800727a:	430a      	orrs	r2, r1
 800727c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800727e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007282:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800728a:	f000 80a8 	beq.w	80073de <UART_SetConfig+0x286>
 800728e:	d80b      	bhi.n	80072a8 <UART_SetConfig+0x150>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d038      	beq.n	8007306 <UART_SetConfig+0x1ae>
 8007294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007298:	d194      	bne.n	80071c4 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 800729a:	f7fe feab 	bl	8005ff4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800729e:	2800      	cmp	r0, #0
 80072a0:	f000 8082 	beq.w	80073a8 <UART_SetConfig+0x250>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072a6:	e004      	b.n	80072b2 <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072ac:	d18a      	bne.n	80071c4 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 80072ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072b2:	4b5b      	ldr	r3, [pc, #364]	; (8007420 <UART_SetConfig+0x2c8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072b4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072b6:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80072ba:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072be:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80072c2:	4299      	cmp	r1, r3
 80072c4:	f63f af7e 	bhi.w	80071c4 <UART_SetConfig+0x6c>
 80072c8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80072cc:	f63f af7a 	bhi.w	80071c4 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072d0:	2300      	movs	r3, #0
 80072d2:	4619      	mov	r1, r3
 80072d4:	f7f8 ffa0 	bl	8000218 <__aeabi_uldivmod>
 80072d8:	086a      	lsrs	r2, r5, #1
 80072da:	0203      	lsls	r3, r0, #8
 80072dc:	0209      	lsls	r1, r1, #8
 80072de:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80072e2:	1898      	adds	r0, r3, r2
 80072e4:	f141 0100 	adc.w	r1, r1, #0
 80072e8:	462a      	mov	r2, r5
 80072ea:	2300      	movs	r3, #0
 80072ec:	f7f8 ff94 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f0:	4a4d      	ldr	r2, [pc, #308]	; (8007428 <UART_SetConfig+0x2d0>)
 80072f2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80072f6:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072f8:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072fa:	f63f af63 	bhi.w	80071c4 <UART_SetConfig+0x6c>
 80072fe:	e78c      	b.n	800721a <UART_SetConfig+0xc2>
 8007300:	4a4a      	ldr	r2, [pc, #296]	; (800742c <UART_SetConfig+0x2d4>)
 8007302:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8007304:	e794      	b.n	8007230 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007306:	f7fe ffb7 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
        break;
 800730a:	e7c8      	b.n	800729e <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800730c:	4b43      	ldr	r3, [pc, #268]	; (800741c <UART_SetConfig+0x2c4>)
 800730e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007312:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007316:	2b80      	cmp	r3, #128	; 0x80
 8007318:	d06d      	beq.n	80073f6 <UART_SetConfig+0x29e>
 800731a:	d85d      	bhi.n	80073d8 <UART_SetConfig+0x280>
 800731c:	b303      	cbz	r3, 8007360 <UART_SetConfig+0x208>
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	f47f af50 	bne.w	80071c4 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007324:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007328:	d020      	beq.n	800736c <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 800732a:	f7fe fe63 	bl	8005ff4 <HAL_RCC_GetSysClockFreq>
        break;
 800732e:	e760      	b.n	80071f2 <UART_SetConfig+0x9a>
    switch (clocksource)
 8007330:	2b08      	cmp	r3, #8
 8007332:	f63f af47 	bhi.w	80071c4 <UART_SetConfig+0x6c>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <UART_SetConfig+0x1e4>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	080073ed 	.word	0x080073ed
 8007340:	080073e7 	.word	0x080073e7
 8007344:	080073f3 	.word	0x080073f3
 8007348:	080071c5 	.word	0x080071c5
 800734c:	0800736d 	.word	0x0800736d
 8007350:	080071c5 	.word	0x080071c5
 8007354:	080071c5 	.word	0x080071c5
 8007358:	080071c5 	.word	0x080071c5
 800735c:	08007375 	.word	0x08007375
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007360:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007364:	d042      	beq.n	80073ec <UART_SetConfig+0x294>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007366:	f7fe ff87 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
        break;
 800736a:	e742      	b.n	80071f2 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 800736c:	f7fe fe42 	bl	8005ff4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007370:	b1d0      	cbz	r0, 80073a8 <UART_SetConfig+0x250>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007372:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007374:	6862      	ldr	r2, [r4, #4]
 8007376:	4b2a      	ldr	r3, [pc, #168]	; (8007420 <UART_SetConfig+0x2c8>)
 8007378:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800737c:	fbb0 f0f1 	udiv	r0, r0, r1
 8007380:	0853      	lsrs	r3, r2, #1
 8007382:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007386:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800738a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800738e:	f1a3 0210 	sub.w	r2, r3, #16
 8007392:	428a      	cmp	r2, r1
 8007394:	f63f af16 	bhi.w	80071c4 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007398:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800739c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800739e:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073a0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60cb      	str	r3, [r1, #12]
 80073a8:	2000      	movs	r0, #0
 80073aa:	e70c      	b.n	80071c6 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ac:	4b1b      	ldr	r3, [pc, #108]	; (800741c <UART_SetConfig+0x2c4>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d01d      	beq.n	80073f6 <UART_SetConfig+0x29e>
 80073ba:	d804      	bhi.n	80073c6 <UART_SetConfig+0x26e>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0cf      	beq.n	8007360 <UART_SetConfig+0x208>
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	d0af      	beq.n	8007324 <UART_SetConfig+0x1cc>
 80073c4:	e6fe      	b.n	80071c4 <UART_SetConfig+0x6c>
 80073c6:	2b30      	cmp	r3, #48	; 0x30
 80073c8:	f47f aefc 	bne.w	80071c4 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80073d0:	d0d0      	beq.n	8007374 <UART_SetConfig+0x21c>
    switch (clocksource)
 80073d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80073d6:	e710      	b.n	80071fa <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073d8:	2bc0      	cmp	r3, #192	; 0xc0
 80073da:	d0f7      	beq.n	80073cc <UART_SetConfig+0x274>
 80073dc:	e6f2      	b.n	80071c4 <UART_SetConfig+0x6c>
 80073de:	4814      	ldr	r0, [pc, #80]	; (8007430 <UART_SetConfig+0x2d8>)
 80073e0:	e767      	b.n	80072b2 <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 80073e2:	4813      	ldr	r0, [pc, #76]	; (8007430 <UART_SetConfig+0x2d8>)
 80073e4:	e709      	b.n	80071fa <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 80073e6:	f7fe ff59 	bl	800629c <HAL_RCC_GetPCLK2Freq>
        break;
 80073ea:	e7c1      	b.n	8007370 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 80073ec:	f7fe ff44 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
        break;
 80073f0:	e7be      	b.n	8007370 <UART_SetConfig+0x218>
        pclk = (uint32_t) HSI_VALUE;
 80073f2:	480f      	ldr	r0, [pc, #60]	; (8007430 <UART_SetConfig+0x2d8>)
 80073f4:	e7be      	b.n	8007374 <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80073fa:	480d      	ldr	r0, [pc, #52]	; (8007430 <UART_SetConfig+0x2d8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073fc:	f47f aefd 	bne.w	80071fa <UART_SetConfig+0xa2>
 8007400:	e7b8      	b.n	8007374 <UART_SetConfig+0x21c>
 8007402:	bf00      	nop
 8007404:	cfff69f3 	.word	0xcfff69f3
 8007408:	40008000 	.word	0x40008000
 800740c:	40013800 	.word	0x40013800
 8007410:	40004400 	.word	0x40004400
 8007414:	40004800 	.word	0x40004800
 8007418:	40004c00 	.word	0x40004c00
 800741c:	40021000 	.word	0x40021000
 8007420:	0800a6d0 	.word	0x0800a6d0
 8007424:	0800a6c0 	.word	0x0800a6c0
 8007428:	000ffcff 	.word	0x000ffcff
 800742c:	0800a6bc 	.word	0x0800a6bc
 8007430:	00f42400 	.word	0x00f42400

08007434 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007434:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007436:	07da      	lsls	r2, r3, #31
{
 8007438:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800743a:	d506      	bpl.n	800744a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800743c:	6801      	ldr	r1, [r0, #0]
 800743e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007440:	684a      	ldr	r2, [r1, #4]
 8007442:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007446:	4322      	orrs	r2, r4
 8007448:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800744a:	079c      	lsls	r4, r3, #30
 800744c:	d506      	bpl.n	800745c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800744e:	6801      	ldr	r1, [r0, #0]
 8007450:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007452:	684a      	ldr	r2, [r1, #4]
 8007454:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007458:	4322      	orrs	r2, r4
 800745a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800745c:	0759      	lsls	r1, r3, #29
 800745e:	d506      	bpl.n	800746e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007460:	6801      	ldr	r1, [r0, #0]
 8007462:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007464:	684a      	ldr	r2, [r1, #4]
 8007466:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800746a:	4322      	orrs	r2, r4
 800746c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800746e:	071a      	lsls	r2, r3, #28
 8007470:	d506      	bpl.n	8007480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007472:	6801      	ldr	r1, [r0, #0]
 8007474:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007476:	684a      	ldr	r2, [r1, #4]
 8007478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800747c:	4322      	orrs	r2, r4
 800747e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007480:	06dc      	lsls	r4, r3, #27
 8007482:	d506      	bpl.n	8007492 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007484:	6801      	ldr	r1, [r0, #0]
 8007486:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007488:	688a      	ldr	r2, [r1, #8]
 800748a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800748e:	4322      	orrs	r2, r4
 8007490:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007492:	0699      	lsls	r1, r3, #26
 8007494:	d506      	bpl.n	80074a4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007496:	6801      	ldr	r1, [r0, #0]
 8007498:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800749a:	688a      	ldr	r2, [r1, #8]
 800749c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074a0:	4322      	orrs	r2, r4
 80074a2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074a4:	065a      	lsls	r2, r3, #25
 80074a6:	d509      	bpl.n	80074bc <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074a8:	6801      	ldr	r1, [r0, #0]
 80074aa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80074ac:	684a      	ldr	r2, [r1, #4]
 80074ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80074b2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074b8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074ba:	d00b      	beq.n	80074d4 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074bc:	061b      	lsls	r3, r3, #24
 80074be:	d506      	bpl.n	80074ce <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074c0:	6802      	ldr	r2, [r0, #0]
 80074c2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80074c4:	6853      	ldr	r3, [r2, #4]
 80074c6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80074ca:	430b      	orrs	r3, r1
 80074cc:	6053      	str	r3, [r2, #4]
  }
}
 80074ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074d2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074d4:	684a      	ldr	r2, [r1, #4]
 80074d6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80074d8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80074dc:	4322      	orrs	r2, r4
 80074de:	604a      	str	r2, [r1, #4]
 80074e0:	e7ec      	b.n	80074bc <UART_AdvFeatureConfig+0x88>
 80074e2:	bf00      	nop

080074e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ec:	6804      	ldr	r4, [r0, #0]
{
 80074ee:	4607      	mov	r7, r0
 80074f0:	460e      	mov	r6, r1
 80074f2:	4615      	mov	r5, r2
 80074f4:	4699      	mov	r9, r3
 80074f6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80074fa:	d10a      	bne.n	8007512 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074fc:	69e3      	ldr	r3, [r4, #28]
 80074fe:	ea36 0303 	bics.w	r3, r6, r3
 8007502:	bf0c      	ite	eq
 8007504:	2301      	moveq	r3, #1
 8007506:	2300      	movne	r3, #0
 8007508:	429d      	cmp	r5, r3
 800750a:	d0f7      	beq.n	80074fc <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800750c:	2000      	movs	r0, #0
}
 800750e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007512:	69e2      	ldr	r2, [r4, #28]
 8007514:	ea36 0202 	bics.w	r2, r6, r2
 8007518:	bf0c      	ite	eq
 800751a:	2301      	moveq	r3, #1
 800751c:	2300      	movne	r3, #0
 800751e:	42ab      	cmp	r3, r5
 8007520:	d1f4      	bne.n	800750c <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007522:	f7fc ff6d 	bl	8004400 <HAL_GetTick>
 8007526:	eba0 0009 	sub.w	r0, r0, r9
 800752a:	4540      	cmp	r0, r8
 800752c:	d833      	bhi.n	8007596 <UART_WaitOnFlagUntilTimeout+0xb2>
 800752e:	f1b8 0f00 	cmp.w	r8, #0
 8007532:	d030      	beq.n	8007596 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007534:	683c      	ldr	r4, [r7, #0]
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	0758      	lsls	r0, r3, #29
 800753a:	4622      	mov	r2, r4
 800753c:	d5db      	bpl.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800753e:	69e3      	ldr	r3, [r4, #28]
 8007540:	0519      	lsls	r1, r3, #20
 8007542:	d5d8      	bpl.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007544:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007548:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800754e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	e844 3100 	strex	r1, r3, [r4]
 8007556:	b139      	cbz	r1, 8007568 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	e852 3f00 	ldrex	r3, [r2]
 800755c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	e842 3100 	strex	r1, r3, [r2]
 8007564:	2900      	cmp	r1, #0
 8007566:	d1f7      	bne.n	8007558 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	f102 0308 	add.w	r3, r2, #8
 800756c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	f102 0008 	add.w	r0, r2, #8
 8007578:	e840 3100 	strex	r1, r3, [r0]
 800757c:	2900      	cmp	r1, #0
 800757e:	d1f3      	bne.n	8007568 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8007580:	2320      	movs	r3, #32
 8007582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8007586:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800758a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800758e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8007594:	e7bb      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0x2a>
 8007596:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800759c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	e842 3100 	strex	r1, r3, [r2]
 80075a4:	2900      	cmp	r1, #0
 80075a6:	d1f7      	bne.n	8007598 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	f102 0308 	add.w	r3, r2, #8
 80075ac:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	f102 0008 	add.w	r0, r2, #8
 80075b8:	e840 3100 	strex	r1, r3, [r0]
 80075bc:	2900      	cmp	r1, #0
 80075be:	d1f3      	bne.n	80075a8 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 80075c0:	2320      	movs	r3, #32
 80075c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80075c6:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80075ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 80075ce:	2003      	movs	r0, #3
 80075d0:	e79d      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0x2a>
 80075d2:	bf00      	nop

080075d4 <HAL_UART_Init>:
  if (huart == NULL)
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d066      	beq.n	80076a6 <HAL_UART_Init+0xd2>
{
 80075d8:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80075da:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80075de:	b082      	sub	sp, #8
 80075e0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d04c      	beq.n	8007680 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 80075e6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80075e8:	2324      	movs	r3, #36	; 0x24
 80075ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80075ee:	6813      	ldr	r3, [r2, #0]
 80075f0:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075f4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80075f6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075f8:	f7ff fdae 	bl	8007158 <UART_SetConfig>
 80075fc:	2801      	cmp	r0, #1
 80075fe:	d03c      	beq.n	800767a <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007600:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	d135      	bne.n	8007672 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	6859      	ldr	r1, [r3, #4]
 800760a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800760e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007610:	6899      	ldr	r1, [r3, #8]
 8007612:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8007616:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007618:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761a:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800761c:	f041 0101 	orr.w	r1, r1, #1
 8007620:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007622:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8007626:	f7fc feeb 	bl	8004400 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8007630:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007632:	d40e      	bmi.n	8007652 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	075b      	lsls	r3, r3, #29
 8007638:	d427      	bmi.n	800768a <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800763c:	2220      	movs	r2, #32
 800763e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007642:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007646:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800764a:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800764e:	b002      	add	sp, #8
 8007650:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007652:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	462a      	mov	r2, r5
 800765a:	4603      	mov	r3, r0
 800765c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007660:	4620      	mov	r0, r4
 8007662:	f7ff ff3f 	bl	80074e4 <UART_WaitOnFlagUntilTimeout>
 8007666:	b9e0      	cbnz	r0, 80076a2 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	075b      	lsls	r3, r3, #29
 800766e:	d40c      	bmi.n	800768a <HAL_UART_Init+0xb6>
 8007670:	e7e3      	b.n	800763a <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff fede 	bl	8007434 <UART_AdvFeatureConfig>
 8007678:	e7c5      	b.n	8007606 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800767a:	2001      	movs	r0, #1
}
 800767c:	b002      	add	sp, #8
 800767e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8007680:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007684:	f7fc fc74 	bl	8003f70 <HAL_UART_MspInit>
 8007688:	e7ad      	b.n	80075e6 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800768a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	2200      	movs	r2, #0
 8007692:	4633      	mov	r3, r6
 8007694:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007698:	4620      	mov	r0, r4
 800769a:	f7ff ff23 	bl	80074e4 <UART_WaitOnFlagUntilTimeout>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d0cb      	beq.n	800763a <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80076a2:	2003      	movs	r0, #3
 80076a4:	e7d3      	b.n	800764e <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 80076a6:	2001      	movs	r0, #1
}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop

080076ac <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076ac:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d017      	beq.n	80076e4 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076b4:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80076b6:	2324      	movs	r3, #36	; 0x24
{
 80076b8:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80076ba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076be:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076c0:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076c2:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80076c4:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076c8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80076cc:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076ce:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076d0:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076d2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80076d6:	2220      	movs	r2, #32
 80076d8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 80076dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80076e0:	4618      	mov	r0, r3
}
 80076e2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80076e4:	2002      	movs	r0, #2
}
 80076e6:	4770      	bx	lr

080076e8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076e8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80076ec:	2a01      	cmp	r2, #1
 80076ee:	d037      	beq.n	8007760 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80076f0:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076f2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80076f4:	2024      	movs	r0, #36	; 0x24
{
 80076f6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80076f8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076fc:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076fe:	6810      	ldr	r0, [r2, #0]
 8007700:	f020 0001 	bic.w	r0, r0, #1
 8007704:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007706:	6890      	ldr	r0, [r2, #8]
 8007708:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800770c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800770e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007710:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007712:	b310      	cbz	r0, 800775a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007714:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007716:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8007718:	4d12      	ldr	r5, [pc, #72]	; (8007764 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800771a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800771e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007722:	4911      	ldr	r1, [pc, #68]	; (8007768 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8007724:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007728:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800772c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007730:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007734:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007736:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007738:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800773c:	fbb1 f1f5 	udiv	r1, r1, r5
 8007740:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007744:	2100      	movs	r1, #0
 8007746:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800774a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800774c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800774e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8007752:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007754:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8007758:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800775a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800775c:	4608      	mov	r0, r1
 800775e:	e7ef      	b.n	8007740 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007760:	2002      	movs	r0, #2
}
 8007762:	4770      	bx	lr
 8007764:	0800a6e8 	.word	0x0800a6e8
 8007768:	0800a6f0 	.word	0x0800a6f0

0800776c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800776c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007770:	2a01      	cmp	r2, #1
 8007772:	d037      	beq.n	80077e4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8007774:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007776:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007778:	2024      	movs	r0, #36	; 0x24
{
 800777a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800777c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007780:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007782:	6810      	ldr	r0, [r2, #0]
 8007784:	f020 0001 	bic.w	r0, r0, #1
 8007788:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800778a:	6890      	ldr	r0, [r2, #8]
 800778c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8007790:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007792:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007794:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007796:	b310      	cbz	r0, 80077de <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007798:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800779a:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800779c:	4d12      	ldr	r5, [pc, #72]	; (80077e8 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800779e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077a2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077a6:	4911      	ldr	r1, [pc, #68]	; (80077ec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80077a8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077ac:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80077b0:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80077b4:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077b8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077ba:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077bc:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077c0:	fbb1 f1f5 	udiv	r1, r1, r5
 80077c4:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80077c8:	2100      	movs	r1, #0
 80077ca:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80077ce:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d0:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80077d2:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80077d6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80077d8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80077dc:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80077de:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80077e0:	4608      	mov	r0, r1
 80077e2:	e7ef      	b.n	80077c4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80077e4:	2002      	movs	r0, #2
}
 80077e6:	4770      	bx	lr
 80077e8:	0800a6e8 	.word	0x0800a6e8
 80077ec:	0800a6f0 	.word	0x0800a6f0

080077f0 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 80077f0:	88c0      	ldrh	r0, [r0, #6]
 80077f2:	4770      	bx	lr

080077f4 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80077f4:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 80077f6:	8840      	ldrh	r0, [r0, #2]
 80077f8:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 80077fc:	0c00      	lsrs	r0, r0, #16
 80077fe:	4770      	bx	lr

08007800 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8007800:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8007802:	8803      	ldrh	r3, [r0, #0]
 8007804:	140d      	asrs	r5, r1, #16
{
 8007806:	b084      	sub	sp, #16
 8007808:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800780a:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 800780e:	fb03 f303 	mul.w	r3, r3, r3
{
 8007812:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8007814:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8007818:	428b      	cmp	r3, r1
 800781a:	da10      	bge.n	800783e <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 800781c:	8846      	ldrh	r6, [r0, #2]
 800781e:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8007822:	4282      	cmp	r2, r0
 8007824:	dd14      	ble.n	8007850 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8007826:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8007828:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 800782c:	bfb8      	it	lt
 800782e:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8007830:	f7f9 ffe2 	bl	80017f8 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8007834:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 8007836:	bfb8      	it	lt
 8007838:	4240      	neglt	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 800783a:	b235      	sxth	r5, r6
      Local_Vqd.q = (int16_t)new_q;
 800783c:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 800783e:	b2a4      	uxth	r4, r4
 8007840:	2000      	movs	r0, #0
 8007842:	f364 000f 	bfi	r0, r4, #0, #16
 8007846:	b2ad      	uxth	r5, r5
 8007848:	f365 401f 	bfi	r0, r5, #16, #16
}
 800784c:	b004      	add	sp, #16
 800784e:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8007850:	1a98      	subs	r0, r3, r2
 8007852:	f7f9 ffd1 	bl	80017f8 <MCM_Sqrt>
        if (Vqd.q < 0)
 8007856:	2c00      	cmp	r4, #0
 8007858:	daf0      	bge.n	800783c <Circle_Limitation+0x3c>
          new_q = -new_q;
 800785a:	4240      	negs	r0, r0
 800785c:	e7ee      	b.n	800783c <Circle_Limitation+0x3c>
 800785e:	bf00      	nop

08007860 <esc_boot>:
  * @brief  Boot function to initialize the ESC board.
  * @retval none.
  */
void esc_boot(ESC_Handle_t * pHandle)
{
  TIM_TypeDef * TIMx = pHandle->pESC_params->Command_TIM;
 8007860:	6803      	ldr	r3, [r0, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8007864:	6a1a      	ldr	r2, [r3, #32]
 8007866:	f042 0210 	orr.w	r2, r2, #16
 800786a:	621a      	str	r2, [r3, #32]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	f042 0202 	orr.w	r2, r2, #2
 8007872:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007874:	6a1a      	ldr	r2, [r3, #32]
  LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH2);
  LL_TIM_EnableIT_CC1 (TIMx);
  LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1);
  LL_TIM_EnableCounter(TIMx);
#ifdef ESC_BEEP_FEATURE
  pHandle->beep_state = SM_BEEP_1;
 8007876:	f04f 0c01 	mov.w	ip, #1
 800787a:	ea42 020c 	orr.w	r2, r2, ip
 800787e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007880:	681a      	ldr	r2, [r3, #0]
  pHandle->phase_check_status = false;
 8007882:	2100      	movs	r1, #0
 8007884:	ea42 020c 	orr.w	r2, r2, ip
 8007888:	601a      	str	r2, [r3, #0]
  pHandle->beep_state = SM_BEEP_1;
 800788a:	f880 c032 	strb.w	ip, [r0, #50]	; 0x32
  pHandle->phase_check_status = false;
 800788e:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
#endif
  
}
 8007892:	4770      	bx	lr

08007894 <esc_pwm_control>:
void esc_pwm_control(ESC_Handle_t * pHandle)
{
  ESC_State_t ESC_Fault_Occured;
     
#ifdef ESC_BEEP_FEATURE    
  if ( pHandle->phase_check_status == false)
 8007894:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	4604      	mov	r4, r0
  if ( pHandle->phase_check_status == false)
 800789c:	2a00      	cmp	r2, #0
 800789e:	d13c      	bne.n	800791a <esc_pwm_control+0x86>
 return (ESC_Beep_loop_STATUS);
}

static bool esc_phase_check(ESC_Handle_t * pHandle)
{ 
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 80078a0:	6803      	ldr	r3, [r0, #0]
   bool ESC_phase_check_status = false;
 
 /* TIMx Peripheral Configuration -------------------------------------------*/    
  if(pHandle-> start_check_flag == false)
 80078a2:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 80078a6:	685b      	ldr	r3, [r3, #4]
  if(pHandle-> start_check_flag == false)
 80078a8:	bb60      	cbnz	r0, 8007904 <esc_pwm_control+0x70>
  {
    pHandle-> start_check_flag = true;
 80078aa:	2001      	movs	r0, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 80078ac:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 80078b0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80078b4:	62d9      	str	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(TIMx->CCER, Channels);
 80078b6:	6a19      	ldr	r1, [r3, #32]
 80078b8:	f421 61aa 	bic.w	r1, r1, #1360	; 0x550
 80078bc:	f021 0105 	bic.w	r1, r1, #5
 80078c0:	6219      	str	r1, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80078c2:	6a19      	ldr	r1, [r3, #32]
 80078c4:	f441 7188 	orr.w	r1, r1, #272	; 0x110
 80078c8:	4301      	orrs	r1, r0
 80078ca:	6219      	str	r1, [r3, #32]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80078cc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80078ce:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80078d2:	6459      	str	r1, [r3, #68]	; 0x44
  
    LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
                                   | LL_TIM_CHANNEL_CH3 );
    
    LL_TIM_EnableAllOutputs (TIMx);
    pHandle->beep_state = SM_BEEP_1;
 80078d4:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  WRITE_REG(TIMx->CCR2, CompareValue);
 80078d8:	f64f 51e8 	movw	r1, #65000	; 0xfde8
  WRITE_REG(TIMx->CCR3, CompareValue);
 80078dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80078e0:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR2, CompareValue);
 80078e2:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR1, CompareValue);
 80078e4:	6359      	str	r1, [r3, #52]	; 0x34
  CLEAR_BIT(TIMx->CCER, Channels);
 80078e6:	6a19      	ldr	r1, [r3, #32]
 80078e8:	f021 0111 	bic.w	r1, r1, #17
 80078ec:	6219      	str	r1, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80078ee:	6a19      	ldr	r1, [r3, #32]
 80078f0:	f441 61a8 	orr.w	r1, r1, #1344	; 0x540
        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 );
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH1N | LL_TIM_CHANNEL_CH2N
                                     | LL_TIM_CHANNEL_CH3N | LL_TIM_CHANNEL_CH3));        

      }
      pHandle->beep_counter++;
 80078f4:	2001      	movs	r0, #1
 80078f6:	f041 0104 	orr.w	r1, r1, #4
 80078fa:	6219      	str	r1, [r3, #32]
 80078fc:	8620      	strh	r0, [r4, #48]	; 0x30
    pHandle->phase_check_status = esc_phase_check (pHandle);
 80078fe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8007902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (pHandle->beep_state)
 8007904:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8007908:	3901      	subs	r1, #1
 800790a:	2903      	cmp	r1, #3
 800790c:	d8f7      	bhi.n	80078fe <esc_pwm_control+0x6a>
 800790e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007912:	0177      	.short	0x0177
 8007914:	00b000d1 	.word	0x00b000d1
 8007918:	00c7      	.short	0x00c7
    if (MC_GetSTMStateMotor1() == FAULT_OVER)
 800791a:	f7f9 fd41 	bl	80013a0 <MC_GetSTMStateMotor1>
 800791e:	280b      	cmp	r0, #11
 8007920:	f000 80f6 	beq.w	8007b10 <esc_pwm_control+0x27c>
  switch (pHandle->sm_state)
 8007924:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
   if(pHandle->watchdog_counter == pHandle->watchdog_counter_prev)
 8007928:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 800792c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  ESC_Params_t const * pESC_params = pHandle->pESC_params;
 8007930:	6826      	ldr	r6, [r4, #0]
   if(pHandle->watchdog_counter == pHandle->watchdog_counter_prev)
 8007932:	4293      	cmp	r3, r2
 8007934:	f000 80da 	beq.w	8007aec <esc_pwm_control+0x258>
     pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 8007938:	68f3      	ldr	r3, [r6, #12]
 800793a:	6223      	str	r3, [r4, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800793c:	4b9d      	ldr	r3, [pc, #628]	; (8007bb4 <esc_pwm_control+0x320>)
     pHandle->watchdog_counter_prev = pHandle->watchdog_counter;
 800793e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8007942:	6a1a      	ldr	r2, [r3, #32]
 8007944:	f422 62aa 	bic.w	r2, r2, #1360	; 0x550
 8007948:	f022 0205 	bic.w	r2, r2, #5
 800794c:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->ARR, AutoReload);
 800794e:	f640 3211 	movw	r2, #2833	; 0xb11
 8007952:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(TIMx->CCER, Channels);
 8007954:	6a1a      	ldr	r2, [r3, #32]
 8007956:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 800795a:	f042 0205 	orr.w	r2, r2, #5
 800795e:	621a      	str	r2, [r3, #32]
  switch (pHandle->sm_state)
 8007960:	2d03      	cmp	r5, #3
 8007962:	d8ce      	bhi.n	8007902 <esc_pwm_control+0x6e>
 8007964:	e8df f005 	tbb	[pc, r5]
 8007968:	78021661 	.word	0x78021661
 800796c:	2500      	movs	r5, #0
      if( pHandle->Ton_value < pESC_params->Ton_min)
 800796e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007970:	69b3      	ldr	r3, [r6, #24]
 8007972:	429a      	cmp	r2, r3
 8007974:	f080 80de 	bcs.w	8007b34 <esc_pwm_control+0x2a0>
        pHandle->turnoff_delay --;
 8007978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800797a:	3b01      	subs	r3, #1
        if(pHandle->turnoff_delay <= 0)
 800797c:	2b00      	cmp	r3, #0
        pHandle->turnoff_delay --;
 800797e:	6263      	str	r3, [r4, #36]	; 0x24
        if(pHandle->turnoff_delay <= 0)
 8007980:	f340 81a8 	ble.w	8007cd4 <esc_pwm_control+0x440>
    if (ESC_Fault_Occured == ESC_NOSIGNAL && pHandle->sm_state == ESC_ARMING)
 8007984:	2d01      	cmp	r5, #1
 8007986:	d1bc      	bne.n	8007902 <esc_pwm_control+0x6e>
 8007988:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1b8      	bne.n	8007902 <esc_pwm_control+0x6e>
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 8007990:	6826      	ldr	r6, [r4, #0]
 8007992:	e00f      	b.n	80079b4 <esc_pwm_control+0x120>
  switch (pHandle->sm_state)
 8007994:	2500      	movs	r5, #0
      if (pHandle->Ton_value >= pESC_params->Ton_min)
 8007996:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007998:	69b3      	ldr	r3, [r6, #24]
 800799a:	429a      	cmp	r2, r3
 800799c:	f080 81a7 	bcs.w	8007cee <esc_pwm_control+0x45a>
        if (pHandle->Ton_value < pESC_params->Ton_arming)
 80079a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80079a2:	6a33      	ldr	r3, [r6, #32]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d2ed      	bcs.n	8007984 <esc_pwm_control+0xf0>
          pHandle->sm_state = ESC_ARMING;          
 80079a8:	2300      	movs	r3, #0
    if (ESC_Fault_Occured == ESC_NOSIGNAL && pHandle->sm_state == ESC_ARMING)
 80079aa:	2d01      	cmp	r5, #1
          pHandle->sm_state = ESC_ARMING;          
 80079ac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
          pHandle->arming_counter  = 0;
 80079b0:	61e3      	str	r3, [r4, #28]
    if (ESC_Fault_Occured == ESC_NOSIGNAL && pHandle->sm_state == ESC_ARMING)
 80079b2:	d1a6      	bne.n	8007902 <esc_pwm_control+0x6e>
  if( pHandle-> start_check_flag == false)
 80079b4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 80079b8:	6873      	ldr	r3, [r6, #4]
  if( pHandle-> start_check_flag == false)
 80079ba:	b9a2      	cbnz	r2, 80079e6 <esc_pwm_control+0x152>
     pHandle-> start_check_flag = true;
 80079bc:	2101      	movs	r1, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 80079be:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80079c2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 80079c6:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(TIMx->CCER, Channels);
 80079c8:	6a1a      	ldr	r2, [r3, #32]
 80079ca:	f422 62aa 	bic.w	r2, r2, #1360	; 0x550
 80079ce:	f022 0205 	bic.w	r2, r2, #5
 80079d2:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80079d4:	6a1a      	ldr	r2, [r3, #32]
 80079d6:	f442 7288 	orr.w	r2, r2, #272	; 0x110
 80079da:	430a      	orrs	r2, r1
 80079dc:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80079de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079e4:	645a      	str	r2, [r3, #68]	; 0x44
  switch (pHandle->beep_state)
 80079e6:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80079ea:	2a03      	cmp	r2, #3
 80079ec:	f000 816b 	beq.w	8007cc6 <esc_pwm_control+0x432>
 80079f0:	2a04      	cmp	r2, #4
 80079f2:	f000 8144 	beq.w	8007c7e <esc_pwm_control+0x3ea>
 80079f6:	2a01      	cmp	r2, #1
 80079f8:	d183      	bne.n	8007902 <esc_pwm_control+0x6e>
      if(pHandle->beep_counter == 0)
 80079fa:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80079fc:	2900      	cmp	r1, #0
 80079fe:	f040 8190 	bne.w	8007d22 <esc_pwm_control+0x48e>
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a02:	f64f 51e8 	movw	r1, #65000	; 0xfde8
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007a0a:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a0c:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a0e:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(TIMx->CCER, Channels);
 8007a10:	6a19      	ldr	r1, [r3, #32]
 8007a12:	f421 7188 	bic.w	r1, r1, #272	; 0x110
 8007a16:	6219      	str	r1, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007a18:	6a19      	ldr	r1, [r3, #32]
 8007a1a:	f441 6188 	orr.w	r1, r1, #1088	; 0x440
 8007a1e:	f041 0105 	orr.w	r1, r1, #5
 8007a22:	6219      	str	r1, [r3, #32]
      pHandle->beep_counter++;
 8007a24:	8622      	strh	r2, [r4, #48]	; 0x30
}
 8007a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (pHandle->sm_state)
 8007a28:	2501      	movs	r5, #1
      if((pHandle->Ton_value >= pESC_params->Ton_arming) && (pHandle->Ton_value > pESC_params->Ton_min))
 8007a2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007a2c:	6a33      	ldr	r3, [r6, #32]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d3ba      	bcc.n	80079a8 <esc_pwm_control+0x114>
 8007a32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007a34:	69b3      	ldr	r3, [r6, #24]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d9b6      	bls.n	80079a8 <esc_pwm_control+0x114>
        pHandle->arming_counter++;
 8007a3a:	69e3      	ldr	r3, [r4, #28]
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 8007a3c:	68b2      	ldr	r2, [r6, #8]
        pHandle->arming_counter++;
 8007a3e:	3301      	adds	r3, #1
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 8007a40:	4293      	cmp	r3, r2
        pHandle->arming_counter++;
 8007a42:	61e3      	str	r3, [r4, #28]
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 8007a44:	d99e      	bls.n	8007984 <esc_pwm_control+0xf0>
           pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 8007a46:	68f1      	ldr	r1, [r6, #12]
           pHandle->arming_counter  = 0;
 8007a48:	2300      	movs	r3, #0
           pHandle->sm_state = ESC_ARMED;   
 8007a4a:	2201      	movs	r2, #1
           pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 8007a4c:	e9c4 3107 	strd	r3, r1, [r4, #28]
           pHandle->sm_state = ESC_ARMED;   
 8007a50:	86e2      	strh	r2, [r4, #54]	; 0x36
           pHandle->watchdog_counter_prev = 0;   
 8007a52:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8007a56:	e795      	b.n	8007984 <esc_pwm_control+0xf0>
       if (pHandle->restart_delay == 0)
 8007a58:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d142      	bne.n	8007ae6 <esc_pwm_control+0x252>
            pHandle->sm_state = ESC_ARMING;  
 8007a60:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
             pHandle->pwm_accumulator = 0;  
 8007a64:	e9c4 3305 	strd	r3, r3, [r4, #20]
            pHandle->Ton_value  = 0;
 8007a68:	62a3      	str	r3, [r4, #40]	; 0x28
            pHandle->arming_counter = 0;
 8007a6a:	61e3      	str	r3, [r4, #28]
            pHandle->buffer_completed = false;
 8007a6c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
   break;  
   case SM_BEEP_3:
    {
    if(pHandle->beep_counter == 0)
 8007a72:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8007a74:	2900      	cmp	r1, #0
 8007a76:	d17e      	bne.n	8007b76 <esc_pwm_control+0x2e2>
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a78:	f24d 61d8 	movw	r1, #55000	; 0xd6d8
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a7c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007a80:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a82:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a84:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(TIMx->CCER, Channels);
 8007a86:	6a19      	ldr	r1, [r3, #32]
 8007a88:	f421 7188 	bic.w	r1, r1, #272	; 0x110
 8007a8c:	6219      	str	r1, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007a8e:	6a19      	ldr	r1, [r3, #32]
 8007a90:	f441 6188 	orr.w	r1, r1, #1088	; 0x440
        LL_TIM_OC_SetCompareCH3 (TIMx,BEEP_FREQ_ARR2);
        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3 );
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N
                                     | LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N));       
      }
      pHandle->beep_counter++;
 8007a94:	2001      	movs	r0, #1
 8007a96:	f041 0105 	orr.w	r1, r1, #5
 8007a9a:	6219      	str	r1, [r3, #32]
 8007a9c:	8620      	strh	r0, [r4, #48]	; 0x30
      
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007a9e:	e72e      	b.n	80078fe <esc_pwm_control+0x6a>
      }    
    }
   break;  
   case SM_BEEP_4:
    {
    if(pHandle->beep_counter == 0)
 8007aa0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	f040 808c 	bne.w	8007bc0 <esc_pwm_control+0x32c>
      {
        LL_TIM_OC_SetCompareCH1 (TIMx,0);
        LL_TIM_OC_SetCompareCH2 (TIMx,0);
        LL_TIM_OC_SetCompareCH3 (TIMx,0);
      }
      pHandle->beep_counter++;
 8007aa8:	2001      	movs	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007aaa:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007aac:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007aae:	63d9      	str	r1, [r3, #60]	; 0x3c
 8007ab0:	8620      	strh	r0, [r4, #48]	; 0x30
      
      if(pHandle->beep_counter > 1000)
 8007ab2:	e724      	b.n	80078fe <esc_pwm_control+0x6a>
    if(pHandle->beep_counter == 0)
 8007ab4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8007ab6:	2900      	cmp	r1, #0
 8007ab8:	d169      	bne.n	8007b8e <esc_pwm_control+0x2fa>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007aba:	f24f 2130 	movw	r1, #62000	; 0xf230
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007abe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007ac2:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ac4:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ac6:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(TIMx->CCER, Channels);
 8007ac8:	6a19      	ldr	r1, [r3, #32]
 8007aca:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007ace:	f021 0101 	bic.w	r1, r1, #1
 8007ad2:	6219      	str	r1, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007ad4:	6a19      	ldr	r1, [r3, #32]
 8007ad6:	f441 618a 	orr.w	r1, r1, #1104	; 0x450
      pHandle->beep_counter++;
 8007ada:	2001      	movs	r0, #1
 8007adc:	f041 0104 	orr.w	r1, r1, #4
 8007ae0:	6219      	str	r1, [r3, #32]
 8007ae2:	8620      	strh	r0, [r4, #48]	; 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007ae4:	e70b      	b.n	80078fe <esc_pwm_control+0x6a>
            pHandle->restart_delay--;
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
 8007aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     if(pHandle->pwm_timeout == 0)
 8007aec:	6a23      	ldr	r3, [r4, #32]
 8007aee:	b9f3      	cbnz	r3, 8007b2e <esc_pwm_control+0x29a>
       pHandle->Ton_value  = 0;
 8007af0:	62a3      	str	r3, [r4, #40]	; 0x28
  switch (pHandle->sm_state)
 8007af2:	2d03      	cmp	r5, #3
 8007af4:	f63f af05 	bhi.w	8007902 <esc_pwm_control+0x6e>
 8007af8:	a301      	add	r3, pc, #4	; (adr r3, 8007b00 <esc_pwm_control+0x26c>)
 8007afa:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007a29 	.word	0x08007a29
 8007b04:	08007997 	.word	0x08007997
 8007b08:	08007c5f 	.word	0x08007c5f
 8007b0c:	08007c63 	.word	0x08007c63
     if (MC_GetOccurredFaultsMotor1() == MC_UNDER_VOLT)
 8007b10:	f7f9 fc40 	bl	8001394 <MC_GetOccurredFaultsMotor1>
 8007b14:	2804      	cmp	r0, #4
       pHandle->phase_check_status = false;
 8007b16:	bf08      	it	eq
 8007b18:	2300      	moveq	r3, #0
     pHandle->sm_state = ESC_ARMING;   
 8007b1a:	f04f 0500 	mov.w	r5, #0
       pHandle->phase_check_status = false;
 8007b1e:	bf08      	it	eq
 8007b20:	86a3      	strheq	r3, [r4, #52]	; 0x34
     MC_AcknowledgeFaultMotor1();
 8007b22:	f7f9 fc31 	bl	8001388 <MC_AcknowledgeFaultMotor1>
     pHandle->sm_state = ESC_ARMING;   
 8007b26:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
     pHandle->arming_counter  = 0;
 8007b2a:	61e5      	str	r5, [r4, #28]
 8007b2c:	e6fc      	b.n	8007928 <esc_pwm_control+0x94>
       pHandle->pwm_timeout--;
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	6223      	str	r3, [r4, #32]
 8007b32:	e715      	b.n	8007960 <esc_pwm_control+0xcc>
        pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 8007b34:	6932      	ldr	r2, [r6, #16]
        if(pHandle->Ton_value >= pESC_params->Ton_Dir && pHandle->Ton_value <= pESC_params->Ton_max)
 8007b36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 8007b38:	6262      	str	r2, [r4, #36]	; 0x24
        if(pHandle->Ton_value >= pESC_params->Ton_Dir && pHandle->Ton_value <= pESC_params->Ton_max)
 8007b3a:	69f2      	ldr	r2, [r6, #28]
 8007b3c:	4291      	cmp	r1, r2
 8007b3e:	d275      	bcs.n	8007c2c <esc_pwm_control+0x398>
        else if(pHandle->Ton_value < pESC_params->Ton_Dir && pHandle->Ton_value > pESC_params->Ton_min)
 8007b40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007b42:	428a      	cmp	r2, r1
 8007b44:	d903      	bls.n	8007b4e <esc_pwm_control+0x2ba>
 8007b46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	f0c0 8104 	bcc.w	8007d56 <esc_pwm_control+0x4c2>
          new_speed = pESC_params->speed_max_valueRPM;
 8007b4e:	8db7      	ldrh	r7, [r6, #44]	; 0x2c
        if (MC_GetSTMStateMotor1() == RUN)
 8007b50:	f7f9 fc26 	bl	80013a0 <MC_GetSTMStateMotor1>
 8007b54:	2806      	cmp	r0, #6
 8007b56:	f47f af15 	bne.w	8007984 <esc_pwm_control+0xf0>
          MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (new_speed/6), 50 );
 8007b5a:	4b17      	ldr	r3, [pc, #92]	; (8007bb8 <esc_pwm_control+0x324>)
 8007b5c:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8007b60:	fba3 3107 	umull	r3, r1, r3, r7
 8007b64:	4b15      	ldr	r3, [pc, #84]	; (8007bbc <esc_pwm_control+0x328>)
 8007b66:	f341 018f 	sbfx	r1, r1, #2, #16
 8007b6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007b6e:	2232      	movs	r2, #50	; 0x32
 8007b70:	f7f9 fc3e 	bl	80013f0 <MCI_ExecSpeedRamp>
 8007b74:	e706      	b.n	8007984 <esc_pwm_control+0xf0>
      pHandle->beep_counter++;
 8007b76:	3101      	adds	r1, #1
 8007b78:	b289      	uxth	r1, r1
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007b7a:	2964      	cmp	r1, #100	; 0x64
      pHandle->beep_counter++;
 8007b7c:	8621      	strh	r1, [r4, #48]	; 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007b7e:	f67f aebe 	bls.w	80078fe <esc_pwm_control+0x6a>
        pHandle->beep_state =  SM_BEEP_4; 
 8007b82:	2104      	movs	r1, #4
        pHandle->beep_counter = 0;
 8007b84:	2300      	movs	r3, #0
        pHandle->beep_state =  SM_BEEP_4; 
 8007b86:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
        pHandle->beep_counter = 0;
 8007b8a:	8623      	strh	r3, [r4, #48]	; 0x30
 8007b8c:	e6b7      	b.n	80078fe <esc_pwm_control+0x6a>
      pHandle->beep_counter++;
 8007b8e:	3101      	adds	r1, #1
 8007b90:	b289      	uxth	r1, r1
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007b92:	2964      	cmp	r1, #100	; 0x64
      pHandle->beep_counter++;
 8007b94:	8621      	strh	r1, [r4, #48]	; 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007b96:	f67f aeb2 	bls.w	80078fe <esc_pwm_control+0x6a>
        pHandle->beep_state =  SM_BEEP_3; 
 8007b9a:	2003      	movs	r0, #3
        pHandle->beep_counter = 0;
 8007b9c:	2100      	movs	r1, #0
        pHandle->beep_state =  SM_BEEP_3; 
 8007b9e:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
        pHandle->beep_counter = 0;
 8007ba2:	8621      	strh	r1, [r4, #48]	; 0x30
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ba4:	f640 30b8 	movw	r0, #3000	; 0xbb8
  WRITE_REG(TIMx->ARR, AutoReload);
 8007ba8:	f24d 61d8 	movw	r1, #55000	; 0xd6d8
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007bac:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->ARR, AutoReload);
 8007bae:	62d9      	str	r1, [r3, #44]	; 0x2c
}
 8007bb0:	e6a5      	b.n	80078fe <esc_pwm_control+0x6a>
 8007bb2:	bf00      	nop
 8007bb4:	40012c00 	.word	0x40012c00
 8007bb8:	aaaaaaab 	.word	0xaaaaaaab
 8007bbc:	20001bc4 	.word	0x20001bc4
      pHandle->beep_counter++;
 8007bc0:	3101      	adds	r1, #1
 8007bc2:	b289      	uxth	r1, r1
      if(pHandle->beep_counter > 1000)
 8007bc4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
      pHandle->beep_counter++;
 8007bc8:	8621      	strh	r1, [r4, #48]	; 0x30
      if(pHandle->beep_counter > 1000)
 8007bca:	f67f ae98 	bls.w	80078fe <esc_pwm_control+0x6a>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bce:	4b68      	ldr	r3, [pc, #416]	; (8007d70 <esc_pwm_control+0x4dc>)
      {
        pHandle->beep_state =  SM_BEEP_1; 
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
 8007bd6:	6a1a      	ldr	r2, [r3, #32]
 8007bd8:	f422 62aa 	bic.w	r2, r2, #1360	; 0x550
        pHandle->beep_counter = 0; 
 8007bdc:	2500      	movs	r5, #0
 8007bde:	f022 0205 	bic.w	r2, r2, #5
 8007be2:	8625      	strh	r5, [r4, #48]	; 0x30
 8007be4:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007be6:	f640 3211 	movw	r2, #2833	; 0xb11
 8007bea:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(TIMx->CCER, Channels);
 8007bec:	6a19      	ldr	r1, [r3, #32]
 8007bee:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 8007bf2:	f041 0105 	orr.w	r1, r1, #5
 8007bf6:	6219      	str	r1, [r3, #32]
        esc_reset_pwm_ch(pHandle);
        pHandle-> start_check_flag = false;
        ESC_phase_check_status = true;       
 8007bf8:	4602      	mov	r2, r0
        pHandle-> start_check_flag = false;
 8007bfa:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
        ESC_phase_check_status = true;       
 8007bfe:	e67e      	b.n	80078fe <esc_pwm_control+0x6a>
    if(pHandle->beep_counter == 0)
 8007c00:	8e20      	ldrh	r0, [r4, #48]	; 0x30
      pHandle->beep_counter++;
 8007c02:	1c41      	adds	r1, r0, #1
 8007c04:	b289      	uxth	r1, r1
      if(pHandle->beep_counter == 0)
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f43f ae66 	beq.w	80078d8 <esc_pwm_control+0x44>
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007c0c:	2964      	cmp	r1, #100	; 0x64
      pHandle->beep_counter++;
 8007c0e:	8621      	strh	r1, [r4, #48]	; 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8007c10:	f67f ae75 	bls.w	80078fe <esc_pwm_control+0x6a>
        pHandle->beep_state =  SM_BEEP_2; 
 8007c14:	2002      	movs	r0, #2
        pHandle->beep_counter = 0;
 8007c16:	2100      	movs	r1, #0
        pHandle->beep_state =  SM_BEEP_2; 
 8007c18:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
        pHandle->beep_counter = 0;
 8007c1c:	8621      	strh	r1, [r4, #48]	; 0x30
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
  WRITE_REG(TIMx->ARR, AutoReload);
 8007c22:	f24f 2130 	movw	r1, #62000	; 0xf230
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c26:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->ARR, AutoReload);
 8007c28:	62d9      	str	r1, [r3, #44]	; 0x2c
}
 8007c2a:	e668      	b.n	80078fe <esc_pwm_control+0x6a>
        if(pHandle->Ton_value >= pESC_params->Ton_Dir && pHandle->Ton_value <= pESC_params->Ton_max)
 8007c2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007c2e:	6971      	ldr	r1, [r6, #20]
 8007c30:	4288      	cmp	r0, r1
 8007c32:	d885      	bhi.n	8007b40 <esc_pwm_control+0x2ac>
          MCI_SetDirection(pMCI[pESC_params->motor],+1);
 8007c34:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8007c38:	4b4e      	ldr	r3, [pc, #312]	; (8007d74 <esc_pwm_control+0x4e0>)
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007c40:	f7f9 fbd4 	bl	80013ec <MCI_SetDirection>
          new_speed = ((pHandle->Ton_value-pESC_params->Ton_Dir) * (pESC_params->speed_max_valueRPM - pESC_params->speed_min_valueRPM) / pESC_params->delta_Ton_dir) + pESC_params->speed_min_valueRPM;
 8007c44:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
 8007c46:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8007c48:	69f3      	ldr	r3, [r6, #28]
          new_speed = ((pHandle->Ton_value-pESC_params->Ton_min) * (pESC_params->speed_max_valueRPM - pESC_params->speed_min_valueRPM) / pESC_params->delta_Ton_dir) + pESC_params->speed_min_valueRPM;
 8007c4a:	1aff      	subs	r7, r7, r3
 8007c4c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
 8007c4e:	1a9b      	subs	r3, r3, r2
 8007c50:	fb03 f707 	mul.w	r7, r3, r7
 8007c54:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007c56:	fbb7 f7f3 	udiv	r7, r7, r3
 8007c5a:	4417      	add	r7, r2
 8007c5c:	e778      	b.n	8007b50 <esc_pwm_control+0x2bc>
  switch (pHandle->sm_state)
 8007c5e:	2501      	movs	r5, #1
 8007c60:	e685      	b.n	800796e <esc_pwm_control+0xda>
       if (pHandle->restart_delay == 0)
 8007c62:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f47f af3d 	bne.w	8007ae6 <esc_pwm_control+0x252>
             pHandle->pwm_accumulator = 0;  
 8007c6c:	e9c4 3305 	strd	r3, r3, [r4, #20]
            pHandle->sm_state = ESC_ARMING;  
 8007c70:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
            pHandle->Ton_value  = 0;
 8007c74:	62a3      	str	r3, [r4, #40]	; 0x28
            pHandle->arming_counter = 0;
 8007c76:	61e3      	str	r3, [r4, #28]
            pHandle->buffer_completed = false;
 8007c78:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (ESC_Fault_Occured == ESC_NOSIGNAL && pHandle->sm_state == ESC_ARMING)
 8007c7c:	e69a      	b.n	80079b4 <esc_pwm_control+0x120>
    if(pHandle->beep_counter == 0)
 8007c7e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8007c80:	b912      	cbnz	r2, 8007c88 <esc_pwm_control+0x3f4>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c82:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c86:	63da      	str	r2, [r3, #60]	; 0x3c
      pHandle->beep_counter++;
 8007c88:	1c53      	adds	r3, r2, #1
      if(pHandle->beep_counter > pHandle->beep_stop_time)
 8007c8a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      pHandle->beep_counter++;
 8007c8c:	b29b      	uxth	r3, r3
      if(pHandle->beep_counter > pHandle->beep_stop_time)
 8007c8e:	429a      	cmp	r2, r3
      pHandle->beep_counter++;
 8007c90:	8623      	strh	r3, [r4, #48]	; 0x30
      if(pHandle->beep_counter > pHandle->beep_stop_time)
 8007c92:	f4bf ae36 	bcs.w	8007902 <esc_pwm_control+0x6e>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007c96:	4b36      	ldr	r3, [pc, #216]	; (8007d70 <esc_pwm_control+0x4dc>)
        pHandle->beep_state =  SM_BEEP_1; 
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
 8007c9e:	6a1a      	ldr	r2, [r3, #32]
 8007ca0:	f422 62aa 	bic.w	r2, r2, #1360	; 0x550
        pHandle->beep_counter = 0;
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	f022 0205 	bic.w	r2, r2, #5
  WRITE_REG(TIMx->ARR, AutoReload);
 8007caa:	f640 3011 	movw	r0, #2833	; 0xb11
 8007cae:	8621      	strh	r1, [r4, #48]	; 0x30
  CLEAR_BIT(TIMx->CCER, Channels);
 8007cb0:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007cb2:	62d8      	str	r0, [r3, #44]	; 0x2c
  SET_BIT(TIMx->CCER, Channels);
 8007cb4:	6a1a      	ldr	r2, [r3, #32]
 8007cb6:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 8007cba:	f042 0205 	orr.w	r2, r2, #5
 8007cbe:	621a      	str	r2, [r3, #32]
        pHandle-> start_check_flag = false;
 8007cc0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8007cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(pHandle->beep_counter == 0)
 8007cc6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8007cc8:	2a00      	cmp	r2, #0
 8007cca:	d138      	bne.n	8007d3e <esc_pwm_control+0x4aa>
      pHandle->beep_counter++;
 8007ccc:	2101      	movs	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007cce:	635a      	str	r2, [r3, #52]	; 0x34
 8007cd0:	8621      	strh	r1, [r4, #48]	; 0x30
}
 8007cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          pHandle->sm_state = ESC_STOP; 
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
          pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 8007cda:	6933      	ldr	r3, [r6, #16]
 8007cdc:	6263      	str	r3, [r4, #36]	; 0x24
          MCI_StopMotor( pMCI[pESC_params->motor] );
 8007cde:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8007ce2:	4b24      	ldr	r3, [pc, #144]	; (8007d74 <esc_pwm_control+0x4e0>)
 8007ce4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007ce8:	f7f9 fc0a 	bl	8001500 <MCI_StopMotor>
 8007cec:	e64a      	b.n	8007984 <esc_pwm_control+0xf0>
        MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (pESC_params->speed_min_valueRPM/6), 0 );
 8007cee:	8df1      	ldrh	r1, [r6, #46]	; 0x2e
 8007cf0:	4b21      	ldr	r3, [pc, #132]	; (8007d78 <esc_pwm_control+0x4e4>)
 8007cf2:	4f20      	ldr	r7, [pc, #128]	; (8007d74 <esc_pwm_control+0x4e0>)
 8007cf4:	fba3 3101 	umull	r3, r1, r3, r1
 8007cf8:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8007cfc:	0889      	lsrs	r1, r1, #2
 8007cfe:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f7f9 fb74 	bl	80013f0 <MCI_ExecSpeedRamp>
        cmd_status = MCI_StartMotor( pMCI[pESC_params->motor] );
 8007d08:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8007d0c:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8007d10:	f7f9 fbe0 	bl	80014d4 <MCI_StartMotor>
        pHandle->restart_delay = STOP_DURATION;
 8007d14:	f44f 7348 	mov.w	r3, #800	; 0x320
        if(cmd_status==false)    
 8007d18:	0040      	lsls	r0, r0, #1
 8007d1a:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
        pHandle->restart_delay = STOP_DURATION;
 8007d1e:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8007d20:	e630      	b.n	8007984 <esc_pwm_control+0xf0>
      pHandle->beep_counter++;
 8007d22:	1c4b      	adds	r3, r1, #1
 8007d24:	b29b      	uxth	r3, r3
      if(pHandle->beep_counter > BEEP_TIME_MAX)
 8007d26:	2b64      	cmp	r3, #100	; 0x64
      pHandle->beep_counter++;
 8007d28:	8623      	strh	r3, [r4, #48]	; 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX)
 8007d2a:	f67f adea 	bls.w	8007902 <esc_pwm_control+0x6e>
          pHandle->beep_state =  SM_BEEP_4; 
 8007d2e:	2204      	movs	r2, #4
          pHandle->beep_stop_time = 570;
 8007d30:	f240 233a 	movw	r3, #570	; 0x23a
          pHandle->beep_state =  SM_BEEP_4; 
 8007d34:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
          pHandle->beep_stop_time = 570;
 8007d38:	f8c4 302e 	str.w	r3, [r4, #46]	; 0x2e
}
 8007d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->beep_counter++;
 8007d3e:	1c53      	adds	r3, r2, #1
 8007d40:	b29b      	uxth	r3, r3
      if(pHandle->beep_counter > 50)
 8007d42:	2b32      	cmp	r3, #50	; 0x32
      pHandle->beep_counter++;
 8007d44:	8623      	strh	r3, [r4, #48]	; 0x30
      if(pHandle->beep_counter > 50)
 8007d46:	f67f addc 	bls.w	8007902 <esc_pwm_control+0x6e>
        pHandle->beep_state =  SM_BEEP_1; 
 8007d4a:	2201      	movs	r2, #1
        pHandle->beep_counter = 0;
 8007d4c:	2300      	movs	r3, #0
        pHandle->beep_state =  SM_BEEP_1; 
 8007d4e:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        pHandle->beep_counter = 0;
 8007d52:	8623      	strh	r3, [r4, #48]	; 0x30
}
 8007d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          MCI_SetDirection(pMCI[pESC_params->motor],-1);
 8007d56:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8007d5a:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <esc_pwm_control+0x4e0>)
 8007d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007d64:	f7f9 fb42 	bl	80013ec <MCI_SetDirection>
          new_speed = ((pHandle->Ton_value-pESC_params->Ton_min) * (pESC_params->speed_max_valueRPM - pESC_params->speed_min_valueRPM) / pESC_params->delta_Ton_dir) + pESC_params->speed_min_valueRPM;
 8007d68:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
 8007d6a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8007d6c:	69b3      	ldr	r3, [r6, #24]
 8007d6e:	e76c      	b.n	8007c4a <esc_pwm_control+0x3b6>
 8007d70:	40012c00 	.word	0x40012c00
 8007d74:	20001bc4 	.word	0x20001bc4
 8007d78:	aaaaaaab 	.word	0xaaaaaaab

08007d7c <TIM2_IRQHandler>:
  if(pHandle->buffer_completed == false)
 8007d7c:	4b26      	ldr	r3, [pc, #152]	; (8007e18 <TIM2_IRQHandler+0x9c>)
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  * @param  None
  * @retval None
  */

void TIM2_IRQHandler(void)
{
 8007d82:	b430      	push	{r4, r5}
 8007d84:	f06f 0102 	mvn.w	r1, #2
  if(pHandle->buffer_completed == false)
 8007d88:	f893 4039 	ldrb.w	r4, [r3, #57]	; 0x39
 8007d8c:	6111      	str	r1, [r2, #16]
  return (uint32_t)(READ_REG(TIMx->CCR2));
 8007d8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;    
 8007d90:	6959      	ldr	r1, [r3, #20]
  if(pHandle->buffer_completed == false)
 8007d92:	bb04      	cbnz	r4, 8007dd6 <TIM2_IRQHandler+0x5a>
     pHandle->pwm_accumulator += capture_value;
 8007d94:	6998      	ldr	r0, [r3, #24]
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;    
 8007d96:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
     pHandle->index_filter++;
 8007d9a:	3101      	adds	r1, #1
     if(pHandle->index_filter >= ESC_FILTER_DEEP) 
 8007d9c:	2903      	cmp	r1, #3
     pHandle->pwm_accumulator += capture_value;
 8007d9e:	4410      	add	r0, r2
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;    
 8007da0:	f8cc 2004 	str.w	r2, [ip, #4]
     pwm_filtered = pHandle->pwm_accumulator/pHandle->index_filter;
 8007da4:	fbb0 f2f1 	udiv	r2, r0, r1
         pHandle->buffer_completed = true;
 8007da8:	bf88      	it	hi
 8007daa:	2101      	movhi	r1, #1
     pHandle->pwm_accumulator += capture_value;
 8007dac:	6198      	str	r0, [r3, #24]
     pHandle->index_filter++;
 8007dae:	bf92      	itee	ls
 8007db0:	6159      	strls	r1, [r3, #20]
         pHandle->index_filter = 0;
 8007db2:	615c      	strhi	r4, [r3, #20]
         pHandle->buffer_completed = true;
 8007db4:	f883 1039 	strbhi.w	r1, [r3, #57]	; 0x39

  /* Get Pulse width and low pass filter it to remove spurious informations */    
  ESC_M1.Ton_value = esc_capture_filter(&ESC_M1, LL_TIM_OC_GetCompareCH2(TIM2));

  /* Fail safe mechanism: stops the motor is the PWM input is disabled */
  ESC_M1.watchdog_counter++;
 8007db8:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
 8007dbc:	3101      	adds	r1, #1
 8007dbe:	b2c9      	uxtb	r1, r1
 8007dc0:	2a01      	cmp	r2, #1
 8007dc2:	bf38      	it	cc
 8007dc4:	2201      	movcc	r2, #1
return(pwm_filtered);
 8007dc6:	2901      	cmp	r1, #1
 8007dc8:	bf38      	it	cc
 8007dca:	2101      	movcc	r1, #1
 8007dcc:	f883 1037 	strb.w	r1, [r3, #55]	; 0x37
  if(ESC_M1.watchdog_counter == 0)
     ESC_M1.watchdog_counter = 1;
}
 8007dd0:	bc30      	pop	{r4, r5}
  ESC_M1.Ton_value = esc_capture_filter(&ESC_M1, LL_TIM_OC_GetCompareCH2(TIM2));
 8007dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007dd4:	4770      	bx	lr
     pHandle->pwm_accumulator -= pHandle->pwm_buffer[pHandle->index_filter];
 8007dd6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8007dda:	699d      	ldr	r5, [r3, #24]
 8007ddc:	6844      	ldr	r4, [r0, #4]
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;
 8007dde:	6042      	str	r2, [r0, #4]
 8007de0:	442a      	add	r2, r5
       pwm_max = (pHandle->pwm_buffer[i] > pwm_max) ? pHandle->pwm_buffer[i] : pwm_max ;
 8007de2:	6858      	ldr	r0, [r3, #4]
     pHandle->pwm_accumulator += capture_value;
 8007de4:	1b12      	subs	r2, r2, r4
       pwm_max = (pHandle->pwm_buffer[i] > pwm_max) ? pHandle->pwm_buffer[i] : pwm_max ;
 8007de6:	689c      	ldr	r4, [r3, #8]
     pHandle->pwm_accumulator += capture_value;
 8007de8:	619a      	str	r2, [r3, #24]
       pwm_max = (pHandle->pwm_buffer[i] > pwm_max) ? pHandle->pwm_buffer[i] : pwm_max ;
 8007dea:	42a0      	cmp	r0, r4
 8007dec:	bf38      	it	cc
 8007dee:	4620      	movcc	r0, r4
 8007df0:	68dc      	ldr	r4, [r3, #12]
 8007df2:	42a0      	cmp	r0, r4
 8007df4:	bf38      	it	cc
 8007df6:	4620      	movcc	r0, r4
     pHandle->index_filter++;
 8007df8:	3101      	adds	r1, #1
       pwm_max = (pHandle->pwm_buffer[i] > pwm_max) ? pHandle->pwm_buffer[i] : pwm_max ;
 8007dfa:	691c      	ldr	r4, [r3, #16]
      pHandle->index_filter = 0;
 8007dfc:	2904      	cmp	r1, #4
 8007dfe:	bf28      	it	cs
 8007e00:	2100      	movcs	r1, #0
     pwm_filtered = (pHandle->pwm_accumulator - pwm_max ) / (ESC_FILTER_DEEP -1);
 8007e02:	42a0      	cmp	r0, r4
 8007e04:	bf28      	it	cs
 8007e06:	1a12      	subcs	r2, r2, r0
 8007e08:	4804      	ldr	r0, [pc, #16]	; (8007e1c <TIM2_IRQHandler+0xa0>)
 8007e0a:	6159      	str	r1, [r3, #20]
 8007e0c:	bf38      	it	cc
 8007e0e:	1b12      	subcc	r2, r2, r4
 8007e10:	fba0 0202 	umull	r0, r2, r0, r2
 8007e14:	0852      	lsrs	r2, r2, #1
 8007e16:	e7cf      	b.n	8007db8 <TIM2_IRQHandler+0x3c>
 8007e18:	200000e0 	.word	0x200000e0
 8007e1c:	aaaaaaab 	.word	0xaaaaaaab

08007e20 <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8007e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8007e22:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8007e24:	882b      	ldrh	r3, [r5, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007e26:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8007e2a:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007e2e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8007e32:	b083      	sub	sp, #12
 8007e34:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8007e36:	fa1f fc8c 	uxth.w	ip, ip
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007e3a:	d051      	beq.n	8007ee0 <MCP_ReceivedPacket+0xc0>
    {
      userCommand = (command >> 3) & 0x1f;
      command = MCP_USER_CMD;    	
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8007e3c:	3b01      	subs	r3, #1

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 8007e3e:	4f5a      	ldr	r7, [pc, #360]	; (8007fa8 <MCP_ReceivedPacket+0x188>)
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007e48:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 8007e4a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007e4e:	6823      	ldr	r3, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007e50:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007e52:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007e54:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007e56:	3802      	subs	r0, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007e58:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007e5a:	b280      	uxth	r0, r0
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 8007e5c:	2600      	movs	r6, #0

    switch (command)
 8007e5e:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007e62:	b291      	uxth	r1, r2
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007e64:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0;
 8007e66:	81e6      	strh	r6, [r4, #14]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007e68:	b212      	sxth	r2, r2
    switch (command)
 8007e6a:	d82a      	bhi.n	8007ec2 <MCP_ReceivedPacket+0xa2>
 8007e6c:	f1bc 0f38 	cmp.w	ip, #56	; 0x38
 8007e70:	d81e      	bhi.n	8007eb0 <MCP_ReceivedPacket+0x90>
 8007e72:	e8df f00c 	tbb	[pc, ip]
 8007e76:	1d5e      	.short	0x1d5e
 8007e78:	1d1d1d1d 	.word	0x1d1d1d1d
 8007e7c:	1d661d1d 	.word	0x1d661d1d
 8007e80:	1d1d1d1d 	.word	0x1d1d1d1d
 8007e84:	1d591d1d 	.word	0x1d591d1d
 8007e88:	1d1d1d1d 	.word	0x1d1d1d1d
 8007e8c:	1d511d1d 	.word	0x1d511d1d
 8007e90:	1d1d1d1d 	.word	0x1d1d1d1d
 8007e94:	1d4b1d1d 	.word	0x1d4b1d1d
 8007e98:	1d1d1d1d 	.word	0x1d1d1d1d
 8007e9c:	1d6b1d1d 	.word	0x1d6b1d1d
 8007ea0:	1d1d1d1d 	.word	0x1d1d1d1d
 8007ea4:	1d471d1d 	.word	0x1d471d1d
 8007ea8:	1d1d1d1d 	.word	0x1d1d1d1d
 8007eac:	1d1d      	.short	0x1d1d
 8007eae:	76          	.byte	0x76
 8007eaf:	00          	.byte	0x00
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007eb4:	68a2      	ldr	r2, [r4, #8]
 8007eb6:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8007eb8:	89e3      	ldrh	r3, [r4, #14]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8007ebe:	b003      	add	sp, #12
 8007ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8007ec2:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
 8007ec6:	d063      	beq.n	8007f90 <MCP_ReceivedPacket+0x170>
 8007ec8:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8007ecc:	d069      	beq.n	8007fa2 <MCP_ReceivedPacket+0x182>
 8007ece:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 8007ed2:	d1ed      	bne.n	8007eb0 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f7f9 fbe3 	bl	80016a0 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007eda:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007edc:	4630      	mov	r0, r6
        break;
 8007ede:	e7e9      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007ee0:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007ee2:	6823      	ldr	r3, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007ee4:	3802      	subs	r0, #2
      userCommand = (command >> 3) & 0x1f;
 8007ee6:	f3cc 0cc7 	ubfx	ip, ip, #3, #8
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007eea:	899a      	ldrh	r2, [r3, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007eec:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007eee:	3502      	adds	r5, #2
    pHandle->txLength = 0;
 8007ef0:	2300      	movs	r3, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007ef2:	f01c 0f1e 	tst.w	ip, #30
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007ef6:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007ef8:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0;
 8007efa:	81e3      	strh	r3, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007efc:	d037      	beq.n	8007f6e <MCP_ReceivedPacket+0x14e>
        MCPResponse = MCP_CMD_OK;
 8007efe:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8007f00:	200d      	movs	r0, #13
 8007f02:	e7d7      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8007f04:	4638      	mov	r0, r7
 8007f06:	f7f9 fadf 	bl	80014c8 <MCI_GetSTMState>
 8007f0a:	b128      	cbz	r0, 8007f18 <MCP_ReceivedPacket+0xf8>
          (void)MCI_StopMotor(pMCI);
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7f9 faf7 	bl	8001500 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007f12:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8007f14:	2000      	movs	r0, #0
 8007f16:	e7cd      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8007f18:	4638      	mov	r0, r7
 8007f1a:	f7f9 fadb 	bl	80014d4 <MCI_StartMotor>
 8007f1e:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007f22:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8007f24:	b2c0      	uxtb	r0, r0
 8007f26:	e7c5      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f7fa fe5d 	bl	8002be8 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007f2e:	89e3      	ldrh	r3, [r4, #14]
        break;
 8007f30:	e7c0      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8007f32:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 8007f34:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8007f36:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 8007f38:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8007f3a:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007f3c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007f3e:	2000      	movs	r0, #0
      break;
 8007f40:	e7b8      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8007f42:	4620      	mov	r0, r4
 8007f44:	f7fa fac4 	bl	80024d0 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007f48:	89e3      	ldrh	r3, [r4, #14]
        break;
 8007f4a:	e7b3      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f7f9 fabb 	bl	80014c8 <MCI_GetSTMState>
 8007f52:	2806      	cmp	r0, #6
 8007f54:	d1dd      	bne.n	8007f12 <MCP_ReceivedPacket+0xf2>
          MCI_StopRamp(pMCI);
 8007f56:	4638      	mov	r0, r7
 8007f58:	f7f9 fb3a 	bl	80015d0 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007f5c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007f5e:	2000      	movs	r0, #0
 8007f60:	e7a8      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7f9 faec 	bl	8001540 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007f68:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007f6a:	2000      	movs	r0, #0
        break;
 8007f6c:	e7a2      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007f6e:	3a01      	subs	r2, #1
      userCommand = (command >> 3) & 0x1f;
 8007f70:	f00c 0c1f 	and.w	ip, ip, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007f74:	b212      	sxth	r2, r2
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007f76:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <MCP_ReceivedPacket+0x18c>)
 8007f78:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
 8007f7c:	2e00      	cmp	r6, #0
 8007f7e:	d0be      	beq.n	8007efe <MCP_ReceivedPacket+0xde>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8007f80:	68a3      	ldr	r3, [r4, #8]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4629      	mov	r1, r5
 8007f86:	f104 030e 	add.w	r3, r4, #14
 8007f8a:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007f8c:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8007f8e:	e791      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8007f90:	68a3      	ldr	r3, [r4, #8]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	4629      	mov	r1, r5
 8007f96:	f104 030e 	add.w	r3, r4, #14
 8007f9a:	f7f9 fa07 	bl	80013ac <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007f9e:	89e3      	ldrh	r3, [r4, #14]
        break;
 8007fa0:	e788      	b.n	8007eb4 <MCP_ReceivedPacket+0x94>
    switch (command)
 8007fa2:	46b4      	mov	ip, r6
 8007fa4:	e7e7      	b.n	8007f76 <MCP_ReceivedPacket+0x156>
 8007fa6:	bf00      	nop
 8007fa8:	200009d0 	.word	0x200009d0
 8007fac:	20001b54 	.word	0x20001b54

08007fb0 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007fb2:	7fc3      	ldrb	r3, [r0, #31]
 8007fb4:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8007fb8:	429a      	cmp	r2, r3
{
 8007fba:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007fbc:	d002      	beq.n	8007fc4 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8007fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8007fc4:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8007fca:	b1a5      	cbz	r5, 8007ff6 <MCPA_dataLog+0x46>
 8007fcc:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8007fce:	8ba2      	ldrh	r2, [r4, #28]
 8007fd0:	42aa      	cmp	r2, r5
 8007fd2:	d24e      	bcs.n	8008072 <MCPA_dataLog+0xc2>
 8007fd4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8007fd8:	2bfe      	cmp	r3, #254	; 0xfe
 8007fda:	d066      	beq.n	80080aa <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8007fdc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8007fe0:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 8007fe2:	8b22      	ldrh	r2, [r4, #24]
 8007fe4:	6820      	ldr	r0, [r4, #0]
 8007fe6:	3202      	adds	r2, #2
 8007fe8:	2309      	movs	r3, #9
 8007fea:	6845      	ldr	r5, [r0, #4]
 8007fec:	b292      	uxth	r2, r2
 8007fee:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	8323      	strh	r3, [r4, #24]
}
 8007ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8007ff6:	4601      	mov	r1, r0
 8007ff8:	2209      	movs	r2, #9
 8007ffa:	f851 0b14 	ldr.w	r0, [r1], #20
 8007ffe:	6803      	ldr	r3, [r0, #0]
 8008000:	4798      	blx	r3
 8008002:	b390      	cbz	r0, 800806a <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8008004:	4b4b      	ldr	r3, [pc, #300]	; (8008134 <MCPA_dataLog+0x184>)
 8008006:	6961      	ldr	r1, [r4, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 800800c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8008010:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 8008014:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8008018:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 800801a:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 800801c:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 800801e:	d101      	bne.n	8008024 <MCPA_dataLog+0x74>
 8008020:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8008022:	e7d4      	b.n	8007fce <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff = pHandle->MFNum;
 8008024:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
            pHandle->HFNumBuff = pHandle->HFNum;
 8008028:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
            pHandle->MFRateBuff = pHandle->MFRate;
 800802c:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff = pHandle->HFRate;
 8008030:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
            pHandle->HFNumBuff = pHandle->HFNum;
 8008034:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            pHandle->MFNumBuff = pHandle->MFNum;
 8008038:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 800803c:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800803e:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff = pHandle->Mark;
 8008040:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008044:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff = pHandle->MFRate;
 8008046:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800804a:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 800804c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff = pHandle->HFRate;
 8008050:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008054:	f002 f8f2 	bl	800a23c <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8008058:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800805c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8008060:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8008064:	441a      	add	r2, r3
 8008066:	f002 f8e9 	bl	800a23c <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800806a:	8b25      	ldrh	r5, [r4, #24]
 800806c:	2d00      	cmp	r5, #0
 800806e:	d1ad      	bne.n	8007fcc <MCPA_dataLog+0x1c>
}
 8008070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008072:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8008076:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008078:	b36e      	cbz	r6, 80080d6 <MCPA_dataLog+0x126>
 800807a:	68a2      	ldr	r2, [r4, #8]
 800807c:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8008080:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008082:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008086:	8800      	ldrh	r0, [r0, #0]
 8008088:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800808c:	8b25      	ldrh	r5, [r4, #24]
 800808e:	3502      	adds	r5, #2
 8008090:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008092:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8008094:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008096:	d1f4      	bne.n	8008082 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8008098:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800809c:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 800809e:	2bfd      	cmp	r3, #253	; 0xfd
 80080a0:	4618      	mov	r0, r3
 80080a2:	d91d      	bls.n	80080e0 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80080a4:	4295      	cmp	r5, r2
 80080a6:	d897      	bhi.n	8007fd8 <MCPA_dataLog+0x28>
}
 80080a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80080aa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80080ae:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80080b2:	4418      	add	r0, r3
 80080b4:	4298      	cmp	r0, r3
 80080b6:	dd91      	ble.n	8007fdc <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80080b8:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80080ba:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80080bc:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80080c0:	6812      	ldr	r2, [r2, #0]
 80080c2:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80080c4:	1c5a      	adds	r2, r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80080c6:	5cf3      	ldrb	r3, [r6, r3]
 80080c8:	442b      	add	r3, r5
 80080ca:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80080cc:	b2d3      	uxtb	r3, r2
 80080ce:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80080d0:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80080d2:	dbf3      	blt.n	80080bc <MCPA_dataLog+0x10c>
 80080d4:	e782      	b.n	8007fdc <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 80080d6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 80080da:	28fd      	cmp	r0, #253	; 0xfd
 80080dc:	f63f af71 	bhi.w	8007fc2 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 80080e0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80080e4:	4283      	cmp	r3, r0
 80080e6:	d007      	beq.n	80080f8 <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 80080e8:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80080ea:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 80080ec:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80080f0:	42aa      	cmp	r2, r5
 80080f2:	f4ff af73 	bcc.w	8007fdc <MCPA_dataLog+0x2c>
}
 80080f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80080f8:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 80080fc:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80080fe:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008100:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8008102:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008106:	dd12      	ble.n	800812e <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008108:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800810c:	f8d4 c010 	ldr.w	ip, [r4, #16]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008110:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008112:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800811a:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800811e:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008120:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008122:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008124:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008126:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008128:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800812a:	dbf2      	blt.n	8008112 <MCPA_dataLog+0x162>
 800812c:	e7e0      	b.n	80080f0 <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800812e:	8b25      	ldrh	r5, [r4, #24]
 8008130:	e7de      	b.n	80080f0 <MCPA_dataLog+0x140>
 8008132:	bf00      	nop
 8008134:	20001c24 	.word	0x20001c24

08008138 <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8008138:	8b03      	ldrh	r3, [r0, #24]
 800813a:	b19b      	cbz	r3, 8008164 <MCPA_flushDataLog+0x2c>
{
 800813c:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 800813e:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8008142:	2afe      	cmp	r2, #254	; 0xfe
 8008144:	4604      	mov	r4, r0
 8008146:	d00e      	beq.n	8008166 <MCPA_flushDataLog+0x2e>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008148:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 800814a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800814e:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008150:	8b22      	ldrh	r2, [r4, #24]
 8008152:	6820      	ldr	r0, [r4, #0]
 8008154:	3202      	adds	r2, #2
 8008156:	2309      	movs	r3, #9
 8008158:	6845      	ldr	r5, [r0, #4]
 800815a:	b292      	uxth	r2, r2
 800815c:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	8323      	strh	r3, [r4, #24]
  }   
}
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008166:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800816a:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 800816e:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008170:	4494      	add	ip, r2
 8008172:	4562      	cmp	r2, ip
 8008174:	dae9      	bge.n	800814a <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008176:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008178:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 800817a:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 800817e:	6800      	ldr	r0, [r0, #0]
 8008180:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008182:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008184:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008186:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008188:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800818a:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800818c:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800818e:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008190:	dbf3      	blt.n	800817a <MCPA_flushDataLog+0x42>
 8008192:	e7da      	b.n	800814a <MCPA_flushDataLog+0x12>

08008194 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8008194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8008198:	880f      	ldrh	r7, [r1, #0]
{
 800819a:	4604      	mov	r4, r0

    if (buffSize == 0)
 800819c:	2f00      	cmp	r7, #0
 800819e:	d044      	beq.n	800822a <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 80081a0:	6803      	ldr	r3, [r0, #0]
 80081a2:	89db      	ldrh	r3, [r3, #14]
 80081a4:	42bb      	cmp	r3, r7
 80081a6:	d33d      	bcc.n	8008224 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 80081a8:	788b      	ldrb	r3, [r1, #2]
 80081aa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 80081ae:	78ce      	ldrb	r6, [r1, #3]
 80081b0:	f880 6023 	strb.w	r6, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 80081b4:	790b      	ldrb	r3, [r1, #4]
 80081b6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 80081ba:	794b      	ldrb	r3, [r1, #5]
 80081bc:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 80081c0:	441e      	add	r6, r3
 80081c2:	7f83      	ldrb	r3, [r0, #30]
 80081c4:	429e      	cmp	r6, r3
 80081c6:	dc52      	bgt.n	800826e <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 80081c8:	3106      	adds	r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	d056      	beq.n	800827c <MCPA_cfgLog+0xe8>
 80081ce:	2500      	movs	r5, #0
 80081d0:	4688      	mov	r8, r1
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 80081d2:	462e      	mov	r6, r5
 80081d4:	e011      	b.n	80081fa <MCPA_cfgLog+0x66>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 80081d6:	68e3      	ldr	r3, [r4, #12]
 80081d8:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 80081da:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80081dc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80081e0:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 80081e4:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80081e6:	f105 0c01 	add.w	ip, r5, #1
 80081ea:	fa5f f58c 	uxtb.w	r5, ip
 80081ee:	4403      	add	r3, r0
         logSize = logSize+pHandle->dataSizeTable[i];
 80081f0:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80081f2:	429d      	cmp	r5, r3
        pCfgData++;
 80081f4:	4641      	mov	r1, r8
         logSize = logSize+pHandle->dataSizeTable[i];
 80081f6:	b296      	uxth	r6, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80081f8:	da11      	bge.n	800821e <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 80081fa:	f838 9b02 	ldrh.w	r9, [r8], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 80081fe:	6861      	ldr	r1, [r4, #4]
 8008200:	4648      	mov	r0, r9
 8008202:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8008206:	f7fb f91d 	bl	8003444 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 800820a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800820e:	42ab      	cmp	r3, r5
 8008210:	f04f 0002 	mov.w	r0, #2
 8008214:	d8df      	bhi.n	80081d6 <MCPA_cfgLog+0x42>
 8008216:	4648      	mov	r0, r9
 8008218:	f7fb f908 	bl	800342c <RI_GetIDSize>
 800821c:	e7db      	b.n	80081d6 <MCPA_cfgLog+0x42>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 800821e:	1db3      	adds	r3, r6, #6
 8008220:	429f      	cmp	r7, r3
 8008222:	d21a      	bcs.n	800825a <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8008224:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 8008226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 800822a:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 800822c:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008230:	b153      	cbz	r3, 8008248 <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008232:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008234:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8008238:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 800823a:	8b22      	ldrh	r2, [r4, #24]
 800823c:	6820      	ldr	r0, [r4, #0]
 800823e:	3202      	adds	r2, #2
 8008240:	6845      	ldr	r5, [r0, #4]
 8008242:	b292      	uxth	r2, r2
 8008244:	2309      	movs	r3, #9
 8008246:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8008248:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 800824a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 800824e:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8008250:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8008254:	8320      	strh	r0, [r4, #24]
}
 8008256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 800825a:	3f02      	subs	r7, #2
 800825c:	1bbf      	subs	r7, r7, r6
 800825e:	8367      	strh	r7, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 8008260:	780b      	ldrb	r3, [r1, #0]
 8008262:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
       if (0U == pHandle->Mark)
 8008266:	b12b      	cbz	r3, 8008274 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 8008268:	2000      	movs	r0, #0
}
 800826a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 800826e:	200a      	movs	r0, #10
}
 8008270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008274:	8b23      	ldrh	r3, [r4, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0e6      	beq.n	8008248 <MCPA_cfgLog+0xb4>
 800827a:	e7da      	b.n	8008232 <MCPA_cfgLog+0x9e>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800827c:	2306      	movs	r3, #6
 800827e:	e7cf      	b.n	8008220 <MCPA_cfgLog+0x8c>

08008280 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8008280:	8a03      	ldrh	r3, [r0, #16]
 8008282:	8b42      	ldrh	r2, [r0, #26]
 8008284:	429a      	cmp	r2, r3
 8008286:	d306      	bcc.n	8008296 <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8008288:	8b82      	ldrh	r2, [r0, #28]
 800828a:	429a      	cmp	r2, r3
 800828c:	d901      	bls.n	8008292 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 800828e:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8008290:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8008292:	8ac0      	ldrh	r0, [r0, #22]
 8008294:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8008296:	2008      	movs	r0, #8
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop

0800829c <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop

080082a4 <NTC_Init>:
{
 80082a4:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 80082a6:	7803      	ldrb	r3, [r0, #0]
{
 80082a8:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 80082aa:	b123      	cbz	r3, 80082b6 <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80082ac:	8a43      	ldrh	r3, [r0, #18]
 80082ae:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 80082b0:	2200      	movs	r2, #0
 80082b2:	82c2      	strh	r2, [r0, #22]
}
 80082b4:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80082b6:	3004      	adds	r0, #4
 80082b8:	f7fb f95c 	bl	8003574 <RCM_RegisterRegConv>
 80082bc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 80082c0:	4620      	mov	r0, r4
 80082c2:	f7ff ffeb 	bl	800829c <NTC_Clear>
}
 80082c6:	bd10      	pop	{r4, pc}

080082c8 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 80082c8:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 80082ca:	7803      	ldrb	r3, [r0, #0]
{
 80082cc:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 80082ce:	b113      	cbz	r3, 80082d6 <NTC_CalcAvTemp+0xe>
 80082d0:	2000      	movs	r0, #0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);

        pHandle->hAvTemp_d = (uint16_t)wtemp;
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80082d2:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80082d4:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80082d6:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80082da:	f7fb fa51 	bl	8003780 <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 80082de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082e2:	4298      	cmp	r0, r3
 80082e4:	d007      	beq.n	80082f6 <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80082e6:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 80082e8:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80082ea:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 80082ec:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 80082f0:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 80082f4:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80082f6:	4620      	mov	r0, r4
 80082f8:	f7ff ffc2 	bl	8008280 <NTC_SetFaultState>
 80082fc:	82e0      	strh	r0, [r4, #22]
}
 80082fe:	bd10      	pop	{r4, pc}

08008300 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8008300:	7803      	ldrb	r3, [r0, #0]
 8008302:	b95b      	cbnz	r3, 800831c <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8008304:	8a02      	ldrh	r2, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 8008306:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 8008308:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800830c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 800830e:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8008310:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8008314:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8008318:	b200      	sxth	r0, r0
 800831a:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 800831c:	8a80      	ldrh	r0, [r0, #20]
}
 800831e:	b200      	sxth	r0, r0
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop

08008324 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8008324:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8008326:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8008328:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800832a:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800832c:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 800832e:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8008330:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008332:	4770      	bx	lr

08008334 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8008334:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008336:	4770      	bx	lr

08008338 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8008338:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800833a:	4770      	bx	lr

0800833c <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 800833c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop

08008344 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8008344:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop

0800834c <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 800834c:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800834e:	4770      	bx	lr

08008350 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8008350:	8b80      	ldrh	r0, [r0, #28]
 8008352:	4770      	bx	lr

08008354 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8008354:	2301      	movs	r3, #1
 8008356:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8008358:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800835a:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop

08008360 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8008360:	8bc0      	ldrh	r0, [r0, #30]
 8008362:	4770      	bx	lr

08008364 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8008364:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008366:	4770      	bx	lr

08008368 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8008368:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800836a:	4770      	bx	lr

0800836c <PID_SetKIDivisorPOW2>:
{
 800836c:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800836e:	2301      	movs	r3, #1
{
 8008370:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8008372:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008374:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008378:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 800837a:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 800837c:	8343      	strh	r3, [r0, #26]
{
 800837e:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008380:	f7ff fff2 	bl	8008368 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8008384:	4902      	ldr	r1, [pc, #8]	; (8008390 <PID_SetKIDivisorPOW2+0x24>)
 8008386:	4628      	mov	r0, r5
 8008388:	40a1      	lsls	r1, r4
 800838a:	f7ff ffeb 	bl	8008364 <PID_SetLowerIntegralTermLimit>
}
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	ffff8001 	.word	0xffff8001

08008394 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8008394:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008396:	4770      	bx	lr

08008398 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8008398:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop

080083a0 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 80083a0:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 80083a2:	4770      	bx	lr

080083a4 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 80083a4:	2301      	movs	r3, #1
 80083a6:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 80083a8:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 80083aa:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop

080083b0 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80083b0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 80083b4:	4603      	mov	r3, r0
 80083b6:	b510      	push	{r4, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 80083b8:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80083bc:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80083c0:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80083c4:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 80083c8:	b18c      	cbz	r4, 80083ee <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80083ca:	fb04 f101 	mul.w	r1, r4, r1
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 80083ce:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 80083d0:	eb14 0e01 	adds.w	lr, r4, r1
 80083d4:	d421      	bmi.n	800841a <PI_Controller+0x6a>
      {
        if (pHandle->wIntegralTerm < 0)
        {
          if (wIntegral_Term < 0)
          {
            wIntegral_sum_temp = -INT32_MAX;
 80083d6:	420c      	tst	r4, r1
 80083d8:	4916      	ldr	r1, [pc, #88]	; (8008434 <PI_Controller+0x84>)
 80083da:	bf48      	it	mi
 80083dc:	468e      	movmi	lr, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80083de:	68d9      	ldr	r1, [r3, #12]
 80083e0:	4571      	cmp	r1, lr
 80083e2:	db05      	blt.n	80083f0 <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 80083e4:	6919      	ldr	r1, [r3, #16]
 80083e6:	4571      	cmp	r1, lr
 80083e8:	dc02      	bgt.n	80083f0 <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
      }
      else
      {
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80083ea:	4671      	mov	r1, lr
 80083ec:	e000      	b.n	80083f0 <PI_Controller+0x40>
 80083ee:	4621      	mov	r1, r4
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 80083f0:	8b9c      	ldrh	r4, [r3, #28]
 80083f2:	4122      	asrs	r2, r4
 80083f4:	8bdc      	ldrh	r4, [r3, #30]
 80083f6:	fa41 f404 	asr.w	r4, r1, r4
 80083fa:	4422      	add	r2, r4
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80083fc:	4290      	cmp	r0, r2
 80083fe:	da03      	bge.n	8008408 <PI_Controller+0x58>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8008400:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8008402:	4411      	add	r1, r2
 8008404:	6099      	str	r1, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8008406:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8008408:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 800840a:	bfc5      	ittet	gt
 800840c:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8008410:	1889      	addgt	r1, r1, r2
    returnValue = (int16_t)wOutput_32;
 8008412:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8008414:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8008416:	6099      	str	r1, [r3, #8]
}
 8008418:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 800841a:	2c00      	cmp	r4, #0
 800841c:	dddf      	ble.n	80083de <PI_Controller+0x2e>
          if (wIntegral_Term > 0)
 800841e:	2900      	cmp	r1, #0
 8008420:	dddd      	ble.n	80083de <PI_Controller+0x2e>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008422:	68d9      	ldr	r1, [r3, #12]
 8008424:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008428:	42a1      	cmp	r1, r4
 800842a:	d1e1      	bne.n	80083f0 <PI_Controller+0x40>
            wIntegral_sum_temp = INT32_MAX;
 800842c:	468e      	mov	lr, r1
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800842e:	4671      	mov	r1, lr
 8008430:	e7de      	b.n	80083f0 <PI_Controller+0x40>
 8008432:	bf00      	nop
 8008434:	80000001 	.word	0x80000001

08008438 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8008438:	6882      	ldr	r2, [r0, #8]
{
 800843a:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800843c:	89d1      	ldrh	r1, [r2, #14]
 800843e:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8008442:	8993      	ldrh	r3, [r2, #12]
 8008444:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8008448:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 800844c:	fb13 230c 	smlabb	r3, r3, ip, r2
 8008450:	2b00      	cmp	r3, #0

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8008452:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8008456:	bfbc      	itt	lt
 8008458:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 800845c:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 800845e:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 8008462:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8008466:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8008468:	f85d fb04 	ldr.w	pc, [sp], #4

0800846c <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 800846c:	2300      	movs	r3, #0
 800846e:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop

08008474 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8008474:	b538      	push	{r3, r4, r5, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008476:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 800847a:	4604      	mov	r4, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800847c:	68c0      	ldr	r0, [r0, #12]
 800847e:	f7ff f9b9 	bl	80077f4 <VBS_GetAvBusVoltage_V>
 8008482:	fb05 f300 	mul.w	r3, r5, r0
 8008486:	ee00 3a10 	vmov	s0, r3
 800848a:	edd4 7a01 	vldr	s15, [r4, #4]
 800848e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8008492:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008496:	bd38      	pop	{r3, r4, r5, pc}

08008498 <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8008498:	b410      	push	{r4}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800849a:	4b19      	ldr	r3, [pc, #100]	; (8008500 <startTimers+0x68>)
 800849c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800849e:	07d2      	lsls	r2, r2, #31
 80084a0:	b083      	sub	sp, #12
 80084a2:	d416      	bmi.n	80084d2 <startTimers+0x3a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80084a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084a6:	f042 0201 	orr.w	r2, r2, #1
 80084aa:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80084ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80084ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80084b2:	f002 0201 	and.w	r2, r2, #1
 80084b6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80084b8:	9a01      	ldr	r2, [sp, #4]
 80084ba:	694a      	ldr	r2, [r1, #20]
 80084bc:	f042 0201 	orr.w	r2, r2, #1
 80084c0:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80084c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084c4:	f022 0201 	bic.w	r2, r2, #1
 80084c8:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 80084ca:	b003      	add	sp, #12
 80084cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084d0:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 80084d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80084d6:	480b      	ldr	r0, [pc, #44]	; (8008504 <startTimers+0x6c>)
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	6859      	ldr	r1, [r3, #4]
 80084dc:	4c0a      	ldr	r4, [pc, #40]	; (8008508 <startTimers+0x70>)
 80084de:	4001      	ands	r1, r0
 80084e0:	f041 0120 	orr.w	r1, r1, #32
 80084e4:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80084e6:	6959      	ldr	r1, [r3, #20]
 80084e8:	f041 0101 	orr.w	r1, r1, #1
 80084ec:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80084ee:	6859      	ldr	r1, [r3, #4]
 80084f0:	4022      	ands	r2, r4
 80084f2:	4001      	ands	r1, r0
 80084f4:	430a      	orrs	r2, r1
 80084f6:	605a      	str	r2, [r3, #4]
}
 80084f8:	b003      	add	sp, #12
 80084fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	40021000 	.word	0x40021000
 8008504:	fdffff8f 	.word	0xfdffff8f
 8008508:	02000070 	.word	0x02000070

0800850c <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 800850c:	3201      	adds	r2, #1
{
 800850e:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8008510:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008512:	f06f 0602 	mvn.w	r6, #2
 8008516:	0155      	lsls	r5, r2, #5
 8008518:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 800851a:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 800851c:	f893 c000 	ldrb.w	ip, [r3]
 8008520:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8008524:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8008528:	d80c      	bhi.n	8008544 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800852a:	6904      	ldr	r4, [r0, #16]
 800852c:	07a4      	lsls	r4, r4, #30
 800852e:	d5f5      	bpl.n	800851c <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8008530:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8008534:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008536:	6106      	str	r6, [r0, #16]
 8008538:	d8f0      	bhi.n	800851c <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 800853a:	781c      	ldrb	r4, [r3, #0]
 800853c:	2c0f      	cmp	r4, #15
 800853e:	d8ed      	bhi.n	800851c <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8008540:	2301      	movs	r3, #1
 8008542:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 8008544:	bd70      	pop	{r4, r5, r6, pc}
 8008546:	bf00      	nop

08008548 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008548:	6883      	ldr	r3, [r0, #8]
 800854a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800854e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008552:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008554:	6883      	ldr	r3, [r0, #8]
 8008556:	00d9      	lsls	r1, r3, #3
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8008558:	b082      	sub	sp, #8
 800855a:	d418      	bmi.n	800858e <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 800855c:	4b24      	ldr	r3, [pc, #144]	; (80085f0 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 800855e:	6882      	ldr	r2, [r0, #8]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4924      	ldr	r1, [pc, #144]	; (80085f4 <R3_2_ADCxInit+0xac>)
 8008564:	099b      	lsrs	r3, r3, #6
 8008566:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800856a:	fba1 1303 	umull	r1, r3, r1, r3
 800856e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008572:	099b      	lsrs	r3, r3, #6
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800857a:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 800857c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800857e:	9b01      	ldr	r3, [sp, #4]
 8008580:	b12b      	cbz	r3, 800858e <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8008582:	9b01      	ldr	r3, [sp, #4]
 8008584:	3b01      	subs	r3, #1
 8008586:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1f9      	bne.n	8008582 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800858e:	6883      	ldr	r3, [r0, #8]
 8008590:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800859c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800859e:	6883      	ldr	r3, [r0, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dbfc      	blt.n	800859e <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80085a4:	6803      	ldr	r3, [r0, #0]
 80085a6:	07da      	lsls	r2, r3, #31
 80085a8:	d408      	bmi.n	80085bc <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 80085aa:	4a13      	ldr	r2, [pc, #76]	; (80085f8 <R3_2_ADCxInit+0xb0>)
 80085ac:	6883      	ldr	r3, [r0, #8]
 80085ae:	4013      	ands	r3, r2
 80085b0:	f043 0301 	orr.w	r3, r3, #1
 80085b4:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80085b6:	6803      	ldr	r3, [r0, #0]
 80085b8:	07db      	lsls	r3, r3, #31
 80085ba:	d5f7      	bpl.n	80085ac <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 80085bc:	6883      	ldr	r3, [r0, #8]
 80085be:	4a0e      	ldr	r2, [pc, #56]	; (80085f8 <R3_2_ADCxInit+0xb0>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	f043 0308 	orr.w	r3, r3, #8
 80085c6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 80085c8:	6883      	ldr	r3, [r0, #8]
 80085ca:	4013      	ands	r3, r2
 80085cc:	f043 0320 	orr.w	r3, r3, #32
 80085d0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80085d2:	68c3      	ldr	r3, [r0, #12]
 80085d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085e0:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 80085e2:	6883      	ldr	r3, [r0, #8]
 80085e4:	4013      	ands	r3, r2
 80085e6:	f043 0304 	orr.w	r3, r3, #4
 80085ea:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode(ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY);

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
}
 80085ec:	b002      	add	sp, #8
 80085ee:	4770      	bx	lr
 80085f0:	2000058c 	.word	0x2000058c
 80085f4:	053e2d63 	.word	0x053e2d63
 80085f8:	7fffffc0 	.word	0x7fffffc0

080085fc <R3_2_GetPhaseCurrents>:
  * @brief  Computes and stores in @p pHdl handler the latest converted motor phase currents in @p Iab ab_t format.
  *
  */
__weak void R3_2_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 80085fc:	b1d9      	cbz	r1, 8008636 <R3_2_GetPhaseCurrents+0x3a>
  {
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80085fe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8008602:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
{
 8008606:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008608:	689c      	ldr	r4, [r3, #8]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 800860a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800860e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8008610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8008612:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8008616:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800861a:	6863      	ldr	r3, [r4, #4]
 800861c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008624:	6063      	str	r3, [r4, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8008626:	2a05      	cmp	r2, #5
 8008628:	f200 8098 	bhi.w	800875c <R3_2_GetPhaseCurrents+0x160>
 800862c:	e8df f002 	tbb	[pc, r2]
 8008630:	041d1d10 	.word	0x041d1d10
 8008634:	1004      	.short	0x1004
 8008636:	4770      	bx	lr
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008638:	6f03      	ldr	r3, [r0, #112]	; 0x70

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800863a:	4a4c      	ldr	r2, [pc, #304]	; (800876c <R3_2_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800863c:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 800863e:	4293      	cmp	r3, r2
 8008640:	db20      	blt.n	8008684 <R3_2_GetPhaseCurrents+0x88>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8008642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008646:	f2c0 8086 	blt.w	8008756 <R3_2_GetPhaseCurrents+0x15a>
 800864a:	f647 7cff 	movw	ip, #32767	; 0x7fff
 800864e:	e01a      	b.n	8008686 <R3_2_GetPhaseCurrents+0x8a>
      case SECTOR_6:
      case SECTOR_1:
      {
        /* Current on Phase A is not accessible     */
        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008650:	6f44      	ldr	r4, [r0, #116]	; 0x74

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8008652:	4b46      	ldr	r3, [pc, #280]	; (800876c <R3_2_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008654:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008656:	429c      	cmp	r4, r3
 8008658:	db2b      	blt.n	80086b2 <R3_2_GetPhaseCurrents+0xb6>
        {
          Iab->b = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800865a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800865e:	db77      	blt.n	8008750 <R3_2_GetPhaseCurrents+0x154>
 8008660:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008664:	4614      	mov	r4, r2
 8008666:	4615      	mov	r5, r2
 8008668:	e027      	b.n	80086ba <R3_2_GetPhaseCurrents+0xbe>
      case SECTOR_2:
      case SECTOR_3:
      {
        /* Current on Phase B is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800866a:	6f04      	ldr	r4, [r0, #112]	; 0x70

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800866c:	4b3f      	ldr	r3, [pc, #252]	; (800876c <R3_2_GetPhaseCurrents+0x170>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800866e:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008670:	429c      	cmp	r4, r3
 8008672:	db2e      	blt.n	80086d2 <R3_2_GetPhaseCurrents+0xd6>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8008674:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008678:	db66      	blt.n	8008748 <R3_2_GetPhaseCurrents+0x14c>
 800867a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800867e:	461c      	mov	r4, r3
 8008680:	469c      	mov	ip, r3
 8008682:	e02a      	b.n	80086da <R3_2_GetPhaseCurrents+0xde>
 8008684:	4694      	mov	ip, r2
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8008686:	6f42      	ldr	r2, [r0, #116]	; 0x74
        if (Aux < -INT16_MAX)
 8008688:	4d38      	ldr	r5, [pc, #224]	; (800876c <R3_2_GetPhaseCurrents+0x170>)
          Iab->a = -INT16_MAX;
 800868a:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800868e:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8008690:	42aa      	cmp	r2, r5
 8008692:	da2f      	bge.n	80086f4 <R3_2_GetPhaseCurrents+0xf8>
          Iab->b = -INT16_MAX;
 8008694:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008696:	fa1f f38c 	uxth.w	r3, ip
 800869a:	f248 0201 	movw	r2, #32769	; 0x8001
 800869e:	4413      	add	r3, r2
 80086a0:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 80086a2:	f8a0 5052 	strh.w	r5, [r0, #82]	; 0x52
    pHandle->_Super.Ia = Iab->a;
 80086a6:	f8a0 c050 	strh.w	ip, [r0, #80]	; 0x50
  }
}
 80086aa:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80086ac:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 80086b0:	4770      	bx	lr
 80086b2:	461c      	mov	r4, r3
 80086b4:	f248 0201 	movw	r2, #32769	; 0x8001
 80086b8:	461d      	mov	r5, r3
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80086ba:	6f83      	ldr	r3, [r0, #120]	; 0x78
          Iab->b = -INT16_MAX;
 80086bc:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80086be:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 80086c0:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 80086c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c6:	db20      	blt.n	800870a <R3_2_GetPhaseCurrents+0x10e>
          Iab->a = INT16_MAX;
 80086c8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80086cc:	800b      	strh	r3, [r1, #0]
 80086ce:	469c      	mov	ip, r3
 80086d0:	e7e5      	b.n	800869e <R3_2_GetPhaseCurrents+0xa2>
 80086d2:	461c      	mov	r4, r3
 80086d4:	46a4      	mov	ip, r4
 80086d6:	f248 0301 	movw	r3, #32769	; 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80086da:	6f82      	ldr	r2, [r0, #120]	; 0x78
          Iab->a = -INT16_MAX;
 80086dc:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80086e0:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 80086e2:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 80086e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80086e8:	db17      	blt.n	800871a <R3_2_GetPhaseCurrents+0x11e>
          Iab->b = INT16_MAX;
 80086ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80086ee:	804a      	strh	r2, [r1, #2]
 80086f0:	4615      	mov	r5, r2
 80086f2:	e7d4      	b.n	800869e <R3_2_GetPhaseCurrents+0xa2>
        else  if (Aux > INT16_MAX)
 80086f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80086f8:	db20      	blt.n	800873c <R3_2_GetPhaseCurrents+0x140>
          Iab->b = INT16_MAX;
 80086fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80086fe:	461a      	mov	r2, r3
 8008700:	804b      	strh	r3, [r1, #2]
 8008702:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008704:	fa1f f38c 	uxth.w	r3, ip
 8008708:	e7c9      	b.n	800869e <R3_2_GetPhaseCurrents+0xa2>
        else  if (Aux < -INT16_MAX)
 800870a:	4c18      	ldr	r4, [pc, #96]	; (800876c <R3_2_GetPhaseCurrents+0x170>)
 800870c:	42a3      	cmp	r3, r4
 800870e:	da0f      	bge.n	8008730 <R3_2_GetPhaseCurrents+0x134>
          Iab->a = -INT16_MAX;
 8008710:	800c      	strh	r4, [r1, #0]
 8008712:	f248 0301 	movw	r3, #32769	; 0x8001
 8008716:	46a4      	mov	ip, r4
 8008718:	e7c1      	b.n	800869e <R3_2_GetPhaseCurrents+0xa2>
        else  if (Aux < -INT16_MAX)
 800871a:	4d14      	ldr	r5, [pc, #80]	; (800876c <R3_2_GetPhaseCurrents+0x170>)
 800871c:	42aa      	cmp	r2, r5
 800871e:	da03      	bge.n	8008728 <R3_2_GetPhaseCurrents+0x12c>
          Iab->b = -INT16_MAX;
 8008720:	804d      	strh	r5, [r1, #2]
 8008722:	f248 0201 	movw	r2, #32769	; 0x8001
 8008726:	e7ba      	b.n	800869e <R3_2_GetPhaseCurrents+0xa2>
          Iab->b = (int16_t)Aux;
 8008728:	b215      	sxth	r5, r2
 800872a:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800872c:	b292      	uxth	r2, r2
 800872e:	e7b6      	b.n	800869e <R3_2_GetPhaseCurrents+0xa2>
          Iab->a = (int16_t)Aux;
 8008730:	fa0f fc83 	sxth.w	ip, r3
 8008734:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008738:	b29b      	uxth	r3, r3
 800873a:	e7b0      	b.n	800869e <R3_2_GetPhaseCurrents+0xa2>
          Iab->b = (int16_t)Aux;
 800873c:	b215      	sxth	r5, r2
 800873e:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008740:	fa1f f38c 	uxth.w	r3, ip
 8008744:	b292      	uxth	r2, r2
 8008746:	e7aa      	b.n	800869e <R3_2_GetPhaseCurrents+0xa2>
          Iab->a = (int16_t)Aux;
 8008748:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800874c:	b2a3      	uxth	r3, r4
 800874e:	e7c4      	b.n	80086da <R3_2_GetPhaseCurrents+0xde>
          Iab->b = (int16_t)Aux;
 8008750:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008752:	b2a2      	uxth	r2, r4
 8008754:	e7b1      	b.n	80086ba <R3_2_GetPhaseCurrents+0xbe>
          Iab->a = (int16_t)Aux;
 8008756:	fa0f fc83 	sxth.w	ip, r3
 800875a:	e794      	b.n	8008686 <R3_2_GetPhaseCurrents+0x8a>
    pHandle->_Super.Ia = Iab->a;
 800875c:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8008760:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008764:	880b      	ldrh	r3, [r1, #0]
 8008766:	884a      	ldrh	r2, [r1, #2]
 8008768:	e799      	b.n	800869e <R3_2_GetPhaseCurrents+0xa2>
 800876a:	bf00      	nop
 800876c:	ffff8001 	.word	0xffff8001

08008770 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8008770:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008772:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8008776:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 800877a:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800877e:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008782:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8008784:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008786:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008788:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800878a:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800878e:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008792:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8008794:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008796:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008798:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800879a:	4904      	ldr	r1, [pc, #16]	; (80087ac <R3_2_SetADCSampPointPolarization+0x3c>)
 800879c:	685b      	ldr	r3, [r3, #4]
}
 800879e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80087a2:	420b      	tst	r3, r1
}
 80087a4:	bf14      	ite	ne
 80087a6:	2001      	movne	r0, #1
 80087a8:	2000      	moveq	r0, #0
 80087aa:	4770      	bx	lr
 80087ac:	02000070 	.word	0x02000070

080087b0 <R3_2_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 80087b0:	b339      	cbz	r1, 8008802 <R3_2_HFCurrentsPolarizationAB+0x52>
{
 80087b2:	b430      	push	{r4, r5}
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80087b4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80087b8:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 80087bc:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 80087be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80087c2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80087c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 80087c6:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80087ca:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80087ce:	6853      	ldr	r3, [r2, #4]
 80087d0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80087d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d8:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 80087da:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80087de:	2b0f      	cmp	r3, #15
 80087e0:	d80b      	bhi.n	80087fa <R3_2_HFCurrentsPolarizationAB+0x4a>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 80087e2:	6f03      	ldr	r3, [r0, #112]	; 0x70
      pHandle-> PhaseBOffset += ADCDataReg2;
 80087e4:	6f42      	ldr	r2, [r0, #116]	; 0x74
      pHandle-> PhaseAOffset += ADCDataReg1;
 80087e6:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 80087e8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseBOffset += ADCDataReg2;
 80087ec:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 80087ee:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 80087f0:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
      pHandle->PolarizationCounter++;
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 80087fa:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 80087fc:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 80087fe:	600b      	str	r3, [r1, #0]
}
 8008800:	4770      	bx	lr
 8008802:	4770      	bx	lr

08008804 <R3_2_HFCurrentsPolarizationC>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8008804:	b311      	cbz	r1, 800884c <R3_2_HFCurrentsPolarizationC+0x48>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008806:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800880a:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800880e:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008810:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 8008814:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8008816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008818:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800881c:	6853      	ldr	r3, [r2, #4]
 800881e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008826:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8008828:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800882c:	2b0f      	cmp	r3, #15
 800882e:	d808      	bhi.n	8008842 <R3_2_HFCurrentsPolarizationC+0x3e>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8008830:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008834:	6f82      	ldr	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 8008836:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 8008838:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 800883a:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 800883c:	6782      	str	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 800883e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8008842:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8008844:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 8008848:	600b      	str	r3, [r1, #0]
}
 800884a:	4770      	bx	lr
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop

08008850 <R3_2_TurnOnLowSides>:
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_2_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008850:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 8008854:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008858:	6893      	ldr	r3, [r2, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800885a:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800885e:	f06f 0001 	mvn.w	r0, #1
 8008862:	6118      	str	r0, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008864:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008866:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008868:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800886a:	6919      	ldr	r1, [r3, #16]
 800886c:	07c9      	lsls	r1, r1, #31
 800886e:	d5fc      	bpl.n	800886a <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008870:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008872:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008876:	6459      	str	r1, [r3, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8008878:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800887c:	2b02      	cmp	r3, #2
 800887e:	d000      	beq.n	8008882 <R3_2_TurnOnLowSides+0x32>
 8008880:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008882:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
{
 8008886:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008888:	6a93      	ldr	r3, [r2, #40]	; 0x28
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800888a:	f8b2 40ac 	ldrh.w	r4, [r2, #172]	; 0xac
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800888e:	6184      	str	r4, [r0, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008890:	f8b2 00ae 	ldrh.w	r0, [r2, #174]	; 0xae
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008894:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
  else
  {
    /* Nothing to do */
  }
  return;
}
 8008898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800889c:	6188      	str	r0, [r1, #24]
 800889e:	619a      	str	r2, [r3, #24]
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop

080088a4 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80088a4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80088a8:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80088ac:	6893      	ldr	r3, [r2, #8]
  pHandle->ADCRegularLocked = true;
 80088ae:	f04f 0c01 	mov.w	ip, #1
{
 80088b2:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked = true;
 80088b4:	f880 c08c 	strb.w	ip, [r0, #140]	; 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 80088b8:	f04f 0c00 	mov.w	ip, #0
 80088bc:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80088c0:	0848      	lsrs	r0, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80088c2:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 80088c4:	3905      	subs	r1, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 80088c6:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80088c8:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80088ca:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80088ce:	6419      	str	r1, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80088d0:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80088d2:	6919      	ldr	r1, [r3, #16]
 80088d4:	07c9      	lsls	r1, r1, #31
 80088d6:	d5fc      	bpl.n	80088d2 <R3_2_SwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80088d8:	f06f 0101 	mvn.w	r1, #1
 80088dc:	6119      	str	r1, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80088de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80088e0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80088e4:	6459      	str	r1, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80088e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80088e8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80088ec:	6459      	str	r1, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 80088ee:	f892 10c0 	ldrb.w	r1, [r2, #192]	; 0xc0
 80088f2:	2902      	cmp	r1, #2
 80088f4:	d008      	beq.n	8008908 <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80088f6:	f06f 0201 	mvn.w	r2, #1
 80088fa:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 8008902:	bc30      	pop	{r4, r5}
 8008904:	60da      	str	r2, [r3, #12]
 8008906:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8008908:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800890a:	6a14      	ldr	r4, [r2, #32]
 800890c:	f8b2 50ac 	ldrh.w	r5, [r2, #172]	; 0xac
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8008910:	f240 5155 	movw	r1, #1365	; 0x555
 8008914:	4208      	tst	r0, r1
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008916:	e9d2 0109 	ldrd	r0, r1, [r2, #36]	; 0x24
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800891a:	d007      	beq.n	800892c <R3_2_SwitchOnPWM+0x88>
 800891c:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800891e:	f8b2 40ae 	ldrh.w	r4, [r2, #174]	; 0xae
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008922:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 8008926:	6184      	str	r4, [r0, #24]
 8008928:	618a      	str	r2, [r1, #24]
}
 800892a:	e7e4      	b.n	80088f6 <R3_2_SwitchOnPWM+0x52>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800892c:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800892e:	f8b2 40ae 	ldrh.w	r4, [r2, #174]	; 0xae
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008932:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 8008936:	6284      	str	r4, [r0, #40]	; 0x28
 8008938:	628a      	str	r2, [r1, #40]	; 0x28
}
 800893a:	e7dc      	b.n	80088f6 <R3_2_SwitchOnPWM+0x52>

0800893c <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800893c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8008940:	688b      	ldr	r3, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	f022 0201 	bic.w	r2, r2, #1
 8008948:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800894a:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE(TIMx);

  pHandle->_Super.TurnOnLowSidesAction = false;
 800894c:	f04f 0c00 	mov.w	ip, #0
 8008950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008954:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
 8008958:	645a      	str	r2, [r3, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->BrakeActionLock)
 800895a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800895e:	b91a      	cbnz	r2, 8008968 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8008960:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8008964:	2a02      	cmp	r2, #2
 8008966:	d00c      	beq.n	8008982 <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008968:	f06f 0201 	mvn.w	r2, #1
 800896c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800896e:	691a      	ldr	r2, [r3, #16]
 8008970:	07d2      	lsls	r2, r2, #31
 8008972:	d5fc      	bpl.n	800896e <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008974:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 8008978:	2200      	movs	r2, #0
 800897a:	6119      	str	r1, [r3, #16]
 800897c:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
 8008980:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008982:	6a0a      	ldr	r2, [r1, #32]
{
 8008984:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008986:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 800898a:	6294      	str	r4, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800898c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800898e:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 8008992:	6294      	str	r4, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008994:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8008996:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800899a:	6291      	str	r1, [r2, #40]	; 0x28
 800899c:	f06f 0201 	mvn.w	r2, #1
 80089a0:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80089a2:	691a      	ldr	r2, [r3, #16]
 80089a4:	07d1      	lsls	r1, r2, #31
 80089a6:	d5fc      	bpl.n	80089a2 <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089a8:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 80089ac:	2200      	movs	r2, #0
 80089ae:	6119      	str	r1, [r3, #16]
}
 80089b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked = false;
 80089b4:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
}
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop

080089bc <R3_2_RLGetPhaseCurrents>:
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{

  if (MC_NULL == pStator_Currents)
 80089bc:	b329      	cbz	r1, 8008a0a <R3_2_RLGetPhaseCurrents+0x4e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80089be:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 80089c2:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80089c4:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80089c6:	6863      	ldr	r3, [r4, #4]
 80089c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80089cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d0:	6063      	str	r3, [r4, #4]
    int32_t wAux;

    /* disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 80089d2:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 80089d6:	6f43      	ldr	r3, [r0, #116]	; 0x74

    /* Check saturation */
    if (wAux > -INT16_MAX)
 80089d8:	480e      	ldr	r0, [pc, #56]	; (8008a14 <R3_2_RLGetPhaseCurrents+0x58>)
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 80089da:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80089de:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80089e0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80089e4:	1a9b      	subs	r3, r3, r2
    if (wAux > -INT16_MAX)
 80089e6:	4283      	cmp	r3, r0
 80089e8:	da09      	bge.n	80089fe <R3_2_RLGetPhaseCurrents+0x42>
 80089ea:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <R3_2_RLGetPhaseCurrents+0x5c>)
    }

    pStator_Currents->a = (int16_t)wAux;
    pStator_Currents->b = (int16_t)wAux;
  }
}
 80089ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 80089f0:	2200      	movs	r2, #0
 80089f2:	f363 020f 	bfi	r2, r3, #0, #16
 80089f6:	f363 421f 	bfi	r2, r3, #16, #16
 80089fa:	600a      	str	r2, [r1, #0]
}
 80089fc:	4770      	bx	lr
      if (wAux < INT16_MAX)
 80089fe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008a02:	4293      	cmp	r3, r2
 8008a04:	dc02      	bgt.n	8008a0c <R3_2_RLGetPhaseCurrents+0x50>
    pStator_Currents->a = (int16_t)wAux;
 8008a06:	b21b      	sxth	r3, r3
 8008a08:	e7f0      	b.n	80089ec <R3_2_RLGetPhaseCurrents+0x30>
 8008a0a:	4770      	bx	lr
 8008a0c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008a10:	e7ec      	b.n	80089ec <R3_2_RLGetPhaseCurrents+0x30>
 8008a12:	bf00      	nop
 8008a14:	ffff8002 	.word	0xffff8002
 8008a18:	ffff8001 	.word	0xffff8001

08008a1c <R3_2_RLTurnOnLowSides>:
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
static void R3_2_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a1c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88

  pHandle->ADCRegularLocked = true;
 8008a20:	2101      	movs	r1, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a22:	6893      	ldr	r3, [r2, #8]
{
 8008a24:	b410      	push	{r4}
  pHandle->ADCRegularLocked = true;
 8008a26:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a2a:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a2c:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a30:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a32:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a34:	6919      	ldr	r1, [r3, #16]
 8008a36:	07c9      	lsls	r1, r1, #31
 8008a38:	d5fc      	bpl.n	8008a34 <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008a3a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008a3c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008a40:	6459      	str	r1, [r3, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8008a42:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d10b      	bne.n	8008a62 <R3_2_RLTurnOnLowSides+0x46>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008a4a:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008a4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008a50:	f8b2 40ac 	ldrh.w	r4, [r2, #172]	; 0xac
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008a54:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008a56:	f8b2 00ae 	ldrh.w	r0, [r2, #174]	; 0xae
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008a5a:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 8008a5e:	6288      	str	r0, [r1, #40]	; 0x28
 8008a60:	629a      	str	r2, [r3, #40]	; 0x28
  else
  {
    /* Nothing to do */
  }
  return;
}
 8008a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <R3_2_RLSwitchOnPWM>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t *pHdl)
{
  if (MC_NULL == pHdl)
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d04c      	beq.n	8008b06 <R3_2_RLSwitchOnPWM+0x9e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a6c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;

    pHandle->ADCRegularLocked=true;
 8008a70:	2101      	movs	r1, #1
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a72:	6893      	ldr	r3, [r2, #8]
{
 8008a74:	b4f0      	push	{r4, r5, r6, r7}
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008a76:	e9d2 5400 	ldrd	r5, r4, [r2]
    pHandle->ADCRegularLocked=true;
 8008a7a:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a7e:	f06f 0101 	mvn.w	r1, #1
 8008a82:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a84:	6919      	ldr	r1, [r3, #16]
 8008a86:	07ce      	lsls	r6, r1, #31
 8008a88:	d5fc      	bpl.n	8008a84 <R3_2_RLSwitchOnPWM+0x1c>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8008a8a:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a8e:	f06f 0601 	mvn.w	r6, #1
 8008a92:	611e      	str	r6, [r3, #16]
 8008a94:	3905      	subs	r1, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a96:	2601      	movs	r6, #1
 8008a98:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008a9a:	6419      	str	r1, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a9c:	6919      	ldr	r1, [r3, #16]
 8008a9e:	07c9      	lsls	r1, r1, #31
 8008aa0:	d5fc      	bpl.n	8008a9c <R3_2_RLSwitchOnPWM+0x34>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008aa2:	68d9      	ldr	r1, [r3, #12]
 8008aa4:	f041 0101 	orr.w	r1, r1, #1
 8008aa8:	60d9      	str	r1, [r3, #12]

    /* enable TIMx update interrupt*/
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008aaa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008aac:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008ab0:	6459      	str	r1, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008ab2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008ab4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008ab8:	6459      	str	r1, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 8008aba:	f892 10c0 	ldrb.w	r1, [r2, #192]	; 0xc0
 8008abe:	2902      	cmp	r1, #2
 8008ac0:	d00f      	beq.n	8008ae2 <R3_2_RLSwitchOnPWM+0x7a>
      /* Nothing to do */
    }

    /* set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  MODIFY_REG(ADCx->CR,
 8008ac8:	68ab      	ldr	r3, [r5, #8]
 8008aca:	4a13      	ldr	r2, [pc, #76]	; (8008b18 <R3_2_RLSwitchOnPWM+0xb0>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	f043 0308 	orr.w	r3, r3, #8
 8008ad2:	60ab      	str	r3, [r5, #8]
 8008ad4:	68a3      	ldr	r3, [r4, #8]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	f043 0308 	orr.w	r3, r3, #8
 8008adc:	60a3      	str	r3, [r4, #8]

    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
  }
  return;
}
 8008ade:	bcf0      	pop	{r4, r5, r6, r7}
 8008ae0:	4770      	bx	lr
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8008ae2:	6a19      	ldr	r1, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008ae4:	6a16      	ldr	r6, [r2, #32]
 8008ae6:	f8b2 70ac 	ldrh.w	r7, [r2, #172]	; 0xac
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8008aea:	f240 5355 	movw	r3, #1365	; 0x555
 8008aee:	4219      	tst	r1, r3
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008af0:	e9d2 1309 	ldrd	r1, r3, [r2, #36]	; 0x24
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8008af4:	d008      	beq.n	8008b08 <R3_2_RLSwitchOnPWM+0xa0>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008af6:	61b7      	str	r7, [r6, #24]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008af8:	f8b2 60ae 	ldrh.w	r6, [r2, #174]	; 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008afc:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 8008b00:	618e      	str	r6, [r1, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008b02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008b04:	e7dd      	b.n	8008ac2 <R3_2_RLSwitchOnPWM+0x5a>
 8008b06:	4770      	bx	lr
  WRITE_REG(GPIOx->BRR, PinMask);
 8008b08:	62b7      	str	r7, [r6, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008b0a:	f8b2 60ae 	ldrh.w	r6, [r2, #174]	; 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008b0e:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 8008b12:	628e      	str	r6, [r1, #40]	; 0x28
 8008b14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008b16:	e7d4      	b.n	8008ac2 <R3_2_RLSwitchOnPWM+0x5a>
 8008b18:	7fffffc0 	.word	0x7fffffc0

08008b1c <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8008b1c:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 8008b20:	b510      	push	{r4, lr}
 8008b22:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 8008b26:	f101 0e08 	add.w	lr, r1, #8
 8008b2a:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8008b2c:	f85e 300c 	ldr.w	r3, [lr, ip]
 8008b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	f84e 200c 	str.w	r2, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 8008b3e:	684a      	ldr	r2, [r1, #4]
 8008b40:	f000 0303 	and.w	r3, r0, #3
 8008b44:	4313      	orrs	r3, r2
 8008b46:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8008b48:	680a      	ldr	r2, [r1, #0]
 8008b4a:	f000 0010 	and.w	r0, r0, #16
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008b52:	ea33 0202 	bics.w	r2, r3, r2
 8008b56:	d014      	beq.n	8008b82 <R3_2_SetAOReferenceVoltage+0x66>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8008b58:	4a14      	ldr	r2, [pc, #80]	; (8008bac <R3_2_SetAOReferenceVoltage+0x90>)
 8008b5a:	4815      	ldr	r0, [pc, #84]	; (8008bb0 <R3_2_SetAOReferenceVoltage+0x94>)
 8008b5c:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 8008b5e:	680c      	ldr	r4, [r1, #0]
 8008b60:	fba0 0202 	umull	r0, r2, r0, r2
 8008b64:	0cd2      	lsrs	r2, r2, #19
 8008b66:	4323      	orrs	r3, r4
 8008b68:	00d2      	lsls	r2, r2, #3
 8008b6a:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8008b6c:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 8008b6e:	9b00      	ldr	r3, [sp, #0]
 8008b70:	b12b      	cbz	r3, 8008b7e <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8008b72:	9b00      	ldr	r3, [sp, #0]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8008b78:	9b00      	ldr	r3, [sp, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f9      	bne.n	8008b72 <R3_2_SetAOReferenceVoltage+0x56>
}
 8008b7e:	b002      	add	sp, #8
 8008b80:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008b82:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <R3_2_SetAOReferenceVoltage+0x90>)
 8008b84:	4a0a      	ldr	r2, [pc, #40]	; (8008bb0 <R3_2_SetAOReferenceVoltage+0x94>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8c:	0cdb      	lsrs	r3, r3, #19
 8008b8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008b92:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f1      	beq.n	8008b7e <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8008b9a:	9b01      	ldr	r3, [sp, #4]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008ba0:	9b01      	ldr	r3, [sp, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1f9      	bne.n	8008b9a <R3_2_SetAOReferenceVoltage+0x7e>
}
 8008ba6:	b002      	add	sp, #8
 8008ba8:	bd10      	pop	{r4, pc}
 8008baa:	bf00      	nop
 8008bac:	2000058c 	.word	0x2000058c
 8008bb0:	431bde83 	.word	0x431bde83

08008bb4 <R3_2_Init>:
  if (MC_NULL == pHandle)
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f000 80f0 	beq.w	8008d9a <R3_2_Init+0x1e6>
{
 8008bba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008bbe:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
 8008bc2:	6827      	ldr	r7, [r4, #0]
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008bc4:	6866      	ldr	r6, [r4, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008bc6:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008bc8:	68a5      	ldr	r5, [r4, #8]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8008bca:	f8d4 b014 	ldr.w	fp, [r4, #20]
 8008bce:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008bd0:	e9d4 c00b 	ldrd	ip, r0, [r4, #44]	; 0x2c
{
 8008bd4:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008bd6:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008bda:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008bde:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8008be0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008be2:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8008be4:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8008be8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008bea:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8008bec:	e9d4 a906 	ldrd	sl, r9, [r4, #24]
 8008bf0:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008bf2:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008bf6:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008bf8:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008bfa:	f022 0220 	bic.w	r2, r2, #32
 8008bfe:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008c00:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008c02:	6872      	ldr	r2, [r6, #4]
 8008c04:	f022 0204 	bic.w	r2, r2, #4
 8008c08:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008c0a:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008c0e:	6872      	ldr	r2, [r6, #4]
 8008c10:	f022 0220 	bic.w	r2, r2, #32
 8008c14:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008c16:	6030      	str	r0, [r6, #0]
      if (TIM1 ==  TIMx)
 8008c18:	4a86      	ldr	r2, [pc, #536]	; (8008e34 <R3_2_Init+0x280>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008c1a:	4887      	ldr	r0, [pc, #540]	; (8008e38 <R3_2_Init+0x284>)
 8008c1c:	4295      	cmp	r5, r2
 8008c1e:	6902      	ldr	r2, [r0, #16]
 8008c20:	bf0c      	ite	eq
 8008c22:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8008c26:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8008c2a:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 8008c2c:	b181      	cbz	r1, 8008c50 <R3_2_Init+0x9c>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 8008c2e:	e9d1 2003 	ldrd	r2, r0, [r1, #12]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8008c32:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 8008c36:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8008c38:	f04e 0e01 	orr.w	lr, lr, #1
 8008c3c:	f8c2 e000 	str.w	lr, [r2]
 8008c40:	6802      	ldr	r2, [r0, #0]
 8008c42:	f042 0201 	orr.w	r2, r2, #1
 8008c46:	6002      	str	r2, [r0, #0]
 8008c48:	680a      	ldr	r2, [r1, #0]
 8008c4a:	f042 0201 	orr.w	r2, r2, #1
 8008c4e:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 8008c50:	b1b3      	cbz	r3, 8008c80 <R3_2_Init+0xcc>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 8008c52:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
 8008c56:	2a01      	cmp	r2, #1
 8008c58:	d00a      	beq.n	8008c70 <R3_2_Init+0xbc>
 8008c5a:	f1bc 0f00 	cmp.w	ip, #0
 8008c5e:	d007      	beq.n	8008c70 <R3_2_Init+0xbc>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8008c60:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
 8008c64:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008c66:	9303      	str	r3, [sp, #12]
 8008c68:	4661      	mov	r1, ip
 8008c6a:	f7ff ff57 	bl	8008b1c <R3_2_SetAOReferenceVoltage>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	f042 0201 	orr.w	r2, r2, #1
 8008c76:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008c7e:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 8008c80:	f1bb 0f00 	cmp.w	fp, #0
 8008c84:	d017      	beq.n	8008cb6 <R3_2_Init+0x102>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 8008c86:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d007      	beq.n	8008c9e <R3_2_Init+0xea>
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	b12b      	cbz	r3, 8008c9e <R3_2_Init+0xea>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 8008c92:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
 8008c96:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008c98:	4619      	mov	r1, r3
 8008c9a:	f7ff ff3f 	bl	8008b1c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008c9e:	f8db 3000 	ldr.w	r3, [fp]
 8008ca2:	f043 0301 	orr.w	r3, r3, #1
 8008ca6:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008caa:	f8db 3000 	ldr.w	r3, [fp]
 8008cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cb2:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 8008cb6:	f1ba 0f00 	cmp.w	sl, #0
 8008cba:	d017      	beq.n	8008cec <R3_2_Init+0x138>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 8008cbc:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d007      	beq.n	8008cd4 <R3_2_Init+0x120>
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	b12b      	cbz	r3, 8008cd4 <R3_2_Init+0x120>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 8008cc8:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
 8008ccc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008cce:	4619      	mov	r1, r3
 8008cd0:	f7ff ff24 	bl	8008b1c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008cd4:	f8da 3000 	ldr.w	r3, [sl]
 8008cd8:	f043 0301 	orr.w	r3, r3, #1
 8008cdc:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008ce0:	f8da 3000 	ldr.w	r3, [sl]
 8008ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce8:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 8008cec:	f1b9 0f00 	cmp.w	r9, #0
 8008cf0:	d017      	beq.n	8008d22 <R3_2_Init+0x16e>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 8008cf2:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d007      	beq.n	8008d0a <R3_2_Init+0x156>
 8008cfa:	9b02      	ldr	r3, [sp, #8]
 8008cfc:	b12b      	cbz	r3, 8008d0a <R3_2_Init+0x156>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 8008cfe:	f8b4 20be 	ldrh.w	r2, [r4, #190]	; 0xbe
 8008d02:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d04:	4619      	mov	r1, r3
 8008d06:	f7ff ff09 	bl	8008b1c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008d0a:	f8d9 3000 	ldr.w	r3, [r9]
 8008d0e:	f043 0301 	orr.w	r3, r3, #1
 8008d12:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008d16:	f8d9 3000 	ldr.w	r3, [r9]
 8008d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d1e:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	07d9      	lsls	r1, r3, #31
 8008d26:	d53d      	bpl.n	8008da4 <R3_2_Init+0x1f0>
 8008d28:	68b3      	ldr	r3, [r6, #8]
 8008d2a:	07da      	lsls	r2, r3, #31
 8008d2c:	d536      	bpl.n	8008d9c <R3_2_Init+0x1e8>
  volatile uint32_t Brk2Timeout = 1000;
 8008d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d32:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	f023 0301 	bic.w	r3, r3, #1
 8008d3a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008d3c:	686b      	ldr	r3, [r5, #4]
 8008d3e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d46:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008d48:	69ab      	ldr	r3, [r5, #24]
 8008d4a:	f043 0308 	orr.w	r3, r3, #8
 8008d4e:	61ab      	str	r3, [r5, #24]
 8008d50:	69ab      	ldr	r3, [r5, #24]
 8008d52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008d56:	61ab      	str	r3, [r5, #24]
 8008d58:	69eb      	ldr	r3, [r5, #28]
 8008d5a:	f043 0308 	orr.w	r3, r3, #8
 8008d5e:	61eb      	str	r3, [r5, #28]
 8008d60:	69eb      	ldr	r3, [r5, #28]
 8008d62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008d66:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008d68:	696b      	ldr	r3, [r5, #20]
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	616b      	str	r3, [r5, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 8008d70:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d022      	beq.n	8008dbe <R3_2_Init+0x20a>
    if (M1 == pHandle->_Super.Motor)
 8008d78:	f898 3068 	ldrb.w	r3, [r8, #104]	; 0x68
 8008d7c:	bb3b      	cbnz	r3, 8008dce <R3_2_Init+0x21a>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 8008d7e:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d01f      	beq.n	8008dc6 <R3_2_Init+0x212>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d121      	bne.n	8008dce <R3_2_Init+0x21a>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	632a      	str	r2, [r5, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008d8e:	696a      	ldr	r2, [r5, #20]
 8008d90:	f042 0201 	orr.w	r2, r2, #1
 8008d94:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008d96:	632b      	str	r3, [r5, #48]	; 0x30
}
 8008d98:	e019      	b.n	8008dce <R3_2_Init+0x21a>
 8008d9a:	4770      	bx	lr
        R3_2_ADCxInit(ADCx_2);
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f7ff fbd3 	bl	8008548 <R3_2_ADCxInit>
 8008da2:	e7c4      	b.n	8008d2e <R3_2_Init+0x17a>
        R3_2_ADCxInit(ADCx_1);
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff fbcf 	bl	8008548 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008daa:	2340      	movs	r3, #64	; 0x40
 8008dac:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db4:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008db6:	68b3      	ldr	r3, [r6, #8]
 8008db8:	07da      	lsls	r2, r3, #31
 8008dba:	d4b8      	bmi.n	8008d2e <R3_2_Init+0x17a>
 8008dbc:	e7ee      	b.n	8008d9c <R3_2_Init+0x1e8>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8008dbe:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d02b      	beq.n	8008e1e <R3_2_Init+0x26a>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8008dc6:	f8b8 307c 	ldrh.w	r3, [r8, #124]	; 0x7c
 8008dca:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008dcc:	626b      	str	r3, [r5, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008dce:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8008dd2:	612b      	str	r3, [r5, #16]
  if ((pHandle->pParams_str->BKIN2Mode) != NONE)
 8008dd4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
 8008dd8:	b17b      	cbz	r3, 8008dfa <R3_2_Init+0x246>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008dda:	692b      	ldr	r3, [r5, #16]
 8008ddc:	05db      	lsls	r3, r3, #23
 8008dde:	d51c      	bpl.n	8008e1a <R3_2_Init+0x266>
    while ((Brk2Timeout != 0u) && (1U == result))
 8008de0:	9b05      	ldr	r3, [sp, #20]
 8008de2:	b153      	cbz	r3, 8008dfa <R3_2_Init+0x246>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8008de4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008de8:	612a      	str	r2, [r5, #16]
      Brk2Timeout--;
 8008dea:	9b05      	ldr	r3, [sp, #20]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008df0:	692b      	ldr	r3, [r5, #16]
 8008df2:	f413 7f80 	tst.w	r3, #256	; 0x100
    while ((Brk2Timeout != 0u) && (1U == result))
 8008df6:	9b05      	ldr	r3, [sp, #20]
 8008df8:	d10c      	bne.n	8008e14 <R3_2_Init+0x260>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8008dfa:	68eb      	ldr	r3, [r5, #12]
 8008dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e00:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 8008e02:	6a2b      	ldr	r3, [r5, #32]
 8008e04:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8008e08:	f043 0305 	orr.w	r3, r3, #5
 8008e0c:	622b      	str	r3, [r5, #32]
}
 8008e0e:	b007      	add	sp, #28
 8008e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((Brk2Timeout != 0u) && (1U == result))
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e7      	bne.n	8008de8 <R3_2_Init+0x234>
 8008e18:	e7ef      	b.n	8008dfa <R3_2_Init+0x246>
 8008e1a:	9b05      	ldr	r3, [sp, #20]
 8008e1c:	e7ed      	b.n	8008dfa <R3_2_Init+0x246>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 8008e1e:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
 8008e22:	2a03      	cmp	r2, #3
 8008e24:	d1cf      	bne.n	8008dc6 <R3_2_Init+0x212>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008e26:	632b      	str	r3, [r5, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008e28:	696b      	ldr	r3, [r5, #20]
 8008e2a:	f043 0301 	orr.w	r3, r3, #1
 8008e2e:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008e30:	632a      	str	r2, [r5, #48]	; 0x30
}
 8008e32:	e7c8      	b.n	8008dc6 <R3_2_Init+0x212>
 8008e34:	40012c00 	.word	0x40012c00
 8008e38:	e0042000 	.word	0xe0042000

08008e3c <R3_2_SetOffsetCalib>:
{
 8008e3c:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8008e3e:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8008e42:	680b      	ldr	r3, [r1, #0]
 8008e44:	6703      	str	r3, [r0, #112]	; 0x70
  pHdl->offsetCalibStatus = true;
 8008e46:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8008e48:	e9c0 421d 	strd	r4, r2, [r0, #116]	; 0x74
  pHdl->offsetCalibStatus = true;
 8008e4c:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8008e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop

08008e58 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8008e58:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74
 8008e5c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8008e5e:	608b      	str	r3, [r1, #8]
 8008e60:	e9c1 0200 	strd	r0, r2, [r1]
}
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop

08008e68 <R3_2_CurrentReadingPolarization>:
{
 8008e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008e6a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008e6e:	e9d3 7600 	ldrd	r7, r6, [r3]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008e72:	689d      	ldr	r5, [r3, #8]
  if (true == pHandle->_Super.offsetCalibStatus)
 8008e74:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
{
 8008e78:	b085      	sub	sp, #20
 8008e7a:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 8008e7c:	b1ab      	cbz	r3, 8008eaa <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	4a4e      	ldr	r2, [pc, #312]	; (8008fbc <R3_2_CurrentReadingPolarization+0x154>)
 8008e82:	4013      	ands	r3, r2
 8008e84:	f043 0308 	orr.w	r3, r3, #8
 8008e88:	60bb      	str	r3, [r7, #8]
 8008e8a:	68b3      	ldr	r3, [r6, #8]
 8008e8c:	4013      	ands	r3, r2
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008e8e:	2180      	movs	r1, #128	; 0x80
 8008e90:	f043 0308 	orr.w	r3, r3, #8
 8008e94:	60b3      	str	r3, [r6, #8]
 8008e96:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  pHandle->_Super.Sector = SECTOR_5;
 8008e9a:	2204      	movs	r2, #4
  pHandle->BrakeActionLock = false;
 8008e9c:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 8008e9e:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 8008ea2:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8008ea6:	b005      	add	sp, #20
 8008ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8008eaa:	6802      	ldr	r2, [r0, #0]
 8008eac:	9202      	str	r2, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8008eae:	6942      	ldr	r2, [r0, #20]
 8008eb0:	9203      	str	r2, [sp, #12]
    pHandle->PolarizationCounter = 0U;
 8008eb2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    pHandle->PhaseBOffset = 0U;
 8008eb6:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
    pHandle->PhaseCOffset = 0U;
 8008eba:	6783      	str	r3, [r0, #120]	; 0x78
  CLEAR_BIT(TIMx->CCER, Channels);
 8008ebc:	6a2b      	ldr	r3, [r5, #32]
 8008ebe:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8008ec2:	f023 0305 	bic.w	r3, r3, #5
 8008ec6:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8008ec8:	2304      	movs	r3, #4
 8008eca:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 8008ece:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8008ed2:	4b3b      	ldr	r3, [pc, #236]	; (8008fc0 <R3_2_CurrentReadingPolarization+0x158>)
 8008ed4:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8008ed6:	4b3b      	ldr	r3, [pc, #236]	; (8008fc4 <R3_2_CurrentReadingPolarization+0x15c>)
 8008ed8:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008eda:	2380      	movs	r3, #128	; 0x80
 8008edc:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008ee0:	f7ff fce0 	bl	80088a4 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 8008ee4:	4a38      	ldr	r2, [pc, #224]	; (8008fc8 <R3_2_CurrentReadingPolarization+0x160>)
 8008ee6:	686b      	ldr	r3, [r5, #4]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	2b70      	cmp	r3, #112	; 0x70
 8008eec:	d1fb      	bne.n	8008ee6 <R3_2_CurrentReadingPolarization+0x7e>
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	4a32      	ldr	r2, [pc, #200]	; (8008fbc <R3_2_CurrentReadingPolarization+0x154>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	f043 0308 	orr.w	r3, r3, #8
 8008ef8:	60bb      	str	r3, [r7, #8]
 8008efa:	68b3      	ldr	r3, [r6, #8]
 8008efc:	4013      	ands	r3, r2
 8008efe:	f043 0308 	orr.w	r3, r3, #8
                           pHandle->pParams_str->RepetitionCounter,
 8008f02:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8008f06:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 8008f08:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8008f0c:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8008f10:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 8008f14:	4628      	mov	r0, r5
 8008f16:	e9cd 1300 	strd	r1, r3, [sp]
 8008f1a:	f7ff faf7 	bl	800850c <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7ff fd0c 	bl	800893c <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 8008f24:	2200      	movs	r2, #0
 8008f26:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  pHandle->PolarizationSector=SECTOR_1;
 8008f2a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 8008f2e:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8008f32:	4a26      	ldr	r2, [pc, #152]	; (8008fcc <R3_2_CurrentReadingPolarization+0x164>)
 8008f34:	6022      	str	r2, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008f36:	4620      	mov	r0, r4
 8008f38:	f7ff fcb4 	bl	80088a4 <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 8008f3c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    waitForPolarizationEnd(TIMx,
 8008f40:	9b01      	ldr	r3, [sp, #4]
 8008f42:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 8008f46:	9900      	ldr	r1, [sp, #0]
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7ff fadf 	bl	800850c <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f7ff fcf4 	bl	800893c <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008f54:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008f58:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8008f5a:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008f5c:	0912      	lsrs	r2, r2, #4
 8008f5e:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008f62:	091b      	lsrs	r3, r3, #4
 8008f64:	67a3      	str	r3, [r4, #120]	; 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8008f66:	9902      	ldr	r1, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8008f68:	9a03      	ldr	r2, [sp, #12]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008f6a:	69ab      	ldr	r3, [r5, #24]
 8008f6c:	6162      	str	r2, [r4, #20]
 8008f6e:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.offsetCalibStatus = true;
 8008f72:	2001      	movs	r0, #1
 8008f74:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8008f78:	6021      	str	r1, [r4, #0]
 8008f7a:	61ab      	str	r3, [r5, #24]
 8008f7c:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8008f7e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8008f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f86:	61aa      	str	r2, [r5, #24]
 8008f88:	69ea      	ldr	r2, [r5, #28]
 8008f8a:	f022 0208 	bic.w	r2, r2, #8
 8008f8e:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008f90:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008f92:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008f94:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008f96:	69ab      	ldr	r3, [r5, #24]
 8008f98:	f043 0308 	orr.w	r3, r3, #8
 8008f9c:	61ab      	str	r3, [r5, #24]
 8008f9e:	69ab      	ldr	r3, [r5, #24]
 8008fa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008fa4:	61ab      	str	r3, [r5, #24]
 8008fa6:	69eb      	ldr	r3, [r5, #28]
 8008fa8:	f043 0308 	orr.w	r3, r3, #8
 8008fac:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008fae:	6a2b      	ldr	r3, [r5, #32]
 8008fb0:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8008fb4:	f043 0305 	orr.w	r3, r3, #5
 8008fb8:	622b      	str	r3, [r5, #32]
}
 8008fba:	e76e      	b.n	8008e9a <R3_2_CurrentReadingPolarization+0x32>
 8008fbc:	7fffffc0 	.word	0x7fffffc0
 8008fc0:	080087b1 	.word	0x080087b1
 8008fc4:	08008771 	.word	0x08008771
 8008fc8:	02000070 	.word	0x02000070
 8008fcc:	08008805 	.word	0x08008805

08008fd0 <R3_2_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d03a      	beq.n	800904a <R3_2_SetADCSampPointSectX+0x7a>
{
 8008fd4:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 8008fd6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8008fda:	f8b0 e07c 	ldrh.w	lr, [r0, #124]	; 0x7c
 8008fde:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8008fe2:	ebae 0203 	sub.w	r2, lr, r3
 8008fe6:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	; 0xb2
 8008fea:	b292      	uxth	r2, r2
 8008fec:	42a2      	cmp	r2, r4
 8008fee:	d916      	bls.n	800901e <R3_2_SetADCSampPointSectX+0x4e>
      pHandle->_Super.Sector = SECTOR_5;
 8008ff0:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8008ff2:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 8008ff6:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8008ffa:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008ffc:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8008ffe:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8009000:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8009004:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009008:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800900a:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800900c:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800900e:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009010:	6852      	ldr	r2, [r2, #4]
 8009012:	4b11      	ldr	r3, [pc, #68]	; (8009058 <R3_2_SetADCSampPointSectX+0x88>)
 8009014:	421a      	tst	r2, r3
    returnValue = 0U;
 8009016:	bf14      	ite	ne
 8009018:	2001      	movne	r0, #1
 800901a:	2000      	moveq	r0, #0
}
 800901c:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 800901e:	f8b0 c048 	ldrh.w	ip, [r0, #72]	; 0x48
 8009022:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 8009026:	fa1f fc8c 	uxth.w	ip, ip
 800902a:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800902e:	d80d      	bhi.n	800904c <R3_2_SetADCSampPointSectX+0x7c>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8009030:	4423      	add	r3, r4
 8009032:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8009034:	459e      	cmp	lr, r3
 8009036:	d8e1      	bhi.n	8008ffc <R3_2_SetADCSampPointSectX+0x2c>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009038:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800903a:	f44f 7280 	mov.w	r2, #256	; 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800903e:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8009042:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009046:	b29b      	uxth	r3, r3
 8009048:	e7d8      	b.n	8008ffc <R3_2_SetADCSampPointSectX+0x2c>
}
 800904a:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800904c:	f8b1 20b6 	ldrh.w	r2, [r1, #182]	; 0xb6
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	b29b      	uxth	r3, r3
 8009054:	e7d2      	b.n	8008ffc <R3_2_SetADCSampPointSectX+0x2c>
 8009056:	bf00      	nop
 8009058:	02000070 	.word	0x02000070

0800905c <R3_2_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 800905c:	4602      	mov	r2, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	d043      	beq.n	80090ea <R3_2_TIMx_UP_IRQHandler+0x8e>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009062:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
{
 8009066:	b5f0      	push	{r4, r5, r6, r7, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009068:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    if (OPAMPParams != NULL)
 800906c:	2c00      	cmp	r4, #0
 800906e:	d036      	beq.n	80090de <R3_2_TIMx_UP_IRQHandler+0x82>
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 8009070:	f890 c06a 	ldrb.w	ip, [r0, #106]	; 0x6a
 8009074:	eb01 038c 	add.w	r3, r1, ip, lsl #2
 8009078:	46e6      	mov	lr, ip
 800907a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800907c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1fc      	bne.n	800907c <R3_2_TIMx_UP_IRQHandler+0x20>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 8009082:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 8009086:	6bde      	ldr	r6, [r3, #60]	; 0x3c
      if (OpampConfig != OPAMP_UNCHANGED)
 8009088:	1c77      	adds	r7, r6, #1
 800908a:	d005      	beq.n	8009098 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800908c:	68df      	ldr	r7, [r3, #12]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800908e:	683c      	ldr	r4, [r7, #0]
 8009090:	f424 7486 	bic.w	r4, r4, #268	; 0x10c
 8009094:	4334      	orrs	r4, r6
 8009096:	603c      	str	r4, [r7, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 8009098:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (OpampConfig != OPAMP_UNCHANGED)
 800909a:	1c66      	adds	r6, r4, #1
 800909c:	d005      	beq.n	80090aa <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800909e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 80090a0:	6833      	ldr	r3, [r6, #0]
 80090a2:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 80090a6:	4323      	orrs	r3, r4
 80090a8:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80090aa:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80090ae:	f8b2 307e 	ldrh.w	r3, [r2, #126]	; 0x7e
 80090b2:	6fcc      	ldr	r4, [r1, #124]	; 0x7c
 80090b4:	431c      	orrs	r4, r3
 80090b6:	64c4      	str	r4, [r0, #76]	; 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80090b8:	6e48      	ldr	r0, [r1, #100]	; 0x64
 80090ba:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 80090be:	430b      	orrs	r3, r1
 80090c0:	64c3      	str	r3, [r0, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80090c2:	686b      	ldr	r3, [r5, #4]
 80090c4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80090c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80090cc:	2180      	movs	r1, #128	; 0x80
 80090ce:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80090d2:	606b      	str	r3, [r5, #4]
    tempPointer = &(pHandle->_Super.Motor);
 80090d4:	f102 0068 	add.w	r0, r2, #104	; 0x68
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80090d8:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
}
 80090dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80090de:	f890 e06a 	ldrb.w	lr, [r0, #106]	; 0x6a
 80090e2:	eb01 038e 	add.w	r3, r1, lr, lsl #2
 80090e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80090e8:	e7df      	b.n	80090aa <R3_2_TIMx_UP_IRQHandler+0x4e>
}
 80090ea:	4770      	bx	lr

080090ec <R3_2_BRK2_IRQHandler>:
  if (MC_NULL == pHandle)
 80090ec:	b168      	cbz	r0, 800910a <R3_2_BRK2_IRQHandler+0x1e>
    if (false == pHandle->BrakeActionLock)
 80090ee:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80090f2:	b92b      	cbnz	r3, 8009100 <R3_2_BRK2_IRQHandler+0x14>
      if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 80090f4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80090f8:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 80090fc:	2a02      	cmp	r2, #2
 80090fe:	d005      	beq.n	800910c <R3_2_BRK2_IRQHandler+0x20>
    pHandle->OverCurrentFlag = true;
 8009100:	2301      	movs	r3, #1
 8009102:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    tempPointer = &(pHandle->_Super.Motor);
 8009106:	3068      	adds	r0, #104	; 0x68
 8009108:	4770      	bx	lr
}
 800910a:	4770      	bx	lr
{
 800910c:	b430      	push	{r4, r5}
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800910e:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8009112:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8009118:	62a5      	str	r5, [r4, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800911a:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800911e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8009122:	628c      	str	r4, [r1, #40]	; 0x28
 8009124:	6293      	str	r3, [r2, #40]	; 0x28
    pHandle->OverCurrentFlag = true;
 8009126:	2301      	movs	r3, #1
 8009128:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 800912c:	bc30      	pop	{r4, r5}
    tempPointer = &(pHandle->_Super.Motor);
 800912e:	3068      	adds	r0, #104	; 0x68
}
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop

08009134 <R3_2_BRK_IRQHandler>:
  if (MC_NULL == pHandle)
 8009134:	4603      	mov	r3, r0
 8009136:	b160      	cbz	r0, 8009152 <R3_2_BRK_IRQHandler+0x1e>
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009138:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800913c:	6891      	ldr	r1, [r2, #8]
 800913e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    pHandle->OverVoltageFlag = true;
 8009140:	f240 1c01 	movw	ip, #257	; 0x101
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009148:	644a      	str	r2, [r1, #68]	; 0x44
    tempPointer = &(pHandle->_Super.Motor);
 800914a:	3068      	adds	r0, #104	; 0x68
    pHandle->OverVoltageFlag = true;
 800914c:	f8a3 c083 	strh.w	ip, [r3, #131]	; 0x83
    tempPointer = &(pHandle->_Super.Motor);
 8009150:	4770      	bx	lr
}
 8009152:	4770      	bx	lr

08009154 <R3_2_IsOverCurrentOccurred>:
{
 8009154:	4603      	mov	r3, r0
  if (true == pHandle->OverVoltageFlag)
 8009156:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
 800915a:	b160      	cbz	r0, 8009176 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8009162:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8009164:	2002      	movs	r0, #2
  if (true == pHandle->OverCurrentFlag)
 8009166:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800916a:	b11a      	cbz	r2, 8009174 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    retVal |= MC_BREAK_IN;
 8009172:	4608      	mov	r0, r1
}
 8009174:	4770      	bx	lr
 8009176:	2140      	movs	r1, #64	; 0x40
 8009178:	e7f5      	b.n	8009166 <R3_2_IsOverCurrentOccurred+0x12>
 800917a:	bf00      	nop

0800917c <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 800917c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
{
 8009180:	b430      	push	{r4, r5}
  if (false == pHandle->_Super.RLDetectionMode)
 8009182:	2900      	cmp	r1, #0
 8009184:	d13d      	bne.n	8009202 <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009186:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 800918a:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800918c:	699a      	ldr	r2, [r3, #24]
 800918e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009192:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009196:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800919a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800919c:	6a1a      	ldr	r2, [r3, #32]
 800919e:	f042 0201 	orr.w	r2, r2, #1
 80091a2:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80091a4:	6a1a      	ldr	r2, [r3, #32]
 80091a6:	f022 0204 	bic.w	r2, r2, #4
 80091aa:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80091ac:	6359      	str	r1, [r3, #52]	; 0x34
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 80091ae:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
 80091b2:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80091b4:	f103 0418 	add.w	r4, r3, #24
 80091b8:	d030      	beq.n	800921c <R3_2_RLDetectionModeEnable+0xa0>
    else if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 80091ba:	2a02      	cmp	r2, #2
 80091bc:	d10f      	bne.n	80091de <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80091c4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80091c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091cc:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80091ce:	6a1a      	ldr	r2, [r3, #32]
 80091d0:	f042 0210 	orr.w	r2, r2, #16
 80091d4:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80091d6:	6a1a      	ldr	r2, [r3, #32]
 80091d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091dc:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80091de:	6862      	ldr	r2, [r4, #4]
 80091e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80091e4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80091e8:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80091ec:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80091ee:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 80091f0:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80091f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091f6:	621a      	str	r2, [r3, #32]
 80091f8:	6a1a      	ldr	r2, [r3, #32]
 80091fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091fe:	621a      	str	r2, [r3, #32]
 8009200:	6701      	str	r1, [r0, #112]	; 0x70
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009202:	4b0f      	ldr	r3, [pc, #60]	; (8009240 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8009204:	490f      	ldr	r1, [pc, #60]	; (8009244 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009206:	4a10      	ldr	r2, [pc, #64]	; (8009248 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009208:	4c10      	ldr	r4, [pc, #64]	; (800924c <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800920a:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800920c:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800920e:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009210:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009214:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8009216:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 800921a:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009222:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009226:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800922a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800922c:	6a1a      	ldr	r2, [r3, #32]
 800922e:	f022 0210 	bic.w	r2, r2, #16
 8009232:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8009234:	6a1a      	ldr	r2, [r3, #32]
 8009236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800923a:	621a      	str	r2, [r3, #32]
}
 800923c:	e7cf      	b.n	80091de <R3_2_RLDetectionModeEnable+0x62>
 800923e:	bf00      	nop
 8009240:	08008a1d 	.word	0x08008a1d
 8009244:	08008a69 	.word	0x08008a69
 8009248:	0800893d 	.word	0x0800893d
 800924c:	080089bd 	.word	0x080089bd

08009250 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 8009250:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
 8009254:	2b00      	cmp	r3, #0
 8009256:	d03c      	beq.n	80092d2 <R3_2_RLDetectionModeDisable+0x82>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009258:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800925c:	688b      	ldr	r3, [r1, #8]
{
 800925e:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009260:	699a      	ldr	r2, [r3, #24]
 8009262:	4c43      	ldr	r4, [pc, #268]	; (8009370 <R3_2_RLDetectionModeDisable+0x120>)
 8009264:	4022      	ands	r2, r4
 8009266:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800926a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800926c:	6a1a      	ldr	r2, [r3, #32]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009274:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8009278:	2a01      	cmp	r2, #1
 800927a:	d02b      	beq.n	80092d4 <R3_2_RLDetectionModeDisable+0x84>
    else if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 800927c:	2a02      	cmp	r2, #2
 800927e:	d050      	beq.n	8009322 <R3_2_RLDetectionModeDisable+0xd2>
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009280:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009284:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009286:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009288:	6999      	ldr	r1, [r3, #24]
 800928a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800928e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009292:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8009296:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009298:	6a19      	ldr	r1, [r3, #32]
 800929a:	f041 0110 	orr.w	r1, r1, #16
 800929e:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80092a2:	69d9      	ldr	r1, [r3, #28]
 80092a4:	4021      	ands	r1, r4
 80092a6:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 80092aa:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80092ac:	6a19      	ldr	r1, [r3, #32]
 80092ae:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80092b2:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80092b4:	492f      	ldr	r1, [pc, #188]	; (8009374 <R3_2_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 80092b6:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80092b8:	4a2f      	ldr	r2, [pc, #188]	; (8009378 <R3_2_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80092ba:	6001      	str	r1, [r0, #0]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 80092bc:	492f      	ldr	r1, [pc, #188]	; (800937c <R3_2_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 80092be:	4c30      	ldr	r4, [pc, #192]	; (8009380 <R3_2_RLDetectionModeDisable+0x130>)
 80092c0:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 80092c2:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80092c4:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 80092c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 80092cc:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 80092d0:	4770      	bx	lr
 80092d2:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80092d4:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 80092d6:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 80092da:	f041 0104 	orr.w	r1, r1, #4
 80092de:	0852      	lsrs	r2, r2, #1
 80092e0:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80092e2:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80092e4:	6999      	ldr	r1, [r3, #24]
 80092e6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80092ea:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80092ee:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80092f2:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80092f4:	6a19      	ldr	r1, [r3, #32]
 80092f6:	f041 0110 	orr.w	r1, r1, #16
 80092fa:	6219      	str	r1, [r3, #32]
 80092fc:	6a19      	ldr	r1, [r3, #32]
 80092fe:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8009302:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009304:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009306:	69d9      	ldr	r1, [r3, #28]
 8009308:	4021      	ands	r1, r4
 800930a:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 800930e:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009310:	6a19      	ldr	r1, [r3, #32]
 8009312:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009316:	6219      	str	r1, [r3, #32]
 8009318:	6a19      	ldr	r1, [r3, #32]
 800931a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800931e:	6219      	str	r1, [r3, #32]
}
 8009320:	e7c8      	b.n	80092b4 <R3_2_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 8009322:	6a19      	ldr	r1, [r3, #32]
 8009324:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009328:	f021 0104 	bic.w	r1, r1, #4
 800932c:	0852      	lsrs	r2, r2, #1
 800932e:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009330:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009332:	6999      	ldr	r1, [r3, #24]
 8009334:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009338:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800933c:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8009340:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009342:	6a19      	ldr	r1, [r3, #32]
 8009344:	f041 0110 	orr.w	r1, r1, #16
 8009348:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800934a:	6a19      	ldr	r1, [r3, #32]
 800934c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8009350:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009352:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009354:	69d9      	ldr	r1, [r3, #28]
 8009356:	4021      	ands	r1, r4
 8009358:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 800935c:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800935e:	6a19      	ldr	r1, [r3, #32]
 8009360:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009364:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009366:	6a19      	ldr	r1, [r3, #32]
 8009368:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800936c:	6219      	str	r1, [r3, #32]
}
 800936e:	e7a1      	b.n	80092b4 <R3_2_RLDetectionModeDisable+0x64>
 8009370:	fffeff8c 	.word	0xfffeff8c
 8009374:	080085fd 	.word	0x080085fd
 8009378:	0800893d 	.word	0x0800893d
 800937c:	080088a5 	.word	0x080088a5
 8009380:	08008851 	.word	0x08008851

08009384 <R3_2_RLDetectionModeSetDuty>:
  if (MC_NULL == pHdl)
 8009384:	4603      	mov	r3, r0
 8009386:	2800      	cmp	r0, #0
 8009388:	d03b      	beq.n	8009402 <R3_2_RLDetectionModeSetDuty+0x7e>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800938a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800938e:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
{
 8009392:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009394:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009396:	69e2      	ldr	r2, [r4, #28]
 8009398:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800939c:	fb00 f101 	mul.w	r1, r0, r1
 80093a0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80093a4:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 80093a6:	f04f 0c01 	mov.w	ip, #1
 80093aa:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
    pHandle->_Super.CntPhA = (uint16_t)val;
 80093ae:	87d9      	strh	r1, [r3, #62]	; 0x3e
    pHandle->ADCRegularLocked = true;
 80093b0:	f883 c08c 	strb.w	ip, [r3, #140]	; 0x8c
 80093b4:	61e2      	str	r2, [r4, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 80093b6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80093ba:	1a80      	subs	r0, r0, r2
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 80093bc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
  WRITE_REG(TIMx->CCR4, CompareValue);
 80093c0:	6420      	str	r0, [r4, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 80093c2:	63e2      	str	r2, [r4, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80093c4:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80093c6:	6862      	ldr	r2, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 80093c8:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
 80093cc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80093d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80093d4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
    pHdl->Sector = SECTOR_4;
 80093d8:	2103      	movs	r1, #3
 80093da:	6062      	str	r2, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 80093dc:	4560      	cmp	r0, ip
    pHdl->Sector = SECTOR_4;
 80093de:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80093e2:	6862      	ldr	r2, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 80093e4:	d007      	beq.n	80093f6 <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80093e6:	4b07      	ldr	r3, [pc, #28]	; (8009404 <R3_2_RLDetectionModeSetDuty+0x80>)
}
 80093e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80093ec:	421a      	tst	r2, r3
      hAux = MC_DURATION;
 80093ee:	bf14      	ite	ne
 80093f0:	4660      	movne	r0, ip
 80093f2:	2000      	moveq	r0, #0
}
 80093f4:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 80093f6:	2200      	movs	r2, #0
}
 80093f8:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 80093fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8009400:	4770      	bx	lr
 8009402:	4770      	bx	lr
 8009404:	02000070 	.word	0x02000070

08009408 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009408:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 800940c:	8c02      	ldrh	r2, [r0, #32]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800940e:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009410:	4494      	add	ip, r2
 8009412:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8009416:	b430      	push	{r4, r5}
 8009418:	2500      	movs	r5, #0
 800941a:	f36c 050f 	bfi	r5, ip, #0, #16
 800941e:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009422:	b14b      	cbz	r3, 8009438 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 8009424:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009426:	2300      	movs	r3, #0
 8009428:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800942a:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 800942c:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009430:	8b01      	ldrh	r1, [r0, #24]
 8009432:	b29a      	uxth	r2, r3
 8009434:	4291      	cmp	r1, r2
 8009436:	d8f7      	bhi.n	8009428 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8009438:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800943a:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 800943c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8009440:	bc30      	pop	{r4, r5}
 8009442:	4770      	bx	lr

08009444 <RVBS_Init>:
{
 8009444:	b510      	push	{r4, lr}
 8009446:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8009448:	300c      	adds	r0, #12
 800944a:	f7fa f893 	bl	8003574 <RCM_RegisterRegConv>
 800944e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    RVBS_Clear(pHandle);
 8009452:	4620      	mov	r0, r4
 8009454:	f7ff ffd8 	bl	8009408 <RVBS_Clear>
}
 8009458:	bd10      	pop	{r4, pc}
 800945a:	bf00      	nop

0800945c <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800945c:	8b42      	ldrh	r2, [r0, #26]
 800945e:	8b81      	ldrh	r1, [r0, #28]
 8009460:	428a      	cmp	r2, r1
 8009462:	d00e      	beq.n	8009482 <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8009464:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8009468:	8c03      	ldrh	r3, [r0, #32]
 800946a:	4563      	cmp	r3, ip
 800946c:	d807      	bhi.n	800947e <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800946e:	7f83      	ldrb	r3, [r0, #30]
 8009470:	b98b      	cbnz	r3, 8009496 <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8009472:	4561      	cmp	r1, ip
 8009474:	d913      	bls.n	800949e <RVBS_CheckFaultState+0x42>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8009476:	2201      	movs	r2, #1
 8009478:	7782      	strb	r2, [r0, #30]
          fault = MC_NO_ERROR;
 800947a:	4618      	mov	r0, r3
 800947c:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800947e:	2004      	movs	r0, #4
 8009480:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009482:	88c3      	ldrh	r3, [r0, #6]
 8009484:	429a      	cmp	r2, r3
 8009486:	d30a      	bcc.n	800949e <RVBS_CheckFaultState+0x42>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8009488:	8c00      	ldrh	r0, [r0, #32]
 800948a:	4298      	cmp	r0, r3
 800948c:	bf94      	ite	ls
 800948e:	2000      	movls	r0, #0
 8009490:	2001      	movhi	r0, #1
 8009492:	0080      	lsls	r0, r0, #2
 8009494:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009496:	4562      	cmp	r2, ip
 8009498:	d303      	bcc.n	80094a2 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 800949a:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800949c:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 800949e:	2002      	movs	r0, #2
 80094a0:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 80094a2:	2300      	movs	r3, #0
 80094a4:	7783      	strb	r3, [r0, #30]
          fault = MC_OVER_VOLT;
 80094a6:	2002      	movs	r0, #2
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop

080094ac <RVBS_CalcAvVbus>:
{
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80094b0:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 80094b4:	f7fa f964 	bl	8003780 <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 80094b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094bc:	4298      	cmp	r0, r3
 80094be:	d024      	beq.n	800950a <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 80094c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094c2:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 80094c6:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80094ca:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 80094ce:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 80094d2:	d00d      	beq.n	80094f0 <RVBS_CalcAvVbus+0x44>
 80094d4:	3a01      	subs	r2, #1
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 80094dc:	3b02      	subs	r3, #2
      wtemp = 0u;
 80094de:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 80094e0:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80094e4:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 80094e6:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80094e8:	d1fa      	bne.n	80094e0 <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 80094ea:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80094ee:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80094f0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80094f4:	4575      	cmp	r5, lr
        pHandle->index++;
 80094f6:	bf34      	ite	cc
 80094f8:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 80094fa:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80094fc:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80094fe:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 8009500:	bf34      	ite	cc
 8009502:	f884 5029 	strbcc.w	r5, [r4, #41]	; 0x29
        pHandle->index = 0U;
 8009506:	f884 3029 	strbcs.w	r3, [r4, #41]	; 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800950a:	4620      	mov	r0, r4
 800950c:	f7ff ffa6 	bl	800945c <RVBS_CheckFaultState>
 8009510:	8120      	strh	r0, [r4, #8]
}
 8009512:	bd38      	pop	{r3, r4, r5, pc}

08009514 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8009514:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8009516:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8009518:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800951c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8009520:	6142      	str	r2, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8009522:	4770      	bx	lr

08009524 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 8009524:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8009528:	2901      	cmp	r1, #1
 800952a:	d90c      	bls.n	8009546 <REMNG_Calc+0x22>
{
 800952c:	b410      	push	{r4}
    {
      /* Increment/decrement the reference value. */
      current_ref += pHandle->IncDecAmount;
 800952e:	e9d0 4204 	ldrd	r4, r2, [r0, #16]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 8009532:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 8009534:	4423      	add	r3, r4
      pHandle->RampRemainingStep --;
 8009536:	60c1      	str	r1, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
 8009538:	6083      	str	r3, [r0, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800953a:	fb93 f2f2 	sdiv	r2, r3, r2
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 800953e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009542:	4610      	mov	r0, r2
 8009544:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 8009546:	d005      	beq.n	8009554 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8009548:	6942      	ldr	r2, [r0, #20]
    pHandle->Ext = current_ref;
 800954a:	6083      	str	r3, [r0, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800954c:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8009550:	4610      	mov	r0, r2
 8009552:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8009554:	6842      	ldr	r2, [r0, #4]
 8009556:	6943      	ldr	r3, [r0, #20]
      pHandle->RampRemainingStep = 0U;
 8009558:	2100      	movs	r1, #0
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800955a:	fb02 f303 	mul.w	r3, r2, r3
      pHandle->RampRemainingStep = 0U;
 800955e:	60c1      	str	r1, [r0, #12]
    pHandle->Ext = current_ref;
 8009560:	6083      	str	r3, [r0, #8]
}
 8009562:	4610      	mov	r0, r2
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop

08009568 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8009568:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 800956a:	fab0 f080 	clz	r0, r0
 800956e:	0940      	lsrs	r0, r0, #5
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop

08009574 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8009574:	2800      	cmp	r0, #0
 8009576:	bfb8      	it	lt
 8009578:	4240      	neglt	r0, r0
{
 800957a:	2301      	movs	r3, #1
  {
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800957c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009580:	e002      	b.n	8009588 <getScalingFactor+0x14>
  for (i = 1U; i < 32U; i++)
 8009582:	3301      	adds	r3, #1
 8009584:	2b20      	cmp	r3, #32
 8009586:	d007      	beq.n	8009598 <getScalingFactor+0x24>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8009588:	fa21 f203 	lsr.w	r2, r1, r3
    if (TargetAbs >= limit)
 800958c:	4290      	cmp	r0, r2
 800958e:	d3f8      	bcc.n	8009582 <getScalingFactor+0xe>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8009590:	3b01      	subs	r3, #1
 8009592:	2001      	movs	r0, #1
 8009594:	4098      	lsls	r0, r3
}
 8009596:	4770      	bx	lr
 8009598:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop

080095a0 <REMNG_ExecRamp>:
{
 80095a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a4:	4604      	mov	r4, r0
 80095a6:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80095a8:	6880      	ldr	r0, [r0, #8]
 80095aa:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 80095ac:	4615      	mov	r5, r2
 80095ae:	b962      	cbnz	r2, 80095ca <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 80095b0:	4608      	mov	r0, r1
 80095b2:	f7ff ffdf 	bl	8009574 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80095b6:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 80095ba:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80095bc:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 80095be:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80095c2:	60a6      	str	r6, [r4, #8]
}
 80095c4:	2001      	movs	r0, #1
 80095c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80095ca:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 80095ce:	eba1 0708 	sub.w	r7, r1, r8
 80095d2:	4638      	mov	r0, r7
 80095d4:	f7ff ffce 	bl	8009574 <getScalingFactor>
 80095d8:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 80095da:	4640      	mov	r0, r8
 80095dc:	f7ff ffca 	bl	8009574 <getScalingFactor>
 80095e0:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7ff ffc6 	bl	8009574 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 80095e8:	45ca      	cmp	sl, r9
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 80095ea:	4603      	mov	r3, r0
        if (wScalingFactor < wScalingFactor3)
 80095ec:	bf2c      	ite	cs
 80095ee:	4648      	movcs	r0, r9
 80095f0:	4650      	movcc	r0, sl
        if (wScalingFactor2 < wScalingFactor3)
 80095f2:	4298      	cmp	r0, r3
 80095f4:	bf28      	it	cs
 80095f6:	4618      	movcs	r0, r3
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 80095f8:	fb08 f300 	mul.w	r3, r8, r0
 80095fc:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 80095fe:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 8009600:	4a08      	ldr	r2, [pc, #32]	; (8009624 <REMNG_ExecRamp+0x84>)
      pHandle->ScalingFactor = wScalingFactorMin;
 8009602:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8009604:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 8009608:	fba2 2303 	umull	r2, r3, r2, r3
 800960c:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800960e:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8009610:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 8009614:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8009616:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 800961a:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 800961e:	2001      	movs	r0, #1
 8009620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009624:	10624dd3 	.word	0x10624dd3

08009628 <RUC_Init>:
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS,
						STO_Handle_t *pSNSL,
						PWMC_Handle_t *pPWM)
{
 8009628:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 800962a:	6681      	str	r1, [r0, #104]	; 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800962c:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 800962e:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
    pHandle->OTFSCLowside = false;
 8009632:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 8009636:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 8009638:	f8a0 c054 	strh.w	ip, [r0, #84]	; 0x54
    pHandle->pPWM = pPWM;
 800963c:	6743      	str	r3, [r0, #116]	; 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800963e:	b309      	cbz	r1, 8009684 <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009640:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8009642:	b323      	cbz	r3, 800968e <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009644:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8009646:	b32b      	cbz	r3, 8009694 <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8009648:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800964a:	b333      	cbz	r3, 800969a <RUC_Init+0x72>
 800964c:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 800964e:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8009652:	b1cb      	cbz	r3, 8009688 <RUC_Init+0x60>
 8009654:	2204      	movs	r2, #4
 8009656:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800965a:	8803      	ldrh	r3, [r0, #0]
 800965c:	4910      	ldr	r1, [pc, #64]	; (80096a0 <RUC_Init+0x78>)
 800965e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8009662:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009666:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800966a:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800966e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009672:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8009674:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009676:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 8009678:	f880 c048 	strb.w	ip, [r0, #72]	; 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800967c:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8009680:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 8009684:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8009688:	f10c 32ff 	add.w	r2, ip, #4294967295
 800968c:	e7e5      	b.n	800965a <RUC_Init+0x32>
      bPhase++;
 800968e:	f04f 0c02 	mov.w	ip, #2
 8009692:	e7f9      	b.n	8009688 <RUC_Init+0x60>
 8009694:	f04f 0c03 	mov.w	ip, #3
 8009698:	e7f6      	b.n	8009688 <RUC_Init+0x60>
 800969a:	f04f 0c04 	mov.w	ip, #4
 800969e:	e7f3      	b.n	8009688 <RUC_Init+0x60>
 80096a0:	10624dd3 	.word	0x10624dd3

080096a4 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 80096a8:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 80096aa:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 80096ae:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 80096b0:	2600      	movs	r6, #0
{
 80096b2:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 80096b4:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
    pHandle->bOTFRelCounter = 0U;
 80096b8:	f880 6053 	strb.w	r6, [r0, #83]	; 0x53
    pHandle->OTFSCLowside = false;
 80096bc:	f8a0 6054 	strh.w	r6, [r0, #84]	; 0x54

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 80096c0:	4638      	mov	r0, r7

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 80096c2:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 80096c4:	f000 fc76 	bl	8009fb4 <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 80096c8:	2104      	movs	r1, #4
 80096ca:	4640      	mov	r0, r8
 80096cc:	f000 f8fe 	bl	80098cc <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 80096d0:	8861      	ldrh	r1, [r4, #2]
 80096d2:	fb11 f105 	smulbb	r1, r1, r5
 80096d6:	b209      	sxth	r1, r1
 80096d8:	4638      	mov	r0, r7
 80096da:	f000 fd21 	bl	800a120 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 80096de:	4632      	mov	r2, r6
 80096e0:	4631      	mov	r1, r6
 80096e2:	4640      	mov	r0, r8
 80096e4:	f000 f8f6 	bl	80098d4 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 80096e8:	8a21      	ldrh	r1, [r4, #16]
 80096ea:	89a2      	ldrh	r2, [r4, #12]
 80096ec:	fb11 f105 	smulbb	r1, r1, r5
 80096f0:	b209      	sxth	r1, r1
 80096f2:	4640      	mov	r0, r8
 80096f4:	f000 f8ee 	bl	80098d4 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 80096f8:	89e1      	ldrh	r1, [r4, #14]
 80096fa:	89a2      	ldrh	r2, [r4, #12]
 80096fc:	fb11 f105 	smulbb	r1, r1, r5
 8009700:	b209      	sxth	r1, r1
 8009702:	4638      	mov	r0, r7
 8009704:	f000 fd14 	bl	800a130 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8009708:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800970a:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 800970c:	4a06      	ldr	r2, [pc, #24]	; (8009728 <RUC_Clear+0x84>)

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 800970e:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8009712:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 8009716:	fba2 2303 	umull	r2, r3, r2, r3
 800971a:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800971c:	6962      	ldr	r2, [r4, #20]
 800971e:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8009720:	3301      	adds	r3, #1
 8009722:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8009724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009728:	10624dd3 	.word	0x10624dd3

0800972c <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 800972c:	8883      	ldrh	r3, [r0, #4]
{
 800972e:	b510      	push	{r4, lr}
 8009730:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8009732:	bb43      	cbnz	r3, 8009786 <RUC_Exec+0x5a>

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8009734:	68a0      	ldr	r0, [r4, #8]
 8009736:	b328      	cbz	r0, 8009784 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed.*/
        /* Gives the next command to STC and VSS.*/
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8009738:	8881      	ldrh	r1, [r0, #4]
 800973a:	88e3      	ldrh	r3, [r4, #6]
 800973c:	8802      	ldrh	r2, [r0, #0]
 800973e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009740:	fb11 f103 	smulbb	r1, r1, r3
 8009744:	b209      	sxth	r1, r1
 8009746:	f000 f8c5 	bl	80098d4 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800974a:	68a3      	ldr	r3, [r4, #8]
 800974c:	88e0      	ldrh	r0, [r4, #6]
 800974e:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8009750:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8009752:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8009756:	b209      	sxth	r1, r1
 8009758:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800975a:	f000 fce9 	bl	800a130 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks.*/
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800975e:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009760:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8009762:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009764:	4a0b      	ldr	r2, [pc, #44]	; (8009794 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /*Set the next phases parameter pointer.*/
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8009766:	6889      	ldr	r1, [r1, #8]
 8009768:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800976a:	fb00 f303 	mul.w	r3, r0, r3
 800976e:	fba2 2303 	umull	r2, r3, r2, r3

        /*Increases the rev up stages counter.*/
        pHandle->bStageCnt++;
 8009772:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8009776:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8009778:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 800977a:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 800977c:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 800977e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  bool retVal = true;
 8009782:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8009784:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 8009786:	3b01      	subs	r3, #1
 8009788:	b29b      	uxth	r3, r3
 800978a:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 800978c:	2b00      	cmp	r3, #0
 800978e:	d0d1      	beq.n	8009734 <RUC_Exec+0x8>
  bool retVal = true;
 8009790:	2001      	movs	r0, #1
}
 8009792:	bd10      	pop	{r4, pc}
 8009794:	10624dd3 	.word	0x10624dd3

08009798 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8009798:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 800979c:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 80097a0:	4282      	cmp	r2, r0
 80097a2:	bf34      	ite	cc
 80097a4:	2000      	movcc	r0, #0
 80097a6:	2001      	movcs	r0, #1
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop

080097ac <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80097ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80097b0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80097b4:	f8d2 c002 	ldr.w	ip, [r2, #2]
 80097b8:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80097bc:	4618      	mov	r0, r3
 80097be:	8813      	ldrh	r3, [r2, #0]
 80097c0:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 80097c2:	2001      	movs	r0, #1
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop

080097c8 <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 80097c8:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop

080097d0 <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 80097d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80097d4:	0089      	lsls	r1, r1, #2
 80097d6:	f101 0308 	add.w	r3, r1, #8
 80097da:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80097dc:	4408      	add	r0, r1
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 80097de:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80097e2:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80097e6:	8983      	ldrh	r3, [r0, #12]
 80097e8:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 80097ea:	2001      	movs	r0, #1
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop

080097f0 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 80097f0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop

080097f8 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 80097f8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop

08009800 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8009800:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop

08009808 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8009808:	f9b1 3000 	ldrsh.w	r3, [r1]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800980c:	f8b0 c016 	ldrh.w	ip, [r0, #22]
{
 8009810:	b410      	push	{r4}
    if (*pMecSpeedUnit < 0)
 8009812:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8009814:	bfb8      	it	lt
 8009816:	425b      	neglt	r3, r3
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8009818:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800981a:	459c      	cmp	ip, r3
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800981c:	78c1      	ldrb	r1, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800981e:	7802      	ldrb	r2, [r0, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8009820:	8a84      	ldrh	r4, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009822:	d819      	bhi.n	8009858 <SPD_IsMecSpeedReliable+0x50>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8009824:	429c      	cmp	r4, r3
 8009826:	bf2c      	ite	cs
 8009828:	2400      	movcs	r4, #0
 800982a:	2401      	movcc	r4, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800982c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8009830:	f8b0 c018 	ldrh.w	ip, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 8009834:	2b00      	cmp	r3, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8009836:	bfb8      	it	lt
 8009838:	425b      	neglt	r3, r3
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 800983a:	b29b      	uxth	r3, r3
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800983c:	459c      	cmp	ip, r3
 800983e:	d300      	bcc.n	8009842 <SPD_IsMecSpeedReliable+0x3a>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8009840:	b164      	cbz	r4, 800985c <SPD_IsMecSpeedReliable+0x54>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8009842:	4291      	cmp	r1, r2
 8009844:	d901      	bls.n	800984a <SPD_IsMecSpeedReliable+0x42>
      {
        bSpeedErrorNumber++;
 8009846:	3201      	adds	r2, #1
 8009848:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800984a:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800984c:	1a50      	subs	r0, r2, r1
 800984e:	bf18      	it	ne
 8009850:	2001      	movne	r0, #1
 8009852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009856:	4770      	bx	lr
      SpeedError = true;
 8009858:	2401      	movs	r4, #1
 800985a:	e7e7      	b.n	800982c <SPD_IsMecSpeedReliable+0x24>
        bSpeedErrorNumber = 0u;
 800985c:	4291      	cmp	r1, r2
 800985e:	bf88      	it	hi
 8009860:	2200      	movhi	r2, #0
 8009862:	e7f2      	b.n	800984a <SPD_IsMecSpeedReliable+0x42>

08009864 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8009864:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8009868:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 800986c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8009870:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8009874:	b200      	sxth	r0, r0
 8009876:	4770      	bx	lr

08009878 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8009878:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 800987c:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800987e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 8009882:	6142      	str	r2, [r0, #20]
{
 8009884:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8009886:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 800988a:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800988c:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800988e:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8009892:	0409      	lsls	r1, r1, #16
 8009894:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8009898:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800989a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 800989e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80098a0:	6183      	str	r3, [r0, #24]
}
 80098a2:	4770      	bx	lr

080098a4 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 80098a4:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80098a6:	4770      	bx	lr

080098a8 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 80098a8:	6940      	ldr	r0, [r0, #20]
 80098aa:	4770      	bx	lr

080098ac <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 80098ac:	7803      	ldrb	r3, [r0, #0]
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d000      	beq.n	80098b4 <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80098b2:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 80098b4:	6900      	ldr	r0, [r0, #16]
 80098b6:	2100      	movs	r1, #0
 80098b8:	f7fe bd48 	b.w	800834c <PID_SetIntegralTerm>

080098bc <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 80098bc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop

080098c4 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 80098c4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop

080098cc <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80098cc:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 80098ce:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80098d0:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80098d2:	4770      	bx	lr

080098d4 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 80098d4:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80098d6:	7803      	ldrb	r3, [r0, #0]
 80098d8:	2b04      	cmp	r3, #4
{
 80098da:	4604      	mov	r4, r0
 80098dc:	460d      	mov	r5, r1
 80098de:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80098e0:	d01e      	beq.n	8009920 <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80098e2:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80098e4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80098e8:	4299      	cmp	r1, r3
 80098ea:	dd01      	ble.n	80098f0 <STC_ExecRamp+0x1c>
        allowedRange = false;
 80098ec:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80098f0:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80098f4:	428b      	cmp	r3, r1
 80098f6:	dcf9      	bgt.n	80098ec <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 80098f8:	8c23      	ldrh	r3, [r4, #32]
 80098fa:	4299      	cmp	r1, r3
 80098fc:	da03      	bge.n	8009906 <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 80098fe:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8009902:	428b      	cmp	r3, r1
 8009904:	dbf2      	blt.n	80098ec <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8009906:	b9ae      	cbnz	r6, 8009934 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8009908:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800990a:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 800990c:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 800990e:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8009912:	bf0c      	ite	eq
 8009914:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8009916:	60a5      	strne	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8009918:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 800991a:	61a3      	str	r3, [r4, #24]
 800991c:	2001      	movs	r0, #1
}
 800991e:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8009920:	f7ff ffd0 	bl	80098c4 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8009924:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009926:	429d      	cmp	r5, r3
 8009928:	dce0      	bgt.n	80098ec <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800992a:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800992e:	42ab      	cmp	r3, r5
 8009930:	dcdc      	bgt.n	80098ec <STC_ExecRamp+0x18>
 8009932:	e7e8      	b.n	8009906 <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8009934:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8009936:	4a08      	ldr	r2, [pc, #32]	; (8009958 <STC_ExecRamp+0x84>)
        pHandle->TargetFinal = hTargetFinal;
 8009938:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800993a:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 800993e:	fba2 2303 	umull	r2, r3, r2, r3
 8009942:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8009944:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8009946:	1a28      	subs	r0, r5, r0
 8009948:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 800994a:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800994c:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8009950:	61a0      	str	r0, [r4, #24]
 8009952:	2001      	movs	r0, #1
}
 8009954:	bd70      	pop	{r4, r5, r6, pc}
 8009956:	bf00      	nop
 8009958:	10624dd3 	.word	0x10624dd3

0800995c <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800995c:	2300      	movs	r3, #0
 800995e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8009960:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009962:	4770      	bx	lr

08009964 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8009964:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 8009966:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800996a:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 800996c:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 800996e:	2a04      	cmp	r2, #4
 8009970:	bf08      	it	eq
 8009972:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 8009974:	2b01      	cmp	r3, #1
{
 8009976:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 8009978:	d908      	bls.n	800998c <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 800997a:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800997c:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800997e:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8009980:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8009982:	2a03      	cmp	r2, #3
 8009984:	d00b      	beq.n	800999e <STC_CalcTorqueReference+0x3a>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8009986:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8009988:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800998a:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800998c:	d1f9      	bne.n	8009982 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800998e:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8009992:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009994:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009996:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 800999a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800999c:	d1f3      	bne.n	8009986 <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800999e:	6960      	ldr	r0, [r4, #20]
 80099a0:	f7ff ff2a 	bl	80097f8 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 80099a4:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80099a8:	b209      	sxth	r1, r1
 80099aa:	6920      	ldr	r0, [r4, #16]
 80099ac:	f7fe fd00 	bl	80083b0 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 80099b0:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80099b2:	0405      	lsls	r5, r0, #16
 80099b4:	60a5      	str	r5, [r4, #8]
}
 80099b6:	bd38      	pop	{r3, r4, r5, pc}

080099b8 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 80099b8:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop

080099c0 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 80099c0:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 80099c4:	2200      	movs	r2, #0
 80099c6:	b299      	uxth	r1, r3
 80099c8:	f361 020f 	bfi	r2, r1, #0, #16
 80099cc:	0c1b      	lsrs	r3, r3, #16
 80099ce:	f363 421f 	bfi	r2, r3, #16, #16
{
 80099d2:	b082      	sub	sp, #8
}
 80099d4:	4610      	mov	r0, r2
 80099d6:	b002      	add	sp, #8
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop

080099dc <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 80099dc:	b510      	push	{r4, lr}
 80099de:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 80099e0:	6940      	ldr	r0, [r0, #20]
 80099e2:	f7ff ff09 	bl	80097f8 <SPD_GetAvrgMecSpeedUnit>
 80099e6:	0400      	lsls	r0, r0, #16
 80099e8:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80099ea:	bd10      	pop	{r4, pc}

080099ec <STO_PLL_CalcElAngle>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 80099ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 80099f0:	4604      	mov	r4, r0
{
 80099f2:	b089      	sub	sp, #36	; 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 80099f4:	2800      	cmp	r0, #0
 80099f6:	f000 80cf 	beq.w	8009b98 <STO_PLL_CalcElAngle+0x1ac>
 80099fa:	2900      	cmp	r1, #0
 80099fc:	f000 80cf 	beq.w	8009b9e <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8009a00:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8009a04:	6e87      	ldr	r7, [r0, #104]	; 0x68
 8009a06:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8009a0a:	429f      	cmp	r7, r3
 8009a0c:	f340 80d1 	ble.w	8009bb2 <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8009a10:	6683      	str	r3, [r0, #104]	; 0x68
 8009a12:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009a14:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009a18:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009a1a:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009a1e:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8009a20:	9201      	str	r2, [sp, #4]
 8009a22:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8009a26:	f2c0 80c1 	blt.w	8009bac <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8009a2a:	425b      	negs	r3, r3
 8009a2c:	429e      	cmp	r6, r3
 8009a2e:	f340 80bd 	ble.w	8009bac <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009a32:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8009a36:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
 8009a3a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8009a3e:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009a42:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8009a44:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009a48:	f340 80b9 	ble.w	8009bbe <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8009a4c:	6623      	str	r3, [r4, #96]	; 0x60
 8009a4e:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8009a50:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
 8009a54:	4543      	cmp	r3, r8
 8009a56:	f2c0 80a6 	blt.w	8009ba6 <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8009a5a:	425b      	negs	r3, r3
 8009a5c:	4598      	cmp	r8, r3
 8009a5e:	f340 80a2 	ble.w	8009ba6 <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009a62:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8009a64:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009a68:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009a6a:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8009a6e:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009a72:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8009a76:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009a7a:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8009a7e:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009a82:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8009a84:	f8a4 e070 	strh.w	lr, [r4, #112]	; 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8009a88:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8009a8c:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009a90:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009a92:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009a94:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009a96:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009a98:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009a9a:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8009a9e:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009aa2:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8009aa6:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8009aaa:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009aae:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8009ab0:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
    wIalfa_est_Next += wAux;
 8009ab4:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 8009ab6:	f8a4 c072 	strh.w	ip, [r4, #114]	; 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8009aba:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8009abe:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8009ac2:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8009ac4:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	; 0x28
    wIalfa_est_Next += wAux;
 8009ac8:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 8009acc:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8009ad0:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 8009ad4:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 8009ad6:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 8009ada:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8009ade:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009ae2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    wAux = wAux * pHandle->hC6;
 8009ae4:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	; 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8009ae8:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8009aec:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8009af0:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
    wIalfa_est_Next -= wAux;
 8009af4:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 8009af8:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009afc:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009b00:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8009b04:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 8009b08:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 8009b0c:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 8009b10:	f994 3124 	ldrsb.w	r3, [r4, #292]	; 0x124
    wAux = wAux * pHandle->hC6;
 8009b14:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 8009b18:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d154      	bne.n	8009bca <STO_PLL_CalcElAngle+0x1de>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8009b26:	bfa8      	it	ge
 8009b28:	f04f 0a01 	movge.w	sl, #1
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8009b2c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8009b30:	f7f7 fdea 	bl	8001708 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8009b34:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8009b36:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8009b3a:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8009b3e:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8009b40:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8009b44:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8009b48:	f340 31cf 	sbfx	r1, r0, #15, #16
 8009b4c:	f345 35cf 	sbfx	r5, r5, #15, #16
 8009b50:	1a69      	subs	r1, r5, r1
 8009b52:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009b56:	f7fe fc2b 	bl	80083b0 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8009b5a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8009b5e:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8009b62:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8009b64:	3301      	adds	r3, #1
 8009b66:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8009b68:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8009b6a:	bf12      	itee	ne
 8009b6c:	461a      	movne	r2, r3
 8009b6e:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 8009b70:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8009b72:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8009b76:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8009b7a:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8009b7e:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8009b82:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009b86:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 8009b88:	6627      	str	r7, [r4, #96]	; 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009b8a:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 8009b8c:	e9c4 6919 	strd	r6, r9, [r4, #100]	; 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009b90:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8009b92:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 8009b96:	80a0      	strh	r0, [r4, #4]
}
 8009b98:	b009      	add	sp, #36	; 0x24
 8009b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 8009b9e:	4608      	mov	r0, r1
}
 8009ba0:	b009      	add	sp, #36	; 0x24
 8009ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8009ba6:	6663      	str	r3, [r4, #100]	; 0x64
 8009ba8:	4698      	mov	r8, r3
 8009baa:	e75a      	b.n	8009a62 <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 8009bac:	66e3      	str	r3, [r4, #108]	; 0x6c
 8009bae:	461e      	mov	r6, r3
 8009bb0:	e73f      	b.n	8009a32 <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8009bb2:	425a      	negs	r2, r3
 8009bb4:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 8009bb6:	bfdc      	itt	le
 8009bb8:	6682      	strle	r2, [r0, #104]	; 0x68
 8009bba:	4617      	movle	r7, r2
 8009bbc:	e72a      	b.n	8009a14 <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8009bbe:	425a      	negs	r2, r3
 8009bc0:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8009bc2:	bfdc      	itt	le
 8009bc4:	6622      	strle	r2, [r4, #96]	; 0x60
 8009bc6:	4691      	movle	r9, r2
 8009bc8:	e742      	b.n	8009a50 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8009bca:	fa1f fa83 	uxth.w	sl, r3
 8009bce:	e7ad      	b.n	8009b2c <STO_PLL_CalcElAngle+0x140>

08009bd0 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8009bd0:	b570      	push	{r4, r5, r6, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8009bd2:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009bd6:	2d00      	cmp	r5, #0
 8009bd8:	f000 809c 	beq.w	8009d14 <STO_PLL_CalcAvrgMecSpeedUnit+0x144>
 8009bdc:	1e6b      	subs	r3, r5, #1
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	f100 0472 	add.w	r4, r0, #114	; 0x72
 8009be4:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 8009be8:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8009bec:	2200      	movs	r2, #0
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009bee:	4623      	mov	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8009bf0:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009bf4:	459c      	cmp	ip, r3
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8009bf6:	4472      	add	r2, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009bf8:	d1fa      	bne.n	8009bf0 <STO_PLL_CalcAvrgMecSpeedUnit+0x20>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8009bfa:	fb92 fef5 	sdiv	lr, r2, r5
 8009bfe:	2200      	movs	r2, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8009c00:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 8009c04:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009c08:	45a4      	cmp	ip, r4
      wAvrQuadraticError += wError;
 8009c0a:	fb03 2203 	mla	r2, r3, r3, r2
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009c0e:	d1f7      	bne.n	8009c00 <STO_PLL_CalcAvrgMecSpeedUnit+0x30>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8009c10:	fbb2 f2f5 	udiv	r2, r2, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8009c14:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8009c18:	17de      	asrs	r6, r3, #31
 8009c1a:	f8b0 c110 	ldrh.w	ip, [r0, #272]	; 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009c1e:	8b45      	ldrh	r5, [r0, #26]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8009c20:	fbac 4303 	umull	r4, r3, ip, r3
 8009c24:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 8009c28:	09e4      	lsrs	r4, r4, #7
 8009c2a:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8009c2e:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8009c30:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009c34:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009c38:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8009c3a:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009c3e:	bfd8      	it	le
 8009c40:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8009c44:	69c5      	ldr	r5, [r0, #28]
 8009c46:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009c4a:	bfc8      	it	gt
 8009c4c:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009c50:	7845      	ldrb	r5, [r0, #1]
 8009c52:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 8009c56:	b21d      	sxth	r5, r3
 8009c58:	800d      	strh	r5, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8009c5a:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8009c5c:	f880 c0f5 	strb.w	ip, [r0, #245]	; 0xf5
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8009c60:	b9ae      	cbnz	r6, 8009c8e <STO_PLL_CalcAvrgMecSpeedUnit+0xbe>
    if (false == pHandle->IsAlgorithmConverged)
 8009c62:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 8009c66:	b353      	cbz	r3, 8009cbe <STO_PLL_CalcAvrgMecSpeedUnit+0xee>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8009c68:	4294      	cmp	r4, r2
 8009c6a:	dc25      	bgt.n	8009cb8 <STO_PLL_CalcAvrgMecSpeedUnit+0xe8>
        pHandle->ReliabilityCounter++;
 8009c6c:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8009c70:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
        pHandle->ReliabilityCounter++;
 8009c74:	3301      	adds	r3, #1
 8009c76:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8009c78:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 8009c7a:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8009c7e:	d81e      	bhi.n	8009cbe <STO_PLL_CalcAvrgMecSpeedUnit+0xee>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009c80:	78c2      	ldrb	r2, [r0, #3]
 8009c82:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	bd70      	pop	{r4, r5, r6, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8009c8e:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8009c90:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8009c94:	bfb8      	it	lt
 8009c96:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8009c98:	429d      	cmp	r5, r3
 8009c9a:	dc14      	bgt.n	8009cc6 <STO_PLL_CalcAvrgMecSpeedUnit+0xf6>
    bool bIs_Bemf_Consistent = false;
 8009c9c:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 8009c9e:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 8009ca0:	462e      	mov	r6, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8009ca2:	e9c0 633f 	strd	r6, r3, [r0, #252]	; 0xfc
    if (false == pHandle->IsAlgorithmConverged)
 8009ca6:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8009caa:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 8009cae:	b133      	cbz	r3, 8009cbe <STO_PLL_CalcAvrgMecSpeedUnit+0xee>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8009cb0:	4294      	cmp	r4, r2
 8009cb2:	dddb      	ble.n	8009c6c <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 8009cb4:	2d00      	cmp	r5, #0
 8009cb6:	d0d9      	beq.n	8009c6c <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
        pHandle->ReliabilityCounter = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 8009cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8009cc2:	f7ff bda1 	b.w	8009808 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8009cc6:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	; 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8009cca:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 8009cce:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8009cd2:	f890 5119 	ldrb.w	r5, [r0, #281]	; 0x119
        wObsBemfSq += wObsBemf * wObsBemf;
 8009cd6:	fb06 c606 	mla	r6, r6, r6, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8009cda:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8009cde:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8009ce2:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8009ce6:	fb03 f505 	mul.w	r5, r3, r5
 8009cea:	2d00      	cmp	r5, #0
 8009cec:	bfb8      	it	lt
 8009cee:	353f      	addlt	r5, #63	; 0x3f
 8009cf0:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8009cf2:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	461d      	mov	r5, r3
 8009cfa:	f890 c118 	ldrb.w	ip, [r0, #280]	; 0x118
 8009cfe:	bfb8      	it	lt
 8009d00:	f103 053f 	addlt.w	r5, r3, #63	; 0x3f
 8009d04:	11ad      	asrs	r5, r5, #6
 8009d06:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 8009d0a:	42ae      	cmp	r6, r5
 8009d0c:	bfd4      	ite	le
 8009d0e:	2500      	movle	r5, #0
 8009d10:	2501      	movgt	r5, #1
 8009d12:	e7c6      	b.n	8009ca2 <STO_PLL_CalcAvrgMecSpeedUnit+0xd2>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8009d14:	462a      	mov	r2, r5
 8009d16:	462b      	mov	r3, r5
 8009d18:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8009d1a:	46ae      	mov	lr, r5
 8009d1c:	e77d      	b.n	8009c1a <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 8009d1e:	bf00      	nop

08009d20 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8009d20:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8009d24:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8009d28:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8009d2c:	1acb      	subs	r3, r1, r3
 8009d2e:	b29b      	uxth	r3, r3
{
 8009d30:	b510      	push	{r4, lr}
    int32_t wSum = pHandle->DppBufferSum;
 8009d32:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    if (0 == hBufferSizeDiff)
 8009d36:	b973      	cbnz	r3, 8009d56 <STO_PLL_CalcAvrgElSpeedDpp+0x36>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009d38:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009d3c:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
 8009d40:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8009d44:	4423      	add	r3, r4
 8009d46:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8009d48:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
    pHandle->DppBufferSum = wSum;
 8009d4c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8009d50:	4113      	asrs	r3, r2
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8009d52:	81c3      	strh	r3, [r0, #14]
}
 8009d54:	bd10      	pop	{r4, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8009d56:	4413      	add	r3, r2
 8009d58:	fa0f fc83 	sxth.w	ip, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8009d5c:	4561      	cmp	r1, ip
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8009d5e:	b29b      	uxth	r3, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8009d60:	dc05      	bgt.n	8009d6e <STO_PLL_CalcAvrgElSpeedDpp+0x4e>
 8009d62:	fa1f fe81 	uxth.w	lr, r1
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8009d66:	eba3 030e 	sub.w	r3, r3, lr
 8009d6a:	fa0f fc83 	sxth.w	ip, r3
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8009d6e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009d72:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 8009d76:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8009d7a:	f9bc 2074 	ldrsh.w	r2, [ip, #116]	; 0x74
 8009d7e:	4423      	add	r3, r4
 8009d80:	1a9b      	subs	r3, r3, r2
 8009d82:	e7e1      	b.n	8009d48 <STO_PLL_CalcAvrgElSpeedDpp+0x28>

08009d84 <STO_PLL_Clear>:
{
 8009d84:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8009d86:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 8009d8a:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 8009d8c:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 8009d90:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 8009d94:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 8009d98:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 8009d9a:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 8009d9c:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 8009d9e:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    pHandle->IsAlgorithmConverged = false;
 8009da2:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 8009da6:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    pHandle->ForceConvergency = false;
 8009daa:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 8009dae:	b11a      	cbz	r2, 8009db8 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 8009db0:	0052      	lsls	r2, r2, #1
 8009db2:	3074      	adds	r0, #116	; 0x74
 8009db4:	f000 fa16 	bl	800a1e4 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 8009db8:	2100      	movs	r1, #0
 8009dba:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8009dbe:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8009dc2:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 8009dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8009dca:	f7fe babf 	b.w	800834c <PID_SetIntegralTerm>
 8009dce:	bf00      	nop

08009dd0 <STO_PLL_Init>:
{
 8009dd0:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8009dd2:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8009dd6:	4b19      	ldr	r3, [pc, #100]	; (8009e3c <STO_PLL_Init+0x6c>)
 8009dd8:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	; 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8009ddc:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    pHandle->EnableDualCheck = true;
 8009de0:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 8009de2:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8009de4:	fb93 f3fe 	sdiv	r3, r3, lr
 8009de8:	b21b      	sxth	r3, r3
{
 8009dea:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8009dec:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
    pHandle->F3POW2 = 0U;
 8009df0:	8641      	strh	r1, [r0, #50]	; 0x32
    while (htempk != 0)
 8009df2:	b30b      	cbz	r3, 8009e38 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 8009df4:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 8009df6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 8009dfa:	f102 0c01 	add.w	ip, r2, #1
 8009dfe:	105b      	asrs	r3, r3, #1
 8009e00:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 8009e02:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 8009e06:	fa1f f28c 	uxth.w	r2, ip
 8009e0a:	d1f4      	bne.n	8009df6 <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8009e0c:	b20a      	sxth	r2, r1
 8009e0e:	8660      	strh	r0, [r4, #50]	; 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8009e10:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8009e14:	480a      	ldr	r0, [pc, #40]	; (8009e40 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 8009e16:	8622      	strh	r2, [r4, #48]	; 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8009e18:	17cb      	asrs	r3, r1, #31
 8009e1a:	fb80 0101 	smull	r0, r1, r0, r1
 8009e1e:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8009e22:	8563      	strh	r3, [r4, #42]	; 0x2a
    STO_PLL_Clear(pHandle);
 8009e24:	4620      	mov	r0, r4
 8009e26:	f7ff ffad 	bl	8009d84 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 8009e2a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009e2e:	f7fe fa79 	bl	8008324 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	8263      	strh	r3, [r4, #18]
}
 8009e36:	bd10      	pop	{r4, pc}
 8009e38:	4671      	mov	r1, lr
 8009e3a:	e7eb      	b.n	8009e14 <STO_PLL_Init+0x44>
 8009e3c:	000fea5e 	.word	0x000fea5e
 8009e40:	06488dc5 	.word	0x06488dc5

08009e44 <STO_PLL_IsObserverConverged>:
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 8009e44:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
{
 8009e48:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 8009e4a:	b112      	cbz	r2, 8009e52 <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009e4c:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8009e50:	800a      	strh	r2, [r1, #0]
    }

    if (true == pHandle->ForceConvergency)
 8009e52:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 8009e56:	b128      	cbz	r0, 8009e64 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8009e58:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009e5a:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8009e5c:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009e60:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8009e62:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009e64:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009e68:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 8009e6c:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009e6e:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 8009e72:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009e76:	4614      	mov	r4, r2
      if (wtemp > 0)
 8009e78:	dd38      	ble.n	8009eec <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 8009e7a:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8009e7e:	bfbc      	itt	lt
 8009e80:	f1cc 0c00 	rsblt	ip, ip, #0
 8009e84:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 8009e88:	2a00      	cmp	r2, #0
 8009e8a:	db34      	blt.n	8009ef6 <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 8009e8c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009e90:	f893 e112 	ldrb.w	lr, [r3, #274]	; 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009e94:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
        if (true == pHandle->IsSpeedReliable)
 8009e98:	b349      	cbz	r1, 8009eee <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 8009e9a:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 8009e9e:	fa1f f18c 	uxth.w	r1, ip
 8009ea2:	428d      	cmp	r5, r1
 8009ea4:	d223      	bcs.n	8009eee <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009ea6:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	bfb8      	it	lt
 8009eae:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 8009eb0:	f342 120f 	sbfx	r2, r2, #4, #16
 8009eb4:	4594      	cmp	ip, r2
 8009eb6:	db1a      	blt.n	8009eee <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009eb8:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 8009ebc:	f1be 0f00 	cmp.w	lr, #0
 8009ec0:	bfb8      	it	lt
 8009ec2:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 8009ec6:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 8009eca:	45f4      	cmp	ip, lr
 8009ecc:	dc0f      	bgt.n	8009eee <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 8009ece:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009ed2:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
                pHandle->ConsistencyCounter++;
 8009ed6:	3201      	adds	r2, #1
 8009ed8:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009eda:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 8009edc:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009ee0:	d804      	bhi.n	8009eec <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 8009ee2:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009ee4:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8009ee6:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009eea:	701a      	strb	r2, [r3, #0]
}
 8009eec:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
}
 8009ef4:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 8009ef6:	4252      	negs	r2, r2
 8009ef8:	b212      	sxth	r2, r2
 8009efa:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 8009efc:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009f00:	f893 e112 	ldrb.w	lr, [r3, #274]	; 0x112
 8009f04:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009f06:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
        if (true == pHandle->IsSpeedReliable)
 8009f0a:	2900      	cmp	r1, #0
 8009f0c:	d0ef      	beq.n	8009eee <STO_PLL_IsObserverConverged+0xaa>
 8009f0e:	e7c4      	b.n	8009e9a <STO_PLL_IsObserverConverged+0x56>

08009f10 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 8009f10:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8009f12:	2200      	movs	r2, #0
 8009f14:	b299      	uxth	r1, r3
 8009f16:	f361 020f 	bfi	r2, r1, #0, #16
 8009f1a:	0c1b      	lsrs	r3, r3, #16
 8009f1c:	f363 421f 	bfi	r2, r3, #16, #16
{
 8009f20:	b082      	sub	sp, #8
}
 8009f22:	4610      	mov	r0, r2
 8009f24:	b002      	add	sp, #8
 8009f26:	4770      	bx	lr

08009f28 <STO_PLL_GetEstimatedCurrent>:
  iaux.alpha = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8009f28:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8009f2c:	f8b0 c11c 	ldrh.w	ip, [r0, #284]	; 0x11c
 8009f30:	fa42 f20c 	asr.w	r2, r2, ip
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8009f34:	fa43 f30c 	asr.w	r3, r3, ip
 8009f38:	b292      	uxth	r2, r2
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	f362 010f 	bfi	r1, r2, #0, #16
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	f363 411f 	bfi	r1, r3, #16, #16
{
 8009f46:	b082      	sub	sp, #8
}
 8009f48:	4608      	mov	r0, r1
 8009f4a:	b002      	add	sp, #8
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop

08009f50 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8009f50:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8009f54:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 8009f56:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8009f5a:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop

08009f60 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 8009f60:	8441      	strh	r1, [r0, #34]	; 0x22
    pHandle->hC4 = hhC2;
 8009f62:	84c2      	strh	r2, [r0, #38]	; 0x26
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop

08009f68 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 8009f68:	6800      	ldr	r0, [r0, #0]
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	3034      	adds	r0, #52	; 0x34
 8009f6e:	f7fe b9ed 	b.w	800834c <PID_SetIntegralTerm>
 8009f72:	bf00      	nop

08009f74 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8009f74:	2100      	movs	r1, #0
 8009f76:	3034      	adds	r0, #52	; 0x34
 8009f78:	f7fe b9e8 	b.w	800834c <PID_SetIntegralTerm>

08009f7c <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 8009f7c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop

08009f84 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 8009f84:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop

08009f8c <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 8009f8c:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 8009f8e:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 8009f92:	4770      	bx	lr

08009f94 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 8009f94:	6803      	ldr	r3, [r0, #0]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop

08009fa0 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 8009fa0:	6803      	ldr	r3, [r0, #0]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop

08009fac <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 8009fac:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop

08009fb4 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8009fb4:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009fb6:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8009fb8:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 8009fba:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8009fbe:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8009fc0:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8009fc2:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8009fc4:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 8009fc6:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009fc8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 8009fca:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop

08009fd0 <VSS_Init>:
{
 8009fd0:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8009fd2:	f7ff ffef 	bl	8009fb4 <VSS_Clear>
}
 8009fd6:	bd08      	pop	{r3, pc}

08009fd8 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 8009fd8:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
{
 8009fdc:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 8009fde:	b11a      	cbz	r2, 8009fe8 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8009fe0:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 8009fe4:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 8009fe6:	4770      	bx	lr
{
 8009fe8:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8009fea:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8009fee:	8e00      	ldrh	r0, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8009ff0:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 8009ff2:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8009ff6:	785a      	ldrb	r2, [r3, #1]
 8009ff8:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8009ffc:	4460      	add	r0, ip
 8009ffe:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a002:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800a004:	b200      	sxth	r0, r0
 800a006:	8618      	strh	r0, [r3, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800a008:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800a00a:	b1fc      	cbz	r4, 800a04c <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 800a00c:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800a010:	b1f2      	cbz	r2, 800a050 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800a012:	3a01      	subs	r2, #1
 800a014:	b212      	sxth	r2, r2
 800a016:	85da      	strh	r2, [r3, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800a018:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800a01c:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800a01e:	db26      	blt.n	800a06e <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800a020:	eba1 0e0e 	sub.w	lr, r1, lr
 800a024:	fa0f fe8e 	sxth.w	lr, lr
 800a028:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800a02a:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	; 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800a02e:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800a032:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800a036:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800a03a:	fb12 f205 	smulbb	r2, r2, r5
 800a03e:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800a040:	db0e      	blt.n	800a060 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800a042:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800a044:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800a046:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800a04a:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 800a04c:	8098      	strh	r0, [r3, #4]
}
 800a04e:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800a050:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800a054:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800a056:	2401      	movs	r4, #1
 800a058:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800a05c:	8098      	strh	r0, [r3, #4]
}
 800a05e:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800a060:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
 800a064:	2c00      	cmp	r4, #0
 800a066:	d0f1      	beq.n	800a04c <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800a068:	440a      	add	r2, r1
 800a06a:	b210      	sxth	r0, r2
 800a06c:	e7ee      	b.n	800a04c <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800a06e:	ebae 0e01 	sub.w	lr, lr, r1
 800a072:	fa0f fe8e 	sxth.w	lr, lr
 800a076:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800a07a:	e7d6      	b.n	800a02a <VSS_CalcElAngle+0x52>

0800a07c <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800a07c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d923      	bls.n	800a0ca <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800a082:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a084:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a086:	6a04      	ldr	r4, [r0, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a088:	8b43      	ldrh	r3, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a08a:	4422      	add	r2, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800a08c:	ea4f 4c22 	mov.w	ip, r2, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a090:	69c4      	ldr	r4, [r0, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800a092:	6242      	str	r2, [r0, #36]	; 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a094:	fb0c f303 	mul.w	r3, ip, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a098:	7842      	ldrb	r2, [r0, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800a09a:	f8a0 c00e 	strh.w	ip, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a09e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a0a2:	fb04 f202 	mul.w	r2, r4, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800a0a6:	005b      	lsls	r3, r3, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800a0a8:	fb93 f3f2 	sdiv	r3, r3, r2
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800a0ac:	b21b      	sxth	r3, r3
 800a0ae:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800a0b0:	8d02      	ldrh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800a0b2:	8183      	strh	r3, [r0, #12]
      pHandle->hRemainingStep--;
 800a0b4:	1e53      	subs	r3, r2, #1
 800a0b6:	8503      	strh	r3, [r0, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800a0b8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800a0bc:	b983      	cbnz	r3, 800a0e0 <VSS_CalcAvrgMecSpeedUnit+0x64>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800a0be:	78c2      	ldrb	r2, [r0, #3]
 800a0c0:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 800a0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800a0ca:	d00d      	beq.n	800a0e8 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800a0cc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800a0d0:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800a0d2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800a0d6:	bb03      	cbnz	r3, 800a11a <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800a0d8:	78c2      	ldrb	r2, [r0, #3]
 800a0da:	7002      	strb	r2, [r0, #0]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	4770      	bx	lr
 800a0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800a0e4:	f7ff bb90 	b.w	8009808 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800a0e8:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 800a0ec:	f8a1 c000 	strh.w	ip, [r1]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a0f0:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a0f2:	69c2      	ldr	r2, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800a0f4:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a0f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a0fc:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a0fe:	fb02 f20c 	mul.w	r2, r2, ip
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a102:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a106:	7843      	ldrb	r3, [r0, #1]
 800a108:	fb13 f302 	smulbb	r3, r3, r2
 800a10c:	81c3      	strh	r3, [r0, #14]
    if (false == pHandle->bTransitionEnded)
 800a10e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
      pHandle->hRemainingStep = 0U;
 800a112:	2200      	movs	r2, #0
 800a114:	8502      	strh	r2, [r0, #40]	; 0x28
    if (false == pHandle->bTransitionEnded)
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0de      	beq.n	800a0d8 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800a11a:	f7ff bb75 	b.w	8009808 <SPD_IsMecSpeedReliable>
 800a11e:	bf00      	nop

0800a120 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a120:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800a122:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a124:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 800a128:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a12a:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop

0800a130 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800a130:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a134:	b99b      	cbnz	r3, 800a15e <VSS_SetMecAcceleration+0x2e>
{
 800a136:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 800a138:	b992      	cbnz	r2, 800a160 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a13a:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a13c:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800a13e:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a140:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a144:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a148:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800a14a:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a14e:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 800a152:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a154:	fb1c f303 	smulbb	r3, ip, r3
 800a158:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a15a:	8541      	strh	r1, [r0, #42]	; 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a15c:	bd10      	pop	{r4, pc}
 800a15e:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800a160:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 800a162:	4c16      	ldr	r4, [pc, #88]	; (800a1bc <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a164:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800a168:	fb02 f303 	mul.w	r3, r2, r3
 800a16c:	fba4 4303 	umull	r4, r3, r4, r3
 800a170:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800a174:	3301      	adds	r3, #1
 800a176:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 800a178:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 800a17a:	b923      	cbnz	r3, 800a186 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a17c:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a180:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a182:	6243      	str	r3, [r0, #36]	; 0x24
}
 800a184:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a186:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a188:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a18a:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a18c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a190:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a194:	69c2      	ldr	r2, [r0, #28]
 800a196:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a19a:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a19e:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800a1a2:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800a1a6:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800a1a8:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800a1ac:	fb04 f303 	mul.w	r3, r4, r3
 800a1b0:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a1b2:	ea4f 430c 	mov.w	r3, ip, lsl #16
 800a1b6:	6243      	str	r3, [r0, #36]	; 0x24
 800a1b8:	e7e4      	b.n	800a184 <VSS_SetMecAcceleration+0x54>
 800a1ba:	bf00      	nop
 800a1bc:	10624dd3 	.word	0x10624dd3

0800a1c0 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800a1c0:	b151      	cbz	r1, 800a1d8 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800a1c2:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
      pHandle->bTransitionStarted = true;
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
      if (0 == pHandle->hTransitionSteps)
 800a1cc:	b923      	cbnz	r3, 800a1d8 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800a1ce:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800a1d2:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800a1d4:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800a1d6:	4770      	bx	lr
  bool bAux = true;
 800a1d8:	2001      	movs	r0, #1
 800a1da:	4770      	bx	lr

0800a1dc <VSS_TransitionEnded>:
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 800a1dc:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop

0800a1e4 <memset>:
 800a1e4:	4402      	add	r2, r0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d100      	bne.n	800a1ee <memset+0xa>
 800a1ec:	4770      	bx	lr
 800a1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a1f2:	e7f9      	b.n	800a1e8 <memset+0x4>

0800a1f4 <__libc_init_array>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	4d0d      	ldr	r5, [pc, #52]	; (800a22c <__libc_init_array+0x38>)
 800a1f8:	4c0d      	ldr	r4, [pc, #52]	; (800a230 <__libc_init_array+0x3c>)
 800a1fa:	1b64      	subs	r4, r4, r5
 800a1fc:	10a4      	asrs	r4, r4, #2
 800a1fe:	2600      	movs	r6, #0
 800a200:	42a6      	cmp	r6, r4
 800a202:	d109      	bne.n	800a218 <__libc_init_array+0x24>
 800a204:	4d0b      	ldr	r5, [pc, #44]	; (800a234 <__libc_init_array+0x40>)
 800a206:	4c0c      	ldr	r4, [pc, #48]	; (800a238 <__libc_init_array+0x44>)
 800a208:	f000 f826 	bl	800a258 <_init>
 800a20c:	1b64      	subs	r4, r4, r5
 800a20e:	10a4      	asrs	r4, r4, #2
 800a210:	2600      	movs	r6, #0
 800a212:	42a6      	cmp	r6, r4
 800a214:	d105      	bne.n	800a222 <__libc_init_array+0x2e>
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	f855 3b04 	ldr.w	r3, [r5], #4
 800a21c:	4798      	blx	r3
 800a21e:	3601      	adds	r6, #1
 800a220:	e7ee      	b.n	800a200 <__libc_init_array+0xc>
 800a222:	f855 3b04 	ldr.w	r3, [r5], #4
 800a226:	4798      	blx	r3
 800a228:	3601      	adds	r6, #1
 800a22a:	e7f2      	b.n	800a212 <__libc_init_array+0x1e>
 800a22c:	0800a700 	.word	0x0800a700
 800a230:	0800a700 	.word	0x0800a700
 800a234:	0800a700 	.word	0x0800a700
 800a238:	0800a704 	.word	0x0800a704

0800a23c <memcpy>:
 800a23c:	440a      	add	r2, r1
 800a23e:	4291      	cmp	r1, r2
 800a240:	f100 33ff 	add.w	r3, r0, #4294967295
 800a244:	d100      	bne.n	800a248 <memcpy+0xc>
 800a246:	4770      	bx	lr
 800a248:	b510      	push	{r4, lr}
 800a24a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a24e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a252:	4291      	cmp	r1, r2
 800a254:	d1f9      	bne.n	800a24a <memcpy+0xe>
 800a256:	bd10      	pop	{r4, pc}

0800a258 <_init>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	bf00      	nop
 800a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25e:	bc08      	pop	{r3}
 800a260:	469e      	mov	lr, r3
 800a262:	4770      	bx	lr

0800a264 <_fini>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	bf00      	nop
 800a268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26a:	bc08      	pop	{r3}
 800a26c:	469e      	mov	lr, r3
 800a26e:	4770      	bx	lr
